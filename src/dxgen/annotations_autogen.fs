module annotations_autogen
open annotations
open cdesc  
open custom_impls

let d3dcommon = 
  [
    ("ID3D10BlobVtbl",IAAutogen(Set.ofList []),"IUnknownVtbl",[
      ("GetBufferPointer",[
        ("This",AThis);
      ],MANone);
      ("GetBufferSize",[
        ("This",AThis);
      ],MANone);
    ]);  
    ("ID3DIncludeVtbl",IAManual, "", [
      ("Open",[
        ("This",AThis);
        ("IncludeType",ANone);
        ("pFileName",ANone);
        ("pParentData",ANone);
        ("ppData",ANone);
        ("pBytes",ANone);
      ],MANone);
      ("Close",[
        ("This",AThis);
        ("pData",ANone);
      ],MANone);
    ]);
  ]

let dxgi = 
  [    
    ("IDXGIAdapter1Vtbl",IAAutogen(Set.ofList [IOSend]), "IDXGIAdapterVtbl", [
      ("GetDesc1",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
    ]);
    ("IDXGIAdapterVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", [
      ("EnumOutputs",[
        ("This",AThis);
        ("Output",ANone);
        ("ppOutput",OutReturnComPtr);
      ],MANone);
      ("GetDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("CheckInterfaceSupport",[
        ("This",AThis);
        ("InterfaceName",ANone);
        ("pUMDVersion",OutReturn);
      ],MANone);
    ]);
    ("IDXGIDevice1Vtbl",IAAutogen(Set.ofList []), "IDXGIDeviceVtbl", [
      ("SetMaximumFrameLatency",[
        ("This",AThis);
        ("MaxLatency",ANone);
      ],MANone);
      ("GetMaximumFrameLatency",[
        ("This",AThis);
        ("pMaxLatency",OutReturn);
      ],MANone);
    ]);
    ("IDXGIDeviceSubObjectVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", [
      ("GetDevice",[
        ("This",AThis);
        ("riid",ANone);
        ("ppDevice",ANone); // I cannot understand what MSDN says about this. TODO: Find out
      ],MADontImplement);
    ]);
    ("IDXGIDeviceVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", 
      [
      ("GetAdapter",[
        ("This",AThis);
        ("pAdapter",OutReturnComPtr);
      ],MANone);
      ("CreateSurface",[
        ("This",AThis);
        ("pDesc",ANone);
        ("NumSurfaces",ANone);
        ("Usage",ANone);
        ("pSharedResource",ANone);
        ("ppSurface",ANone);
      ],MADontImplement); // MSDN states that this method is internal
      ("QueryResourceResidency",[
        ("This",AThis);
        ("ppResources",InComPtrArrayOfSize "NumResources");
        ("pResidencyStatus",OutArrayOfSize "NumResources");
        ("NumResources",ANone);
      ],MANone);
      ("SetGPUThreadPriority",[
        ("This",AThis);
        ("Priority",ANone);
      ],MANone);
      ("GetGPUThreadPriority",[
        ("This",AThis);
        ("pPriority",OutReturn);
      ],MANone);]
    );
    ("IDXGIFactory1Vtbl",IAAutogen(Set.ofList []), "IDXGIFactoryVtbl", [
      ("EnumAdapters1",[
        ("This",AThis);
        ("Adapter",ANone);
        ("ppAdapter",OutReturnComPtr);
      ],MANone);
      ("IsCurrent",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIFactoryVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", 
      [
      ("EnumAdapters",[
        ("This",AThis);
        ("Adapter",ANone);
        ("ppAdapter",OutReturnComPtr);
      ],MANone);
      ("MakeWindowAssociation",[
        ("This",AThis);
        ("WindowHandle",ANone);
        ("Flags",ANone);
      ],MANone);
      ("GetWindowAssociation",[
        ("This",AThis);
        ("pWindowHandle",OutReturn);
      ],MANone);
      ("CreateSwapChain",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("pDesc",ANone);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
      ("CreateSoftwareAdapter",[
        ("This",AThis);
        ("Module",ANone);
        ("ppAdapter",OutReturnComPtr);
      ],MANone);]
    );
    ("IDXGIKeyedMutexVtbl",IAAutogen(Set.ofList []), "IDXGIDeviceSubObjectVtbl", [
      ("AcquireSync",[
        ("This",AThis);
        ("Key",ANone);
        ("dwMilliseconds",ANone);
      ],MANone);
      ("ReleaseSync",[
        ("This",AThis);
        ("Key",ANone);
      ],MANone);
    ]);
    ("IDXGIObjectVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("SetPrivateData",[
        ("This",AThis);
        ("Name",ANone);
        ("DataSize",ANone);
        ("pData", InOfSize "DataSize");
      ],MANone);
      ("SetPrivateDataInterface",[
        ("This",AThis);
        ("Name",ANone);
        ("pUnknown",ANone);
      ],MADontImplement);
      ("GetPrivateData",[
        ("This",AThis);
        ("Name",ANone);
        ("pDataSize",InOutReturn);
        ("pData", OutOptionalOfSize "pDataSize");
      ],MANone);
      ("GetParent",[
        ("This",AThis);
        ("riid",ANone);
        ("ppParent",OutReturnInterface "riid");
      ],MANone);
      ]
    );
    ("IDXGIOutputVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", [
      ("GetDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("GetDisplayModeList",[
        ("This",AThis);
        ("EnumFormat",ANone);
        ("Flags",ANone);
        ("pNumModes",InOutReturn);
        ("pDesc",OutOptionalArrayOfSize "pNumModes");
      ],MANone);
      ("FindClosestMatchingMode",[
        ("This",AThis);
        ("pModeToMatch",ANone);
        ("pClosestMatch",OutReturn);
        ("pConcernedDevice",InOptionalComPtr);
      ],MANone);
      ("WaitForVBlank",[
        ("This",AThis);
      ],MANone);
      ("TakeOwnership",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("Exclusive",ANone);
      ],MANone);
      ("ReleaseOwnership",[
        ("This",AThis);
      ],MANone);
      ("GetGammaControlCapabilities",[
        ("This",AThis);
        ("pGammaCaps",OutReturn);
      ],MANone);
      ("SetGammaControl",[
        ("This",AThis);
        ("pArray",ANone);
      ],MANone);
      ("GetGammaControl",[
        ("This",AThis);
        ("pArray",OutReturn);
      ],MANone);
      ("SetDisplaySurface",[
        ("This",AThis);
        ("pScanoutSurface",InComPtr);
      ],MANone);
      ("GetDisplaySurfaceData",[
        ("This",AThis);
        ("pDestination",InComPtr);
      ],MANone);
      ("GetFrameStatistics",[
        ("This",AThis);
        ("pStats",OutReturn);
      ],MANone);
    ]);
    ("IDXGIResourceVtbl",IAAutogen(Set.ofList []), "IDXGIDeviceSubObjectVtbl", [
      ("GetSharedHandle",[
        ("This",AThis);
        ("pSharedHandle",OutReturn);
      ],MANone);
      ("GetUsage",[
        ("This",AThis);
        ("pUsage",OutReturn);
      ],MANone);
      ("SetEvictionPriority",[
        ("This",AThis);
        ("EvictionPriority",ANone);
      ],MANone);
      ("GetEvictionPriority",[
        ("This",AThis);
        ("pEvictionPriority",OutReturn);
      ],MANone);
    ]);
    ("IDXGISurface1Vtbl",IAAutogen(Set.ofList []), "IDXGISurfaceVtbl", [
      ("GetDC",[
        ("This",AThis);
        ("Discard",ANone);
        ("phdc",OutReturn);
      ],MANone);
      ("ReleaseDC",[
        ("This",AThis);
        ("pDirtyRect",InOptional);
      ],MANone);
    ]);
    ("IDXGISurfaceVtbl",IAAutogen(Set.ofList []), "IDXGIDeviceSubObjectVtbl", [
      ("GetDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("Map",[
        ("This",AThis);
        ("pLockedRect",OutReturn);
        ("MapFlags",ANone);
      ],MANone);
      ("Unmap",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGISwapChainVtbl",IAAutogen(Set.ofList []), "IDXGIDeviceSubObjectVtbl", [
      ("Present",[
        ("This",AThis);
        ("SyncInterval",ANone);
        ("Flags",ANone);
      ],MANone);
      ("GetBuffer",[
        ("This",AThis);
        ("Buffer",ANone);
        ("riid",ANone);
        ("ppSurface",OutReturnInterface "riid");
      ],MANone);
      ("SetFullscreenState",[
        ("This",AThis);
        ("Fullscreen",ANone);
        ("pTarget",InOptionalComPtr);
      ],MANone);
      ("GetFullscreenState",[
        ("This",AThis);
        ("pFullscreen", InOutOptional); 
        ("ppTarget",OutReturnComPtr); // TODO: Implement OutOptionalComPtr, or OutOptionalReturnComPtr. 
      ],MANone);
      ("GetDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("ResizeBuffers",[
        ("This",AThis);
        ("BufferCount",ANone);
        ("Width",ANone);
        ("Height",ANone);
        ("NewFormat",ANone);
        ("SwapChainFlags",ANone);
      ],MANone);
      ("ResizeTarget",[
        ("This",AThis);
        ("pNewTargetParameters",ANone);
      ],MANone);
      ("GetContainingOutput",[
        ("This",AThis);
        ("ppOutput",OutReturnComPtr);
      ],MANone);
      ("GetFrameStatistics",[
        ("This",AThis);
        ("pStats",OutReturn);
      ],MANone);
      ("GetLastPresentCount",[
        ("This",AThis);
        ("pLastPresentCount",OutReturn);
      ],MANone);
    ]);
  ]

let dxgi1_2 = 
  [
    ("IDXGIAdapter2Vtbl",IAAutogen(Set.ofList []), "IDXGIAdapter1Vtbl", [
      ("GetDesc2",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
    ]);
    ("IDXGIDevice2Vtbl",IAAutogen(Set.ofList []), "IDXGIDevice1Vtbl", [
      ("OfferResources",[
        ("This",AThis);
        ("NumResources",ANone);
        ("ppResources",InComPtrArrayOfSize "NumResources");
        ("Priority",ANone);
      ],MANone);
      ("ReclaimResources",[
        ("This",AThis);
        ("NumResources",ANone);
        ("ppResources",InComPtrArrayOfSize "NumResources");
        ("pDiscarded", OutOptionalArrayOfSize "NumResources");
      ],MANone);
      ("EnqueueSetEvent",[
        ("This",AThis);
        ("hEvent",ANone);
      ],MANone);
    ]);
    ("IDXGIDisplayControlVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("IsStereoEnabled",[
        ("This",AThis);
      ],MANone);
      ("SetStereoEnabled",[
        ("This",AThis);
        ("enabled",ANone);
      ],MANone);
    ]);
    ("IDXGIFactory2Vtbl",IAAutogen(Set.ofList []), "IDXGIFactory1Vtbl", [
      ("IsWindowedStereoEnabled",[
        ("This",AThis);
      ],MANone);
      ("CreateSwapChainForHwnd",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("hWnd",ANone);
        ("pDesc",ANone);
        ("pFullscreenDesc",InOptional);
        ("pRestrictToOutput",InOptionalComPtr);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
      ("CreateSwapChainForCoreWindow",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("pWindow",InComPtr);
        ("pDesc",ANone);
        ("pRestrictToOutput",InOptionalComPtr);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
      ("GetSharedResourceAdapterLuid",[
        ("This",AThis);
        ("hResource",ANone);
        ("pLuid",OutReturn);
      ],MANone);
      ("RegisterStereoStatusWindow",[
        ("This",AThis);
        ("WindowHandle",ANone);
        ("wMsg",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("RegisterStereoStatusEvent",[
        ("This",AThis);
        ("hEvent",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("UnregisterStereoStatus",[
        ("This",AThis);
        ("dwCookie",ANone);
      ],MANone);
      ("RegisterOcclusionStatusWindow",[
        ("This",AThis);
        ("WindowHandle",ANone);
        ("wMsg",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("RegisterOcclusionStatusEvent",[
        ("This",AThis);
        ("hEvent",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("UnregisterOcclusionStatus",[
        ("This",AThis);
        ("dwCookie",ANone);
      ],MANone);
      ("CreateSwapChainForComposition",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("pDesc",ANone);
        ("pRestrictToOutput",InOptionalComPtr);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
    ]);
    ("IDXGIOutput1Vtbl",IAAutogen(Set.ofList []), "IDXGIOutputVtbl", [
      ("GetDisplayModeList1",[
        ("This",AThis);
        ("EnumFormat",ANone);
        ("Flags",ANone);
        ("pNumModes", InOutReturn);
        ("pDesc", OutOptionalArrayOfSize "pNumModes");
      ],MANone);
      ("FindClosestMatchingMode1",[
        ("This",AThis);
        ("pModeToMatch",ANone);
        ("pClosestMatch",ANone);
        ("pConcernedDevice",InOptionalComPtr);
      ],MANone);
      ("GetDisplaySurfaceData1",[
        ("This",AThis);
        ("pDestination",InComPtr);
      ],MANone);
      ("DuplicateOutput",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("ppOutputDuplication",OutReturnComPtr);
      ],MANone);
    ]);
    ("IDXGIOutputDuplicationVtbl",IAAutogen(Set.ofList []), "IDXGIObjectVtbl", [
      ("GetDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("AcquireNextFrame",[
        ("This",AThis);
        ("TimeoutInMilliseconds",ANone);
        ("pFrameInfo",ANone);
        ("ppDesktopResource",OutReturnComPtr);
      ],MANone);
      ("GetFrameDirtyRects",[
        ("This",AThis);
        ("DirtyRectsBufferSize",ANone);
        ("pDirtyRectsBuffer",InByteArrayOfSize("DirtyRectsBufferSize",1u));
        ("pDirtyRectsBufferSizeRequired",ANone);
      ],MANone);
      ("GetFrameMoveRects",[
        ("This",AThis);
        ("MoveRectsBufferSize",ANone);
        ("pMoveRectBuffer",InByteArrayOfSize("MoveRectsBufferSize",1u));
        ("pMoveRectsBufferSizeRequired",ANone);
      ],MANone);
      ("GetFramePointerShape",[
        ("This",AThis);
        ("PointerShapeBufferSize",ANone);
        ("pPointerShapeBuffer",InByteArrayOfSize("PointerShapeBufferSize",1u));
        ("pPointerShapeBufferSizeRequired",ANone);
        ("pPointerShapeInfo",ANone);
      ],MANone);
      ("MapDesktopSurface",[
        ("This",AThis);
        ("pLockedRect",OutReturn);
      ],MANone);
      ("UnMapDesktopSurface",[
        ("This",AThis);
      ],MANone);
      ("ReleaseFrame",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIResource1Vtbl",IAAutogen(Set.ofList []), "IDXGIResourceVtbl", [
      ("CreateSubresourceSurface",[
        ("This",AThis);
        ("index",ANone);
        ("ppSurface",OutReturnComPtr);
      ],MANone);
      ("CreateSharedHandle",[
        ("This",AThis);
        ("pAttributes",InOptional);
        ("dwAccess",ANone);
        ("lpName",ANone);
        ("pHandle",OutReturn);
      ],MANone);
    ]);
    ("IDXGISurface2Vtbl",IAAutogen(Set.ofList []), "IDXGISurface1Vtbl", [
      ("GetResource",[
        ("This",AThis);
        ("riid",ANone);
        ("ppParentResource",OutReturnInterface "riid");
        ("pSubresourceIndex",ANone);
      ],MANone);
    ]);
    ("IDXGISwapChain1Vtbl",IAAutogen(Set.ofList []), "IDXGISwapChainVtbl", [
      ("GetDesc1",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("GetFullscreenDesc",[
        ("This",AThis);
        ("pDesc",OutReturn);
      ],MANone);
      ("GetHwnd",[
        ("This",AThis);
        ("pHwnd",OutReturn);
      ],MANone);
      ("GetCoreWindow",[
        ("This",AThis);
        ("refiid",ANone);
        ("ppUnk",OutReturnInterface "refiid"); //TODO: check if refiid is interface id
      ],MANone);
      ("Present1",[
        ("This",AThis);
        ("SyncInterval",ANone);
        ("PresentFlags",ANone);
        ("pPresentParameters",ANone);
      ],MANone);
      ("IsTemporaryMonoSupported",[
        ("This",AThis);
      ],MANone);
      ("GetRestrictToOutput",[
        ("This",AThis);
        ("ppRestrictToOutput",OutReturnComPtr);
      ],MANone);
      ("SetBackgroundColor",[
        ("This",AThis);
        ("pColor",ANone);
      ],MANone);
      ("GetBackgroundColor",[
        ("This",AThis);
        ("pColor",OutReturn);
      ],MANone);
      ("SetRotation",[
        ("This",AThis);
        ("Rotation",ANone);
      ],MANone);
      ("GetRotation",[
        ("This",AThis);
        ("pRotation",OutReturn);
      ],MANone);
    ]);
  ]

let dxgi1_3 = 
  [
    ("IDXGIDecodeSwapChainVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("PresentBuffer",[
        ("This",AThis);
        ("BufferToPresent",ANone);
        ("SyncInterval",ANone);
        ("Flags",ANone);
      ],MANone);
      ("SetSourceRect",[
        ("This",AThis);
        ("pRect",ANone);
      ],MANone);
      ("SetTargetRect",[
        ("This",AThis);
        ("pRect",ANone);
      ],MANone);
      ("SetDestSize",[
        ("This",AThis);
        ("Width",ANone);
        ("Height",ANone);
      ],MANone);
      ("GetSourceRect",[
        ("This",AThis);
        ("pRect",OutReturn);
      ],MANone);
      ("GetTargetRect",[
        ("This",AThis);
        ("pRect",OutReturn);
      ],MANone);
      ("GetDestSize",[
        ("This",AThis);
        ("pWidth",OutReturnCombine("DSize","width"));
        ("pHeight",OutReturnCombine("DSize","height"));
      ],MANone);
      ("SetColorSpace",[
        ("This",AThis);
        ("ColorSpace",ANone);
      ],MANone);
      ("GetColorSpace",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIDevice3Vtbl",IAAutogen(Set.ofList []), "IDXGIDevice2Vtbl", [
      ("Trim",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIFactory3Vtbl",IAAutogen(Set.ofList []), "IDXGIFactory2Vtbl", [
      ("GetCreationFlags",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIFactoryMediaVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("CreateSwapChainForCompositionSurfaceHandle",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("hSurface",ANone);
        ("pDesc",ANone);
        ("pRestrictToOutput",InOptionalComPtr);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
      ("CreateDecodeSwapChainForCompositionSurfaceHandle",[
        ("This",AThis);
        ("pDevice",InComPtr);
        ("hSurface",ANone);
        ("pDesc",ANone);
        ("pYuvDecodeBuffers",InComPtr);
        ("pRestrictToOutput",InOptionalComPtr);
        ("ppSwapChain",OutReturnComPtr);
      ],MANone);
    ]);
    ("IDXGIOutput2Vtbl",IAAutogen(Set.ofList []), "IDXGIOutput1Vtbl", [
      ("SupportsOverlays",[
        ("This",AThis);
      ],MANone);
    ]);
    ("IDXGIOutput3Vtbl",IAAutogen(Set.ofList []), "IDXGIOutput2Vtbl", [
      ("CheckOverlaySupport",[
        ("This",AThis);
        ("EnumFormat",ANone);
        ("pConcernedDevice",InComPtr);
        ("pFlags",OutReturn);
      ],MANone);
    ]);
    ("IDXGISwapChain2Vtbl",IAAutogen(Set.ofList []), "IDXGISwapChain1Vtbl", [
      ("SetSourceSize",[
        ("This",AThis);
        ("Width",ANone);
        ("Height",ANone);
      ],MANone);
      ("GetSourceSize",[
        ("This",AThis);
        ("pWidth",OutReturnCombine("DSize","width"));
        ("pHeight",OutReturnCombine("DSize","height"));
      ],MANone);
      ("SetMaximumFrameLatency",[
        ("This",AThis);
        ("MaxLatency",ANone);
      ],MANone);
      ("GetMaximumFrameLatency",[
        ("This",AThis);
        ("pMaxLatency",OutReturn);
      ],MANone);
      ("GetFrameLatencyWaitableObject",[
        ("This",AThis);
      ],MANone);
      ("SetMatrixTransform",[
        ("This",AThis);
        ("pMatrix",ANone);
      ],MANone);
      ("GetMatrixTransform",[
        ("This",AThis);
        ("pMatrix",OutReturn);
      ],MANone);
    ]);
    ("IDXGISwapChainMediaVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("GetFrameStatisticsMedia",[
        ("This",AThis);
        ("pStats",OutReturn);
      ],MANone);
      ("SetPresentDuration",[
        ("This",AThis);
        ("Duration",ANone);
      ],MANone);
      ("CheckPresentDurationSupport",[
        ("This",AThis);
        ("DesiredPresentDuration",ANone);
        ("pClosestSmallerPresentDuration",ANone);
        ("pClosestLargerPresentDuration",ANone);
      ],MANone);
    ]);
  ]

let dxgi1_4 = 
  [
    ("IDXGIAdapter3Vtbl",IAAutogen(Set.ofList []), "IDXGIAdapter2Vtbl", [
      ("RegisterHardwareContentProtectionTeardownStatusEvent",[
        ("This",AThis);
        ("hEvent",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("UnregisterHardwareContentProtectionTeardownStatus",[
        ("This",AThis);
        ("dwCookie",ANone);
      ],MANone);
      ("QueryVideoMemoryInfo",[
        ("This",AThis);
        ("NodeIndex",ANone);
        ("MemorySegmentGroup",ANone);
        ("pVideoMemoryInfo",OutReturn);
      ],MANone);
      ("SetVideoMemoryReservation",[
        ("This",AThis);
        ("NodeIndex",ANone);
        ("MemorySegmentGroup",ANone);
        ("Reservation",ANone);
      ],MANone);
      ("RegisterVideoMemoryBudgetChangeNotificationEvent",[
        ("This",AThis);
        ("hEvent",ANone);
        ("pdwCookie",OutReturn);
      ],MANone);
      ("UnregisterVideoMemoryBudgetChangeNotification",[
        ("This",AThis);
        ("dwCookie",ANone);
      ],MANone);
    ]);
    ("IDXGIFactory4Vtbl",IAAutogen(Set.ofList []), "IDXGIFactory3Vtbl", [
      ("EnumAdapterByLuid",[
        ("This",AThis);
        ("AdapterLuid",ANone);
        ("riid",ANone);
        ("ppvAdapter",OutReturnInterface "riid");
      ],MANone);
      ("EnumWarpAdapter",[
        ("This",AThis);
        ("riid",ANone);
        ("ppvAdapter",OutReturnInterface "riid");
      ],MANone);
    ]);
    ("IDXGIOutput4Vtbl",IAAutogen(Set.ofList []), "IDXGIOutput3Vtbl", [
      ("CheckOverlayColorSpaceSupport",[
        ("This",AThis);
        ("Format",ANone);
        ("ColorSpace",ANone);
        ("pConcernedDevice",InComPtr);
        ("pFlags",OutReturn);
      ],MANone);
    ]);
    ("IDXGISwapChain3Vtbl",IAAutogen(Set.ofList []), "IDXGISwapChain2Vtbl", [
      ("GetCurrentBackBufferIndex",[
        ("This",AThis);
      ],MANone);
      ("CheckColorSpaceSupport",[
        ("This",AThis);
        ("ColorSpace",ANone);
        ("pColorSpaceSupport",OutReturn);
      ],MANone);
      ("SetColorSpace1",[
        ("This",AThis);
        ("ColorSpace",ANone);
      ],MANone);
      ("ResizeBuffers1",[
        ("This",AThis);
        ("BufferCount",ANone);
        ("Width",ANone);
        ("Height",ANone);
        ("Format",ANone);
        ("SwapChainFlags",ANone);
        ("pCreationNodeMask",InArrayOfSize "BufferCount");
        ("ppPresentQueue",InComPtrArrayOfSize "BufferCount");
      ],MANone);
    ]);
  ]

let d3d12sdklayers =
  [
    ("ID3D12DebugCommandListVtbl",IAManual, "IUnknownVtbl", [
      ("AssertResourceState",[
        ("This",AThis);
        ("pResource",ANone);
        ("Subresource",ANone);
        ("State",ANone);
      ],MANone);
      ("SetFeatureMask",[
        ("This",AThis);
        ("Mask",ANone);
      ],MANone);
      ("GetFeatureMask",[
        ("This",AThis);
      ],MANone);
    ]);
    ("ID3D12DebugCommandQueueVtbl",IAManual, "IUnknownVtbl", [
      ("AssertResourceState",[
        ("This",AThis);
        ("pResource",ANone);
        ("Subresource",ANone);
        ("State",ANone);
      ],MANone);
    ]);
    ("ID3D12DebugDeviceVtbl",IAManual, "IUnknownVtbl", [
      ("SetFeatureMask",[
        ("This",AThis);
        ("Mask",ANone);
      ],MANone);
      ("GetFeatureMask",[
        ("This",AThis);
      ],MANone);
      ("ReportLiveDeviceObjects",[
        ("This",AThis);
        ("Flags",ANone);
      ],MANone);
    ]);
    ("ID3D12DebugVtbl", IAAutogen(Set.ofList []), "IUnknownVtbl", [
      ("EnableDebugLayer",[
        ("This",AThis);
      ],MANone);
    ]);    
    ("ID3D12InfoQueueVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [ //TODO: Annotate debug interfaces
      ("SetMessageCountLimit",[
        ("This",AThis);
        ("MessageCountLimit",ANone);
      ],MANone);
      ("ClearStoredMessages",[
        ("This",AThis);
      ],MANone);
      ("GetMessage",[
        ("This",AThis);
        ("MessageIndex",ANone);
        ("pMessage",OutOptional);
        ("pMessageByteLength",ANone);
      ],MANone);
      ("GetNumMessagesAllowedByStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("GetNumMessagesDeniedByStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("GetNumStoredMessages",[
        ("This",AThis);
      ],MANone);
      ("GetNumStoredMessagesAllowedByRetrievalFilter",[
        ("This",AThis);
      ],MANone);
      ("GetNumMessagesDiscardedByMessageCountLimit",[
        ("This",AThis);
      ],MANone);
      ("GetMessageCountLimit",[
        ("This",AThis);
      ],MANone);
      ("AddStorageFilterEntries",[
        ("This",AThis);
        ("pFilter",ANone);
      ],MANone);
      ("GetStorageFilter",[
        ("This",AThis);
        ("pFilter",ANone);
        ("pFilterByteLength",ANone);
      ],MANone);
      ("ClearStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("PushEmptyStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("PushCopyOfStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("PushStorageFilter",[
        ("This",AThis);
        ("pFilter",ANone);
      ],MANone);
      ("PopStorageFilter",[
        ("This",AThis);
      ],MANone);
      ("GetStorageFilterStackSize",[
        ("This",AThis);
      ],MANone);
      ("AddRetrievalFilterEntries",[
        ("This",AThis);
        ("pFilter",ANone);
      ],MANone);
      ("GetRetrievalFilter",[
        ("This",AThis);
        ("pFilter",ANone);
        ("pFilterByteLength",ANone);
      ],MANone);
      ("ClearRetrievalFilter",[
        ("This",AThis);
      ],MANone);
      ("PushEmptyRetrievalFilter",[
        ("This",AThis);
      ],MANone);
      ("PushCopyOfRetrievalFilter",[
        ("This",AThis);
      ],MANone);
      ("PushRetrievalFilter",[
        ("This",AThis);
        ("pFilter",ANone);
      ],MANone);
      ("PopRetrievalFilter",[
        ("This",AThis);
      ],MANone);
      ("GetRetrievalFilterStackSize",[
        ("This",AThis);
      ],MANone);
      ("AddMessage",[
        ("This",AThis);
        ("Category",ANone);
        ("Severity",ANone);
        ("ID",ANone);
        ("pDescription",ANone);
      ],MANone);
      ("AddApplicationMessage",[
        ("This",AThis);
        ("Severity",ANone);
        ("pDescription",ANone);
      ],MANone);
      ("SetBreakOnCategory",[
        ("This",AThis);
        ("Category",ANone);
        ("bEnable",ANone);
      ],MANone);
      ("SetBreakOnSeverity",[
        ("This",AThis);
        ("Severity",ANone);
        ("bEnable",ANone);
      ],MANone);
      ("SetBreakOnID",[
        ("This",AThis);
        ("ID",ANone);
        ("bEnable",ANone);
      ],MANone);
      ("GetBreakOnCategory",[
        ("This",AThis);
        ("Category",ANone);
      ],MANone);
      ("GetBreakOnSeverity",[
        ("This",AThis);
        ("Severity",ANone);
      ],MANone);
      ("GetBreakOnID",[
        ("This",AThis);
        ("ID",ANone);
      ],MANone);
      ("SetMuteDebugOutput",[
        ("This",AThis);
        ("bMute",ANone);
      ],MANone);
      ("GetMuteDebugOutput",[
        ("This",AThis);
      ],MANone);
    ]);
  ]

let d3d12annotations=
    [
      ("ID3D12CommandAllocatorVtbl",IAAutogen(Set.ofList [IOSend; IOSync]), "ID3D12PageableVtbl", [
        ("Reset",[
          ("This",AThis);
        ],MANone);
      ]);
      ("ID3D12CommandListVtbl",IAAutogen(Set.ofList []), "ID3D12DeviceChildVtbl", [
        ("GetType",[
          ("This",AThis);
        ],MANone);
      ]);
      ("ID3D12CommandQueueVtbl",IAAutogen(Set.ofList []), "ID3D12PageableVtbl", [
        ("UpdateTileMappings",[
          ("This",AThis);
          ("pResource",InComPtr);
          ("NumResourceRegions",ANone);
          ("pResourceRegionStartCoordinates",InOptionalArrayOfSize "NumResourceRegions");
          ("pResourceRegionSizes",InOptionalArrayOfSize "NumResourceRegions");
          ("pHeap",InOptionalComPtr);
          ("NumRanges",ANone);
          ("pRangeFlags",InOptionalArrayOfSize "NumRanges");
          ("pHeapRangeStartOffsets",InOptionalArrayOfSize "NumRanges");
          ("pRangeTileCounts",InOptionalArrayOfSize "NumRanges");
          ("Flags",ANone);
        ],MANone);
        ("CopyTileMappings",[
          ("This",AThis);
          ("pDstResource",InComPtr);
          ("pDstRegionStartCoordinate",ANone);
          ("pSrcResource",InComPtr);
          ("pSrcRegionStartCoordinate",ANone);
          ("pRegionSize",ANone);
          ("Flags",ANone);
        ],MANone);
        ("ExecuteCommandLists",[
          ("This",AThis);
          ("NumCommandLists",ANone);
          ("ppCommandLists",InComPtrArrayOfSize "NumCommandLists");
        ],MANone);
        ("SetMarker",[
          ("This",AThis);
          ("Metadata",ANone);
          ("pData",ANone);
          ("Size",ANone);
        ],MADontImplement);
        ("BeginEvent",[
          ("This",AThis);
          ("Metadata",ANone);
          ("pData",ANone);
          ("Size",ANone);
        ],MADontImplement);
        ("EndEvent",[
          ("This",AThis);
        ],MADontImplement);
        ("Signal",[
          ("This",AThis);
          ("pFence",InComPtr);
          ("Value",ANone);
        ],MANone);
        ("Wait",[
          ("This",AThis);
          ("pFence",InComPtr);
          ("Value",ANone);
        ],MANone);
        ("GetTimestampFrequency",[
          ("This",AThis);
          ("pFrequency",OutReturn);
        ],MANone);
        ("GetClockCalibration",[
          ("This",AThis);
          ("pGpuTimestamp",OutReturnCombine("GPUCPUTimestamp","gpu_timestamp"));
          ("pCpuTimestamp",OutReturnCombine("GPUCPUTimestamp","cpu_timestamp"));
        ],MANone);
        ("GetDesc",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
      ]);
      ("ID3D12CommandSignatureVtbl",IAAutogen(Set.ofList []), "ID3D12PageableVtbl", []);
      ("ID3D12DescriptorHeapVtbl",IAAutogen(Set.ofList [IOSend]), "ID3D12PageableVtbl", [
        ("GetDesc",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
        ("GetCPUDescriptorHandleForHeapStart",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
        ("GetGPUDescriptorHandleForHeapStart",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
      ]);
      ("ID3D12DeviceChildVtbl",IAAutogen(Set.ofList []), "ID3D12ObjectVtbl",  [
        ("GetDevice",[
          ("This",AThis);
          ("riid",ANone);
          ("ppvDevice",OutReturnInterface "riid");
        ],MANone);
      ]);
      ("ID3D12DeviceVtbl",IAAutogen(Set.ofList []), "ID3D12ObjectVtbl", [
        ("GetNodeCount",[
          ("This",AThis);
        ],MANone);
        ("CreateCommandQueue",[
          ("This",AThis);
          ("pDesc",ANone);
          ("riid",ANone);
          ("ppCommandQueue",OutReturnKnownInterface("riid","D3D12CommandQueue"));
        ],MANone);
        ("CreateCommandAllocator",[
          ("This",AThis);
          ("type_",ANone);
          ("riid",ANone);
          ("ppCommandAllocator",OutReturnKnownInterface("riid","D3D12CommandAllocator"));
        ],MANone);
        ("CreateGraphicsPipelineState",[
          ("This",AThis);
          ("pDesc",ANone);
          ("riid",ANone);
          ("ppPipelineState",OutReturnKnownInterface("riid","D3D12PipelineState"));
        ],MANone);
        ("CreateComputePipelineState",[
          ("This",AThis);
          ("pDesc",ANone);
          ("riid",ANone);
          ("ppPipelineState",OutReturnKnownInterface("riid","D3D12PipelineState"));
        ],MANone);
        ("CreateCommandList",[
          ("This",AThis);
          ("nodeMask",ANone);
          ("type_",ANone);
          ("pCommandAllocator",InComPtr);
          ("pInitialState",InOptionalComPtr);
          ("riid",ANone);
          ("ppCommandList",OutReturnInterface "riid");
        ],MANone);
        ("CheckFeatureSupport",[
          ("This",AThis);
          ("Feature",TypeSelector("pFeatureSupportData",[("Options","D3D12_FEATURE_D3D12_OPTIONS",Ptr(StructRef "D3D12_FEATURE_DATA_D3D12_OPTIONS"), InOutOfSize "FeatureSupportDataSize");
                                                         ("Arch","D3D12_FEATURE_ARCHITECTURE",Ptr(StructRef "D3D12_FEATURE_DATA_ARCHITECTURE"), InOutOfSize "FeatureSupportDataSize");
                                                         ("FeatureLevels","D3D12_FEATURE_FEATURE_LEVELS",Ptr(StructRef "D3D12_FEATURE_DATA_FEATURE_LEVELS"), InOutOfSize "FeatureSupportDataSize");
                                                         ("FormatSupport","D3D12_FEATURE_FORMAT_SUPPORT",Ptr(StructRef "D3D12_FEATURE_DATA_FORMAT_SUPPORT"), InOutOfSize "FeatureSupportDataSize");
                                                         ("MultisampleQualityLevels","D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS",Ptr(StructRef "D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS"), InOutOfSize "FeatureSupportDataSize");
                                                         ("FormatInfo","D3D12_FEATURE_FORMAT_INFO",Ptr(StructRef "D3D12_FEATURE_DATA_FORMAT_INFO"), InOutOfSize "FeatureSupportDataSize");
                                                         ("VirtualAddress","D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT",Ptr(StructRef "D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT"), InOutOfSize "FeatureSupportDataSize");
                                                         ]));
          ("pFeatureSupportData",InOutOfSize "FeatureSupportDataSize");
          ("FeatureSupportDataSize",ANone);
        ],MANone);
        ("CreateDescriptorHeap",[
          ("This",AThis);
          ("pDescriptorHeapDesc",ANone);
          ("riid",ANone);
          ("ppvHeap",OutReturnKnownInterface("riid","D3D12DescriptorHeap"));
        ],MANone);
        ("GetDescriptorHandleIncrementSize",[
          ("This",AThis);
          ("DescriptorHeapType",ANone);
        ],MANone);
        ("CreateRootSignature",[
          ("This",AThis);
          ("nodeMask",ANone);
          ("pBlobWithRootSignature", InByteArrayOfSize ("blobLengthInBytes",1u));
          ("blobLengthInBytes",ANone);
          ("riid",ANone);
          ("ppvRootSignature",OutReturnKnownInterface("riid","D3D12RootSignature"));
        ],MANone);
        ("CreateConstantBufferView",[
          ("This",AThis);
          ("pDesc",InOptional);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CreateShaderResourceView",[
          ("This",AThis);
          ("pResource",InOptionalComPtr);
          ("pDesc",InOptional);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CreateUnorderedAccessView",[
          ("This",AThis);
          ("pResource",InOptionalComPtr);
          ("pCounterResource",InOptionalComPtr);
          ("pDesc",InOptional);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CreateRenderTargetView",[
          ("This",AThis);
          ("pResource",InOptionalComPtr);
          ("pDesc",InOptional);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CreateDepthStencilView",[
          ("This",AThis);
          ("pResource",InOptionalComPtr);
          ("pDesc",InOptional);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CreateSampler",[
          ("This",AThis);
          ("pDesc",ANone);
          ("DestDescriptor",ANone);
        ],MANone);
        ("CopyDescriptors",[
          ("This",AThis);
          ("NumDestDescriptorRanges",ANone);
          ("pDestDescriptorRangeStarts",InArrayOfSize "NumDestDescriptorRanges");
          ("pDestDescriptorRangeSizes",InOptionalArrayOfSize "NumDestDescriptorRanges");
          ("NumSrcDescriptorRanges",ANone);
          ("pSrcDescriptorRangeStarts",InArrayOfSize "NumSrcDescriptorRanges");
          ("pSrcDescriptorRangeSizes",InOptionalArrayOfSize "NumSrcDescriptorRanges");
          ("DescriptorHeapsType",ANone);
        ],MANone);
        ("CopyDescriptorsSimple",[
          ("This",AThis);
          ("NumDescriptors",ANone);
          ("DestDescriptorRangeStart",ANone);
          ("SrcDescriptorRangeStart",ANone);
          ("DescriptorHeapsType",ANone);
        ],MANone);
        ("GetResourceAllocationInfo",[
          ("This",AThis);
          ("visibleMask",ANone);
          ("numResourceDescs",ANone);
          ("pResourceDescs",InArrayOfSize "numResourceDescs");
          ("__ret_val",OutReturn);
        ],MANone);
        ("GetCustomHeapProperties",[
          ("This",AThis);
          ("nodeMask",ANone);
          ("heapType",ANone);
          ("__ret_val",OutReturn);
        ],MANone);
        ("CreateCommittedResource",[
          ("This",AThis);
          ("pHeapProperties",ANone);
          ("HeapFlags",ANone);
          ("pResourceDesc",ANone);
          ("InitialResourceState",ANone);
          ("pOptimizedClearValue",InOptional);
          ("riidResource",ANone);
          ("ppvResource",OutReturnKnownInterface("riidResource","D3D12Resource"));
        ],MANone);
        ("CreateHeap",[
          ("This",AThis);
          ("pDesc",ANone);
          ("riid",ANone);
          ("ppvHeap",OutReturnKnownInterface("riid","D3D12Heap"));
        ],MANone);
        ("CreatePlacedResource",[
          ("This",AThis);
          ("pHeap",ANone);
          ("HeapOffset",ANone);
          ("pDesc",ANone);
          ("InitialState",ANone);
          ("pOptimizedClearValue",InOptional);
          ("riid",ANone);
          ("ppvResource",OutReturnKnownInterface("riid","D3D12Resource"));
        ],MANone);
        ("CreateReservedResource",[
          ("This",AThis);
          ("pDesc",ANone);
          ("InitialState",ANone);
          ("pOptimizedClearValue",InOptional);
          ("riid",ANone);
          ("ppvResource",OutReturnKnownInterface("riid","D3D12Resource"));
        ],MANone);
        ("CreateSharedHandle",[
          ("This",AThis);
          ("pObject",ANone);
          ("pAttributes",InOptional);
          ("Access",ANone);
          ("Name",ANone);
          ("pHandle",OutReturn);
        ],MANone);
        ("OpenSharedHandle",[
          ("This",AThis);
          ("NTHandle",ANone);
          ("riid",ANone);
          ("ppvObj",OutReturnInterface("riid"));
        ],MANone);
        ("OpenSharedHandleByName",[
          ("This",AThis);
          ("Name",ANone);
          ("Access",ANone);
          ("pNTHandle",OutReturn);
        ],MANone);
        ("MakeResident",[
          ("This",AThis);
          ("NumObjects",ANone);
          ("ppObjects",InComPtrArrayOfSize "NumObjects");
        ],MANone);
        ("Evict",[
          ("This",AThis);
          ("NumObjects",ANone);
          ("ppObjects",InComPtrArrayOfSize "NumObjects");
        ],MANone);
        ("CreateFence",[
          ("This",AThis);
          ("InitialValue",ANone);
          ("Flags",ANone);
          ("riid",ANone);
          ("ppFence",OutReturnKnownInterface("riid","D3D12Fence"));
        ],MANone);
        ("GetDeviceRemovedReason",[
          ("This",AThis);
        ],MANone);
        ("GetCopyableFootprints",[
          ("This",AThis);
          ("pResourceDesc",ANone);
          ("FirstSubresource",ANone);
          ("NumSubresources",ANone);
          ("BaseOffset",ANone);
          ("pLayouts", OutOptionalArrayOfSize "NumSubresources");
          ("pNumRows",OutOptionalArrayOfSize "NumSubresources");
          ("pRowSizeInBytes",OutOptionalArrayOfSize "NumSubresources");
          ("pTotalBytes",OutOptional);
        ],MANone);
        ("CreateQueryHeap",[
          ("This",AThis);
          ("pDesc",ANone);
          ("riid",ANone);
          ("ppvHeap",OutReturnKnownInterface("riid","D3D12QueryHeap"));
        ],MANone);
        ("SetStablePowerState",[
          ("This",AThis);
          ("Enable",ANone);
        ],MANone);
        ("CreateCommandSignature",[
          ("This",AThis);
          ("pDesc",ANone);
          ("pRootSignature",InOptional); // Structure needs to be converted (contains pointer)
          ("riid",ANone);
          ("ppvCommandSignature",OutReturnKnownInterface("riid","D3D12CommandSignature"));
        ],MANone);
        ("GetResourceTiling",[
          ("This",AThis);
          ("pTiledResource",InComPtr);
          ("pNumTilesForEntireResource",OutOptional);
          ("pPackedMipDesc",OutOptional);
          ("pStandardTileShapeForNonPackedMips",OutOptional);
          ("pNumSubresourceTilings",InOutOptional);
          ("FirstSubresourceTilingToGet",ANone);
          ("pSubresourceTilingsForNonPackedMips",OutReturn);
        ],MANone);
        ("GetAdapterLuid",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
      ]);
      ("ID3D12FenceVtbl",IAAutogen(Set.ofList [IOSync]), "ID3D12PageableVtbl", [
        ("GetCompletedValue",[
          ("This",AThis);
        ],MANone);
        ("SetEventOnCompletion",[
          ("This",AThis);
          ("Value",ANone);
          ("hEvent",ANone);
        ],MANone);
        ("Signal",[
          ("This",AThis);
          ("Value",ANone);
        ],MANone);
      ]);
      ("ID3D12GraphicsCommandListVtbl", IAAutogen(Set.ofList [IOSend; IOSync]),  "ID3D12CommandListVtbl", [
        ("Close",[
          ("This",AThis);
        ],MANone);
        ("Reset",[
          ("This",AThis);
          ("pAllocator",InComPtr);
          ("pInitialState",InOptionalComPtr);
        ],MANone);
        ("ClearState",[
          ("This",AThis);
          ("pPipelineState",InOptionalComPtr);
        ],MANone);
        ("DrawInstanced",[
          ("This",AThis);
          ("VertexCountPerInstance",ANone);
          ("InstanceCount",ANone);
          ("StartVertexLocation",ANone);
          ("StartInstanceLocation",ANone);
        ],MANone);
        ("DrawIndexedInstanced",[
          ("This",AThis);
          ("IndexCountPerInstance",ANone);
          ("InstanceCount",ANone);
          ("StartIndexLocation",ANone);
          ("BaseVertexLocation",ANone);
          ("StartInstanceLocation",ANone);
        ],MANone);
        ("Dispatch",[
          ("This",AThis);
          ("ThreadGroupCountX",ANone);
          ("ThreadGroupCountY",ANone);
          ("ThreadGroupCountZ",ANone);
        ],MANone);
        ("CopyBufferRegion",[
          ("This",AThis);
          ("pDstBuffer",InComPtr);
          ("DstOffset",ANone);
          ("pSrcBuffer",InComPtr);
          ("SrcOffset",ANone);
          ("NumBytes",ANone);
        ],MANone);
        ("CopyTextureRegion",[
          ("This",AThis);
          ("pDst",ANone);
          ("DstX",ANone);
          ("DstY",ANone);
          ("DstZ",ANone);
          ("pSrc",ANone);
          ("pSrcBox",InOptional);
        ],MANone);
        ("CopyResource",[
          ("This",AThis);
          ("pDstResource",InComPtr);
          ("pSrcResource",InComPtr);
        ],MANone);
        ("CopyTiles",[
          ("This",AThis);
          ("pTiledResource",InComPtr);
          ("pTileRegionStartCoordinate",ANone);
          ("pTileRegionSize",ANone);
          ("pBuffer",InComPtr);
          ("BufferStartOffsetInBytes",ANone);
          ("Flags",ANone);
        ],MANone);
        ("ResolveSubresource",[
          ("This",AThis);
          ("pDstResource",InComPtr);
          ("DstSubresource",ANone);
          ("pSrcResource",InComPtr);
          ("SrcSubresource",ANone);
          ("Format",ANone);
        ],MANone);
        ("IASetPrimitiveTopology",[
          ("This",AThis);
          ("PrimitiveTopology",ANone);
        ],MANone);
        ("RSSetViewports",[
          ("This",AThis);
          ("NumViewports",ANone);
          ("pViewports",InArrayOfSize "NumViewports");
        ],MANone);
        ("RSSetScissorRects",[
          ("This",AThis);
          ("NumRects",ANone);
          ("pRects",InArrayOfSize "NumRects");
        ],MANone);
        ("OMSetBlendFactor",[
          ("This",AThis);
          ("BlendFactor",InOptional);
        ],MANone);
        ("OMSetStencilRef",[
          ("This",AThis);
          ("StencilRef",ANone);
        ],MANone);
        ("SetPipelineState",[
          ("This",AThis);
          ("pPipelineState",InComPtr);
        ],MANone);
        ("ResourceBarrier",[
          ("This",AThis);
          ("NumBarriers",ANone);
          ("pBarriers",InArrayOfSize "NumBarriers");
        ],MANone);
        ("ExecuteBundle",[
          ("This",AThis);
          ("pCommandList",InComPtr);
        ],MANone);
        ("SetDescriptorHeaps",[
          ("This",AThis);
          ("NumDescriptorHeaps",ANone);
          ("ppDescriptorHeaps", InComPtrArrayOfSize "NumDescriptorHeaps");
        ],MANone);
        ("SetComputeRootSignature",[
          ("This",AThis);
          ("pRootSignature",InComPtr);
        ],MANone);
        ("SetGraphicsRootSignature",[
          ("This",AThis);
          ("pRootSignature",InComPtr);
        ],MANone);
        ("SetComputeRootDescriptorTable",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BaseDescriptor",ANone);
        ],MANone);
        ("SetGraphicsRootDescriptorTable",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BaseDescriptor",ANone);
        ],MANone);
        ("SetComputeRoot32BitConstant",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("SrcData",ANone);
          ("DestOffsetIn32BitValues",ANone);
        ],MANone);
        ("SetGraphicsRoot32BitConstant",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("SrcData",ANone);
          ("DestOffsetIn32BitValues",ANone);
        ],MANone);
        ("SetComputeRoot32BitConstants",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("Num32BitValuesToSet",ANone);
          ("pSrcData",InByteArrayOfSize("Num32BitValuesToSet",4u));
          ("DestOffsetIn32BitValues",ANone);
        ],MANone);
        ("SetGraphicsRoot32BitConstants",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("Num32BitValuesToSet",ANone);
          ("pSrcData",InByteArrayOfSize("Num32BitValuesToSet",4u));
          ("DestOffsetIn32BitValues",ANone);
        ],MANone);
        ("SetComputeRootConstantBufferView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("SetGraphicsRootConstantBufferView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("SetComputeRootShaderResourceView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("SetGraphicsRootShaderResourceView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("SetComputeRootUnorderedAccessView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("SetGraphicsRootUnorderedAccessView",[
          ("This",AThis);
          ("RootParameterIndex",ANone);
          ("BufferLocation",ANone);
        ],MANone);
        ("IASetIndexBuffer",[
          ("This",AThis);
          ("pView",InOptional);
        ],MANone);
        ("IASetVertexBuffers",[
          ("This",AThis);
          ("StartSlot",ANone);
          ("NumViews",ANone);
          ("pViews",InOptionalArrayOfSize "NumViews");
        ],MANone);
        ("SOSetTargets",[
          ("This",AThis);
          ("StartSlot",ANone);
          ("NumViews",ANone);
          ("pViews",InOptionalArrayOfSize "NumViews");
        ],MANone);
        ("OMSetRenderTargets",[
          ("This",AThis);
          ("NumRenderTargetDescriptors",ANone);
          ("pRenderTargetDescriptors",ANone);
          ("RTsSingleHandleToDescriptorRange", 
            TypeSelector("pRenderTargetDescriptors",[("","TRUE",Ptr(Const(StructRef "D3D12_CPU_DESCRIPTOR_HANDLE")),ANone);
                                                     ("Arr","FALSE",Ptr(Const(StructRef "D3D12_CPU_DESCRIPTOR_HANDLE")),InArrayOfSize "NumRenderTargetDescriptors");]));
          ("pDepthStencilDescriptor",InOptional);
        ],MANone);
        ("ClearDepthStencilView",[
          ("This",AThis);
          ("DepthStencilView",ANone);
          ("ClearFlags",ANone);
          ("Depth",ANone);
          ("Stencil",ANone);
          ("NumRects",ANone);
          ("pRects",InArrayOfSize "NumRects");
        ],MANone);
        ("ClearRenderTargetView",[
          ("This",AThis);
          ("RenderTargetView",ANone);
          ("ColorRGBA",ANone);
          ("NumRects",ANone);
          ("pRects",InArrayOfSize "NumRects");
        ],MANone);
        ("ClearUnorderedAccessViewUint",[
          ("This",AThis);
          ("ViewGPUHandleInCurrentHeap",ANone);
          ("ViewCPUHandle",ANone);
          ("pResource",InComPtr);
          ("Values",ANone);
          ("NumRects",ANone);
          ("pRects",InArrayOfSize "NumRects");
        ],MANone);
        ("ClearUnorderedAccessViewFloat",[
          ("This",AThis);
          ("ViewGPUHandleInCurrentHeap",ANone);
          ("ViewCPUHandle",ANone);
          ("pResource",InComPtr);
          ("Values",ANone);
          ("NumRects",ANone);
          ("pRects",InArrayOfSize "NumRects");
        ],MANone);
        ("DiscardResource",[
          ("This",AThis);
          ("pResource",InComPtr);
          ("pRegion",InOptional);
        ],MANone);
        ("BeginQuery",[
          ("This",AThis);
          ("pQueryHeap",InComPtr);
          ("Type",ANone);
          ("Index",ANone);
        ],MANone);
        ("EndQuery",[
          ("This",AThis);
          ("pQueryHeap",InComPtr);
          ("Type",ANone);
          ("Index",ANone);
        ],MANone);
        ("ResolveQueryData",[
          ("This",AThis);
          ("pQueryHeap",InComPtr);
          ("Type",ANone);
          ("StartIndex",ANone);
          ("NumQueries",ANone);
          ("pDestinationBuffer",InComPtr);
          ("AlignedDestinationBufferOffset",ANone);
        ],MANone);
        ("SetPredication",[
          ("This",AThis);
          ("pBuffer",InOptionalComPtr);
          ("AlignedBufferOffset",ANone);
          ("Operation",ANone);
        ],MANone);
        ("SetMarker",[
          ("This",AThis);
          ("Metadata",ANone);
          ("pData",ANone);
          ("Size",ANone);
        ],MADontImplement);
        ("BeginEvent",[
          ("This",AThis);
          ("Metadata",ANone);
          ("pData",ANone);
          ("Size",ANone);
        ],MADontImplement);
        ("EndEvent",[
          ("This",AThis);
        ],MADontImplement);
        ("ExecuteIndirect",[
          ("This",AThis);
          ("pCommandSignature",InComPtr);
          ("MaxCommandCount",ANone);
          ("pArgumentBuffer",InComPtr);
          ("ArgumentBufferOffset",ANone);
          ("pCountBuffer",InComPtr);
          ("CountBufferOffset",ANone);
        ],MANone);
      ]);
      ("ID3D12HeapVtbl",IAAutogen(Set.ofList []), "ID3D12PageableVtbl",  [
        ("GetDesc",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
      ]);
      ("ID3D12ObjectVtbl", IAAutogen(Set.ofList []), "IUnknownVtbl", [
        ("GetPrivateData",[
            ("This",AThis);
            ("guid",ANone);
            ("pDataSize",InOutReturn);
            ("pData",OutOptionalOfSize "pDataSize");
          ],MAUnsafe); // safe method should be: unsafe fn get_private_data<T>(guid: REFGUID, data: Option<&mut T>) -> HResult<usize>
        ("SetPrivateData",[
            ("This",AThis);
            ("guid",ANone);
            ("DataSize",ANone);
            ("pData", InOfSize "DataSize");
          ],MANone);
        ("SetPrivateDataInterface",[
            ("This",AThis);
            ("guid",ANone);
            ("pData",InIUnknown);
          ],MADontImplement); // Not useful without full-blown COM-support
        ("SetName",[
            ("This",AThis);
            ("Name",ANone);
          ],MANone);
        ]
      );
      ("ID3D12PageableVtbl",IAAutogen(Set.ofList []),  "ID3D12DeviceChildVtbl",  []);
      ("ID3D12PipelineStateVtbl",IAAutogen(Set.ofList [IOSend]), "ID3D12PageableVtbl",  [
        ("GetCachedBlob",[
          ("This",AThis);
          ("ppBlob",OutReturnComPtr); // TODO: do something with typedefs like 'typedef ID3D10Blob ID3DBlob;' E.g. type D3DBlob=D3D10Blob;
        ],MADontImplement); // TODO: do todo above, then replace with MANone
      ]);
      ("ID3D12QueryHeapVtbl",IAAutogen(Set.ofList []), "ID3D12PageableVtbl",  []);
      ("ID3D12ResourceVtbl",IAAutogen(Set.ofList [IOSend;IOSync]), "ID3D12PageableVtbl",  [
        ("Map",[
          ("This",AThis);
          ("Subresource",ANone);
          ("pReadRange",InOptional);
          ("ppData",OutOptional);
        ],MAUnsafe); // TODO: Mapping and unmapping call for RAII guards
        ("Unmap",[
          ("This",AThis);
          ("Subresource",ANone);
          ("pWrittenRange",InOptional);
        ],MANone); // TODO: Find some way of dealing with unbounded memory areas in safe rust
        ("GetDesc",[
          ("This",AThis);
          ("__ret_val",OutReturn);
        ],MANone);
        ("GetGPUVirtualAddress",[
          ("This",AThis);
        ],MANone);
        ("WriteToSubresource",[
          ("This",AThis);
          ("DstSubresource",ANone);
          ("pDstBox",InOptional);
          ("pSrcData",ANone);
          ("SrcRowPitch",ANone);
          ("SrcDepthPitch",ANone);
        ],MAUnsafe); // TODO: Unsafe. Method can read past the end of provided buffer
        ("ReadFromSubresource",[
          ("This",AThis);
          ("pDstData",ANone);
          ("DstRowPitch",ANone);
          ("DstDepthPitch",ANone);
          ("SrcSubresource",ANone);
          ("pSrcBox",ANone);
        ],MADontImplement); // TODO: Unsafe. Method doesn't take size of output buffer
        ("GetHeapProperties",[
          ("This",AThis);
          ("pHeapProperties",OutOptional);
          ("pHeapFlags",OutOptional);
        ],MANone);
      ]);
      ("ID3D12RootSignatureDeserializerVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
        ("GetRootSignatureDesc",[
          ("This",AThis);
        ],MANone);
      ]);
      ("ID3D12RootSignatureVtbl",IAAutogen(Set.ofList [IOSend]), "ID3D12DeviceChildVtbl",  []);
  ] 

let d3d12enums=
  [
    ("D3D12_BLEND",EAEnum);
    ("D3D12_BLEND_OP",EAEnum);
    ("D3D12_BUFFER_SRV_FLAGS",EAFlags);
    ("D3D12_BUFFER_UAV_FLAGS",EAFlags);
    ("D3D12_CLEAR_FLAGS",EAFlags);
    ("D3D12_COLOR_WRITE_ENABLE",EAFlags);
    ("D3D12_COMMAND_LIST_TYPE",EAEnum);
    ("D3D12_COMMAND_QUEUE_FLAGS",EAFlags);
    ("D3D12_COMMAND_QUEUE_PRIORITY",EAEnum);
    ("D3D12_COMPARISON_FUNC",EAEnum);
    ("D3D12_CONSERVATIVE_RASTERIZATION_MODE",EAEnum);
    ("D3D12_CONSERVATIVE_RASTERIZATION_TIER",EAEnum);
    ("D3D12_CPU_PAGE_PROPERTY",EAEnum);
    ("D3D12_CROSS_NODE_SHARING_TIER",EAEnum);
    ("D3D12_CULL_MODE",EAEnum);
    ("D3D12_DEBUG_FEATURE",EAEnum);
    ("D3D12_DEPTH_WRITE_MASK",EAEnum);
    ("D3D12_DESCRIPTOR_HEAP_FLAGS",EAFlags);
    ("D3D12_DESCRIPTOR_HEAP_TYPE",EAEnum);
    ("D3D12_DESCRIPTOR_RANGE_TYPE",EAEnum);
    ("D3D12_DSV_DIMENSION",EAEnum);
    ("D3D12_DSV_FLAGS",EAFlags);
    ("D3D12_FEATURE",EAEnum);
    ("D3D12_FENCE_FLAGS",EAFlags);
    ("D3D12_FILL_MODE",EAEnum);
    ("D3D12_FILTER",EAEnum);
    ("D3D12_FILTER_REDUCTION_TYPE",EAEnum);
    ("D3D12_FILTER_TYPE",EAEnum);
    ("D3D12_FORMAT_SUPPORT1",EAFlags);
    ("D3D12_FORMAT_SUPPORT2",EAFlags);
    ("D3D12_HEAP_FLAGS",EAFlags);
    ("D3D12_HEAP_TYPE",EAEnum);
    ("D3D12_INDEX_BUFFER_STRIP_CUT_VALUE",EAEnum);
    ("D3D12_INDIRECT_ARGUMENT_TYPE",EAEnum);
    ("D3D12_INPUT_CLASSIFICATION",EAEnum);
    ("D3D12_LOGIC_OP",EAEnum);
    ("D3D12_MEMORY_POOL",EAEnum);
    ("D3D12_MESSAGE_CATEGORY",EAEnum);
    ("D3D12_MESSAGE_ID",EAEnum);
    ("D3D12_MESSAGE_SEVERITY",EAEnum);
    ("D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS",EAFlags);
    ("D3D12_PIPELINE_STATE_FLAGS",EAFlags);
    ("D3D12_PREDICATION_OP",EAEnum);
    ("D3D12_PRIMITIVE_TOPOLOGY_TYPE",EAEnum);
    ("D3D12_QUERY_HEAP_TYPE",EAEnum);
    ("D3D12_QUERY_TYPE",EAEnum);
    ("D3D12_RESOURCE_BARRIER_FLAGS",EAFlags);
    ("D3D12_RESOURCE_BARRIER_TYPE",EAEnum);
    ("D3D12_RESOURCE_BINDING_TIER",EAEnum);
    ("D3D12_RESOURCE_DIMENSION",EAEnum);
    ("D3D12_RESOURCE_FLAGS",EAFlags);
    ("D3D12_RESOURCE_HEAP_TIER",EAEnum);
    ("D3D12_RESOURCE_STATES",EAFlags);
    ("D3D12_RLDO_FLAGS",EAFlags);
    ("D3D12_ROOT_PARAMETER_TYPE",EAEnum);
    ("D3D12_ROOT_SIGNATURE_FLAGS",EAFlags);
    ("D3D12_RTV_DIMENSION",EAEnum);
    ("D3D12_SHADER_COMPONENT_MAPPING",EAEnum);
    ("D3D12_SHADER_MIN_PRECISION_SUPPORT",EAEnum);
    ("D3D12_SHADER_VISIBILITY",EAEnum);
    ("D3D12_SRV_DIMENSION",EAEnum);
    ("D3D12_STATIC_BORDER_COLOR",EAEnum);
    ("D3D12_STENCIL_OP",EAEnum);
    ("D3D12_TEXTURE_ADDRESS_MODE",EAEnum);
    ("D3D12_TEXTURE_COPY_TYPE",EAEnum);
    ("D3D12_TEXTURE_LAYOUT",EAEnum);
    ("D3D12_TILED_RESOURCES_TIER",EAEnum);
    ("D3D12_TILE_COPY_FLAGS",EAFlags);
    ("D3D12_TILE_MAPPING_FLAGS",EAFlags);
    ("D3D12_TILE_RANGE_FLAGS",EAFlags);
    ("D3D12_UAV_DIMENSION",EAEnum);
    ("D3D_DRIVER_TYPE",EAEnum);
    ("D3D_FEATURE_LEVEL",EAEnum);
    ("D3D_INTERPOLATION_MODE",EAEnum);
    ("D3D_MIN_PRECISION",EAEnum);
    ("D3D_NAME",EAEnum);
    ("D3D_PRIMITIVE",EAEnum);
    ("D3D_PRIMITIVE_TOPOLOGY",EAEnum);
    ("D3D_REGISTER_COMPONENT_TYPE",EAEnum);
    ("D3D_RESOURCE_RETURN_TYPE",EAEnum);
    ("D3D_ROOT_SIGNATURE_VERSION",EAEnum);
    ("D3D_SRV_DIMENSION",EAEnum);
    ("D3D_TESSELLATOR_DOMAIN",EAEnum);
    ("D3D_TESSELLATOR_OUTPUT_PRIMITIVE",EAEnum);
    ("D3D_TESSELLATOR_PARTITIONING",EAEnum);
    ("DXGI_ADAPTER_FLAG",EAFlags);
    ("DXGI_ALPHA_MODE",EAEnum);
    ("DXGI_COLOR_SPACE_TYPE",EAEnum);
    ("DXGI_COMPUTE_PREEMPTION_GRANULARITY",EAEnum);
    ("DXGI_FORMAT",EAEnum);
    ("DXGI_FRAME_PRESENTATION_MODE",EAEnum);
    ("DXGI_GRAPHICS_PREEMPTION_GRANULARITY",EAEnum);
    ("DXGI_MEMORY_SEGMENT_GROUP",EAEnum);
    ("DXGI_MODE_ROTATION",EAEnum);
    ("DXGI_MODE_SCALING",EAEnum);
    ("DXGI_MODE_SCANLINE_ORDER",EAEnum);
    ("DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS",EAFlags);
    ("DXGI_OUTDUPL_POINTER_SHAPE_TYPE",EAEnum);
    ("DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG",EAFlags);
    ("DXGI_OVERLAY_SUPPORT_FLAG",EAFlags);
    ("DXGI_RESIDENCY",EAEnum);
    ("DXGI_SCALING",EAEnum);
    ("DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG",EAFlags);
    ("DXGI_SWAP_CHAIN_FLAG",EAFlags);
    ("DXGI_SWAP_EFFECT",EAEnum);
    ("_D3D_CBUFFER_TYPE",EAEnum);
    ("_D3D_INCLUDE_TYPE",EAEnum);
    ("_D3D_PARAMETER_FLAGS",EAFlags);
    ("_D3D_SHADER_CBUFFER_FLAGS",EAFlags);
    ("_D3D_SHADER_INPUT_FLAGS",EAFlags);
    ("_D3D_SHADER_INPUT_TYPE",EAEnum);
    ("_D3D_SHADER_VARIABLE_CLASS",EAEnum);
    ("_D3D_SHADER_VARIABLE_FLAGS",EAFlags);
    ("_D3D_SHADER_VARIABLE_TYPE",EAEnum);
    ("_DXGI_OFFER_RESOURCE_PRIORITY",EAEnum);
      ] |> Map.ofList

let d3d12structs=
  [
    ("D3D12_BLEND_DESC",StructFlags.DeriveCopy ||| StructFlags.DeriveDefault,[
      ("AlphaToCoverageEnable",FANone);
      ("IndependentBlendEnable",FANone);
      ("RenderTarget",FANone);
      ]);
    ("D3D12_BOX",StructFlags.None,[
      ("left",FANone);
      ("top",FANone);
      ("front",FANone);
      ("right",FANone);
      ("bottom",FANone);
      ("back",FANone);
      ]);
    ("D3D12_BUFFER_RTV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ]);
    ("D3D12_BUFFER_SRV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ("StructureByteStride",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_BUFFER_UAV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ("StructureByteStride",FANone);
      ("CounterOffsetInBytes",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_CACHED_PIPELINE_STATE",StructFlags.None,[
      ("pCachedBlob",FANone);
      ("CachedBlobSizeInBytes",FANone);
      ]);
    ("D3D12_CLEAR_VALUE",StructFlags.None,[
      ("Format",FANone);
      ]);
    ("D3D12_COMMAND_QUEUE_DESC",StructFlags.DeriveDefault,[
      ("Type",FANone);
      ("Priority",FANone);
      ("Flags",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_COMMAND_SIGNATURE_DESC",StructFlags.None,[
      ("ByteStride",FANone);
      ("NumArgumentDescs",FANone);
      ("pArgumentDescs",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_COMPUTE_PIPELINE_STATE_DESC",StructFlags.None,[
      ("pRootSignature",FANone);
      ("CS",FANone);
      ("NodeMask",FANone);
      ("CachedPSO",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_CONSTANT_BUFFER_VIEW_DESC",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ]);
    ("D3D12_CPU_DESCRIPTOR_HANDLE",StructFlags.DeriveCopy,[
      ("ptr",FANone);
      ]);
    ("D3D12_DEPTH_STENCILOP_DESC",StructFlags.DeriveCopy ||| StructFlags.DeriveDefault,[
      ("StencilFailOp",FANone);
      ("StencilDepthFailOp",FANone);
      ("StencilPassOp",FANone);
      ("StencilFunc",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_DESC",StructFlags.None,[
      ("DepthEnable",FANone);
      ("DepthWriteMask",FANone);
      ("DepthFunc",FANone);
      ("StencilEnable",FANone);
      ("StencilReadMask",FANone);
      ("StencilWriteMask",FANone);
      ("FrontFace",FANone);
      ("BackFace",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_VALUE",StructFlags.None,[
      ("Depth",FANone);
      ("Stencil",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_DESCRIPTOR_HEAP_DESC",StructFlags.None,[
      ("Type",FANone);
      ("NumDescriptors",FANone);
      ("Flags",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_DESCRIPTOR_RANGE",StructFlags.None,[
      ("RangeType",FANone);
      ("NumDescriptors",FANone);
      ("BaseShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("OffsetInDescriptorsFromTableStart",FANone);
      ]);
    ("D3D12_DISCARD_REGION",StructFlags.None,[
      ("NumRects",FANone);
      ("pRects",FANone);
      ("FirstSubresource",FANone);
      ("NumSubresources",FANone);
      ]);
    ("D3D12_DISPATCH_ARGUMENTS",StructFlags.None,[
      ("ThreadGroupCountX",FANone);
      ("ThreadGroupCountY",FANone);
      ("ThreadGroupCountZ",FANone);
      ]);
    ("D3D12_DRAW_ARGUMENTS",StructFlags.None,[
      ("VertexCountPerInstance",FANone);
      ("InstanceCount",FANone);
      ("StartVertexLocation",FANone);
      ("StartInstanceLocation",FANone);
      ]);
    ("D3D12_DRAW_INDEXED_ARGUMENTS",StructFlags.None,[
      ("IndexCountPerInstance",FANone);
      ("InstanceCount",FANone);
      ("StartIndexLocation",FANone);
      ("BaseVertexLocation",FANone);
      ("StartInstanceLocation",FANone);
      ]);
    ("D3D12_FEATURE_DATA_ARCHITECTURE",StructFlags.None,[
      ("NodeIndex",FANone);
      ("TileBasedRenderer",FANone);
      ("UMA",FANone);
      ("CacheCoherentUMA",FANone);
      ]);
    ("D3D12_FEATURE_DATA_D3D12_OPTIONS",StructFlags.DeriveDefault,[
      ("DoublePrecisionFloatShaderOps",FANone);
      ("OutputMergerLogicOp",FANone);
      ("MinPrecisionSupport",FANone);
      ("TiledResourcesTier",FANone);
      ("ResourceBindingTier",FANone);
      ("PSSpecifiedStencilRefSupported",FANone);
      ("TypedUAVLoadAdditionalFormats",FANone);
      ("ROVsSupported",FANone);
      ("ConservativeRasterizationTier",FANone);
      ("MaxGPUVirtualAddressBitsPerResource",FANone);
      ("StandardSwizzle64KBSupported",FANone);
      ("CrossNodeSharingTier",FANone);
      ("CrossAdapterRowMajorTextureSupported",FANone);
      ("VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation",FANone);
      ("ResourceHeapTier",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FEATURE_LEVELS",StructFlags.None,[
      ("NumFeatureLevels",FANone);
      ("pFeatureLevelsRequested",FANone);
      ("MaxSupportedFeatureLevel",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FORMAT_INFO",StructFlags.None,[
      ("Format",FANone);
      ("PlaneCount",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FORMAT_SUPPORT",StructFlags.None,[
      ("Format",FANone);
      ("Support1",FANone);
      ("Support2",FANone);
      ]);
    ("D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT",StructFlags.None,[
      ("MaxGPUVirtualAddressBitsPerResource",FANone);
      ("MaxGPUVirtualAddressBitsPerProcess",FANone);
      ]);
    ("D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS",StructFlags.None,[
      ("Format",FANone);
      ("SampleCount",FANone);
      ("Flags",FANone);
      ("NumQualityLevels",FANone);
      ]);
    ("D3D12_GPU_DESCRIPTOR_HANDLE",StructFlags.None,[
      ("ptr",FANone);
      ]);
    ("D3D12_GRAPHICS_PIPELINE_STATE_DESC",StructFlags.None,[
      ("pRootSignature",FANone);
      ("VS",FANone);
      ("PS",FANone);
      ("DS",FANone);
      ("HS",FANone);
      ("GS",FANone);
      ("StreamOutput",FANone);
      ("BlendState",FANone);
      ("SampleMask",FANone);
      ("RasterizerState",FANone);
      ("DepthStencilState",FANone);
      ("InputLayout",FANone);
      ("IBStripCutValue",FANone);
      ("PrimitiveTopologyType",FANone);
      ("NumRenderTargets",FANone);
      ("RTVFormats",FANone);
      ("DSVFormat",FANone);
      ("SampleDesc",FANone);
      ("NodeMask",FANone);
      ("CachedPSO",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_HEAP_DESC",StructFlags.None,[
      ("SizeInBytes",FANone);
      ("Properties",FANone);
      ("Alignment",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_HEAP_PROPERTIES",StructFlags.None,[
      ("Type",FANone);
      ("CPUPageProperty",FANone);
      ("MemoryPoolPreference",FANone);
      ("CreationNodeMask",FANone);
      ("VisibleNodeMask",FANone);
      ]);
    ("D3D12_INDEX_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("Format",FANone);
      ]);
    ("D3D12_INDIRECT_ARGUMENT_DESC",StructFlags.None,[
      ("Type",FANone);
      ]);
    ("D3D12_INFO_QUEUE_FILTER",StructFlags.None,[
      ("AllowList",FANone);
      ("DenyList",FANone);
      ]);
    ("D3D12_INFO_QUEUE_FILTER_DESC",StructFlags.None,[
      ("NumCategories",FANone);
      ("pCategoryList",FANone);
      ("NumSeverities",FANone);
      ("pSeverityList",FANone);
      ("NumIDs",FANone);
      ("pIDList",FANone);
      ]);
    ("D3D12_INPUT_ELEMENT_DESC",StructFlags.None,[
      ("SemanticName",FANone);
      ("SemanticIndex",FANone);
      ("Format",FANone);
      ("InputSlot",FANone);
      ("AlignedByteOffset",FANone);
      ("InputSlotClass",FANone);
      ("InstanceDataStepRate",FANone);
      ]);
    ("D3D12_INPUT_LAYOUT_DESC",StructFlags.None,[
      ("pInputElementDescs",FANone);
      ("NumElements",FANone);
      ]);
    ("D3D12_MEMCPY_DEST",StructFlags.None,[
      ("pData",FANone);
      ("RowPitch",FANone);
      ("SlicePitch",FANone);
      ]);
    ("D3D12_MESSAGE",StructFlags.None,[
      ("Category",FANone);
      ("Severity",FANone);
      ("ID",FANone);
      ("pDescription",FANone);
      ("DescriptionByteLength",FANone);
      ]);
    ("D3D12_PACKED_MIP_INFO",StructFlags.None,[
      ("NumStandardMips",FANone);
      ("NumPackedMips",FANone);
      ("NumTilesForPackedMips",FANone);
      ("StartTileIndexInOverallResource",FANone);
      ]);
    ("D3D12_PLACED_SUBRESOURCE_FOOTPRINT",StructFlags.None,[
      ("Offset",FANone);
      ("Footprint",FANone);
      ]);
    ("D3D12_QUERY_DATA_PIPELINE_STATISTICS",StructFlags.None,[
      ("IAVertices",FANone);
      ("IAPrimitives",FANone);
      ("VSInvocations",FANone);
      ("GSInvocations",FANone);
      ("GSPrimitives",FANone);
      ("CInvocations",FANone);
      ("CPrimitives",FANone);
      ("PSInvocations",FANone);
      ("HSInvocations",FANone);
      ("DSInvocations",FANone);
      ("CSInvocations",FANone);
      ]);
    ("D3D12_QUERY_DATA_SO_STATISTICS",StructFlags.None,[
      ("NumPrimitivesWritten",FANone);
      ("PrimitivesStorageNeeded",FANone);
      ]);
    ("D3D12_QUERY_HEAP_DESC",StructFlags.None,[
      ("Type",FANone);
      ("Count",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_RANGE",StructFlags.None,[
      ("Begin",FANone);
      ("End",FANone);
      ]);
    ("D3D12_RASTERIZER_DESC",StructFlags.None,[
      ("FillMode",FANone);
      ("CullMode",FANone);
      ("FrontCounterClockwise",FANone);
      ("DepthBias",FANone);
      ("DepthBiasClamp",FANone);
      ("SlopeScaledDepthBias",FANone);
      ("DepthClipEnable",FANone);
      ("MultisampleEnable",FANone);
      ("AntialiasedLineEnable",FANone);
      ("ForcedSampleCount",FANone);
      ("ConservativeRaster",FANone);
      ]);
    ("D3D12_RENDER_TARGET_BLEND_DESC",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy ,[
      ("BlendEnable",FANone);
      ("LogicOpEnable",FANone);
      ("SrcBlend",FANone);
      ("DestBlend",FANone);
      ("BlendOp",FANone);
      ("SrcBlendAlpha",FANone);
      ("DestBlendAlpha",FANone);
      ("BlendOpAlpha",FANone);
      ("LogicOp",FANone);
      ("RenderTargetWriteMask",FANone);
      ]);
    ("D3D12_RENDER_TARGET_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ]);
    ("D3D12_RESOURCE_ALIASING_BARRIER",StructFlags.None,[
      ("pResourceBefore",FANone);
      ("pResourceAfter",FANone);
      ]);
    ("D3D12_RESOURCE_ALLOCATION_INFO",StructFlags.None,[
      ("SizeInBytes",FANone);
      ("Alignment",FANone);
      ]);
    ("D3D12_RESOURCE_BARRIER",StructFlags.None,[
      ("Type",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_RESOURCE_DESC",StructFlags.None,[
      ("Dimension",FANone);
      ("Alignment",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("DepthOrArraySize",FANone);
      ("MipLevels",FANone);
      ("Format",FANone);
      ("SampleDesc",FANone);
      ("Layout",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_RESOURCE_TRANSITION_BARRIER",StructFlags.None,[
      ("pResource",FANone);
      ("Subresource",FANone);
      ("StateBefore",FANone);
      ("StateAfter",FANone);
      ]);
    ("D3D12_RESOURCE_UAV_BARRIER",StructFlags.None,[
      ("pResource",FANone);
      ]);
    ("D3D12_ROOT_CONSTANTS",StructFlags.None,[
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("Num32BitValues",FANone);
      ]);
    ("D3D12_ROOT_DESCRIPTOR",StructFlags.None,[
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ]);
    ("D3D12_ROOT_DESCRIPTOR_TABLE",StructFlags.None,[
      ("NumDescriptorRanges",FANone);
      ("pDescriptorRanges",FANone);
      ]);
    ("D3D12_ROOT_PARAMETER",StructFlags.None,[
      ("ParameterType",FANone);
      ("ShaderVisibility",FANone);
      ]);
    ("D3D12_ROOT_SIGNATURE_DESC",StructFlags.None,[
      ("NumParameters",FANone);
      ("pParameters",FANone);
      ("NumStaticSamplers",FANone);
      ("pStaticSamplers",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_SAMPLER_DESC",StructFlags.None,[
      ("Filter",FANone);
      ("AddressU",FANone);
      ("AddressV",FANone);
      ("AddressW",FANone);
      ("MipLODBias",FANone);
      ("MaxAnisotropy",FANone);
      ("ComparisonFunc",FANone);
      ("BorderColor",FANone);
      ("MinLOD",FANone);
      ("MaxLOD",FANone);
      ]);
    ("D3D12_SHADER_BYTECODE",StructFlags.None,[
      ("pShaderBytecode",FANone);
      ("BytecodeLength",FANone);
      ]);
    ("D3D12_SHADER_RESOURCE_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ("Shader4ComponentMapping",FANone);
      ]);
    ("D3D12_SO_DECLARATION_ENTRY",StructFlags.None,[
      ("Stream",FANone);
      ("SemanticName",FANone);
      ("SemanticIndex",FANone);
      ("StartComponent",FANone);
      ("ComponentCount",FANone);
      ("OutputSlot",FANone);
      ]);
    ("D3D12_STATIC_SAMPLER_DESC",StructFlags.None,[
      ("Filter",FANone);
      ("AddressU",FANone);
      ("AddressV",FANone);
      ("AddressW",FANone);
      ("MipLODBias",FANone);
      ("MaxAnisotropy",FANone);
      ("ComparisonFunc",FANone);
      ("BorderColor",FANone);
      ("MinLOD",FANone);
      ("MaxLOD",FANone);
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("ShaderVisibility",FANone);
      ]);
    ("D3D12_STREAM_OUTPUT_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("BufferFilledSizeLocation",FANone);
      ]);
    ("D3D12_STREAM_OUTPUT_DESC",StructFlags.None,[
      ("pSODeclaration",FANone);
      ("NumEntries",FANone);
      ("pBufferStrides",FANone);
      ("NumStrides",FANone);
      ("RasterizedStream",FANone);
      ]);
    ("D3D12_SUBRESOURCE_DATA",StructFlags.None,[
      ("pData",FANone);
      ("RowPitch",FANone);
      ("SlicePitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_FOOTPRINT",StructFlags.None,[
      ("Format",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("Depth",FANone);
      ("RowPitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_INFO",StructFlags.None,[
      ("Offset",FANone);
      ("RowPitch",FANone);
      ("DepthPitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_TILING",StructFlags.None,[
      ("WidthInTiles",FANone);
      ("HeightInTiles",FANone);
      ("DepthInTiles",FANone);
      ("StartTileIndexInOverallResource",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX1D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX1D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX1D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_DSV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_RTV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_SRV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_DSV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2DMS_RTV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2DMS_SRV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX2D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("PlaneSlice",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX2D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX3D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstWSlice",FANone);
      ("WSize",FANone);
      ]);
    ("D3D12_TEX3D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX3D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstWSlice",FANone);
      ("WSize",FANone);
      ]);
    ("D3D12_TEXCUBE_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("First2DArrayFace",FANone);
      ("NumCubes",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEXCUBE_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEXTURE_COPY_LOCATION",StructFlags.None,[
      ("pResource",FANone);
      ("Type",FANone);
      ]);
    ("D3D12_TILED_RESOURCE_COORDINATE",StructFlags.None,[
      ("X",FANone);
      ("Y",FANone);
      ("Z",FANone);
      ("Subresource",FANone);
      ]);
    ("D3D12_TILE_REGION_SIZE",StructFlags.None,[
      ("NumTiles",FANone);
      ("UseBox",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("Depth",FANone);
      ]);
    ("D3D12_TILE_SHAPE",StructFlags.None,[
      ("WidthInTexels",FANone);
      ("HeightInTexels",FANone);
      ("DepthInTexels",FANone);
      ]);
    ("D3D12_UNORDERED_ACCESS_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ]);
    ("D3D12_VERTEX_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("StrideInBytes",FANone);
      ]);
    ("D3D12_VIEWPORT",StructFlags.None,[
      ("TopLeftX",FANone);
      ("TopLeftY",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("MinDepth",FANone);
      ("MaxDepth",FANone);
      ]);
    ("D3DCOLORVALUE",StructFlags.None,[
      ("r",FANone);
      ("g",FANone);
      ("b",FANone);
      ("a",FANone);
      ]);
    ("D3D_SHADER_MACRO",StructFlags.None,[
      ("Name",FANone);
      ("Definition",FANone);
      ]);
    ("DXGI_ADAPTER_DESC",StructFlags.None,[
      ("Description",FANone);
      ("VendorId",FANone);
      ("DeviceId",FANone);
      ("SubSysId",FANone);
      ("Revision",FANone);
      ("DedicatedVideoMemory",FANone);
      ("DedicatedSystemMemory",FANone);
      ("SharedSystemMemory",FANone);
      ("AdapterLuid",FANone);
      ]);
    ("DXGI_ADAPTER_DESC1",StructFlags.None,[
      ("Description",FANone);
      ("VendorId",FANone);
      ("DeviceId",FANone);
      ("SubSysId",FANone);
      ("Revision",FANone);
      ("DedicatedVideoMemory",FANone);
      ("DedicatedSystemMemory",FANone);
      ("SharedSystemMemory",FANone);
      ("AdapterLuid",FANone);
      ("Flags",FANone);
      ]);
    ("DXGI_DISPLAY_COLOR_SPACE",StructFlags.None,[
      ("PrimaryCoordinates",FANone);
      ("WhitePoints",FANone);
      ]);
    ("DXGI_FRAME_STATISTICS",StructFlags.None,[
      ("PresentCount",FANone);
      ("PresentRefreshCount",FANone);
      ("SyncRefreshCount",FANone);
      ("SyncQPCTime",FANone);
      ("SyncGPUTime",FANone);
      ]);
    ("DXGI_GAMMA_CONTROL",StructFlags.None,[
      ("Scale",FANone);
      ("Offset",FANone);
      ("GammaCurve",FANone);
      ]);
    ("DXGI_GAMMA_CONTROL_CAPABILITIES",StructFlags.None,[
      ("ScaleAndOffsetSupported",FANone);
      ("MaxConvertedValue",FANone);
      ("MinConvertedValue",FANone);
      ("NumGammaControlPoints",FANone);
      ("ControlPointPositions",FANone);
      ]);
    ("DXGI_JPEG_AC_HUFFMAN_TABLE",StructFlags.None,[
      ("CodeCounts",FANone);
      ("CodeValues",FANone);
      ]);
    ("DXGI_JPEG_DC_HUFFMAN_TABLE",StructFlags.None,[
      ("CodeCounts",FANone);
      ("CodeValues",FANone);
      ]);
    ("DXGI_JPEG_QUANTIZATION_TABLE",StructFlags.None,[
      ("Elements",FANone);
      ]);
    ("DXGI_MAPPED_RECT",StructFlags.None,[
      ("Pitch",FANone);
      ("pBits",FANone);
      ]);
    ("DXGI_MODE_DESC",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy,[
      ("Width",FANone);
      ("Height",FANone);
      ("RefreshRate",FANone);
      ("Format",FANone);
      ("ScanlineOrdering",FANone);
      ("Scaling",FANone);
      ]);
    ("DXGI_OUTPUT_DESC",StructFlags.None,[
      ("DeviceName",FANone);
      ("DesktopCoordinates",FANone);
      ("AttachedToDesktop",FANone);
      ("Rotation",FANone);
      ("Monitor",FANone);
      ]);
    ("DXGI_RATIONAL",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy,[
      ("Numerator",FANone);
      ("Denominator",FANone);
      ]);
    ("DXGI_RGB",StructFlags.None,[
      ("Red",FANone);
      ("Green",FANone);
      ("Blue",FANone);
      ]);
    ("DXGI_SAMPLE_DESC",StructFlags.None,[
      ("Count",FANone);
      ("Quality",FANone);
      ]);
    ("DXGI_SHARED_RESOURCE",StructFlags.None,[
      ("Handle",FANone);
      ]);
    ("DXGI_SURFACE_DESC",StructFlags.None,[
      ("Width",FANone);
      ("Height",FANone);
      ("Format",FANone);
      ("SampleDesc",FANone);
      ]);
    ("DXGI_SWAP_CHAIN_DESC",StructFlags.None,[
      ("BufferDesc",FANone);
      ("SampleDesc",FANone);
      ("BufferUsage",FANone);
      ("BufferCount",FANone);
      ("OutputWindow",FANone);
      ("Windowed",FANone);
      ("SwapEffect",FANone);
      ("Flags",FANone);
      ]);
    ("GUID",StructFlags.None,[
      ("Data1",FANone);
      ("Data2",FANone);
      ("Data3",FANone);
      ("Data4",FANone);
      ]);  
    ] |> Seq.map (fun (a,b,c) -> (a,(b,c))) |> Map.ofSeq

let dwrite = [
  ("IDWriteBitmapRenderTargetVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("DrawGlyphRun",[
      ("This",AThis);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("measuringMode",ANone);
      ("glyphRun",ANone);
      ("renderingParams",InComPtr);
      ("textColor",ANone);
      ("blackBoxRect",OutOptional);
    ],MANone);
    ("GetMemoryDC",[
      ("This",AThis);
    ],MANone);
    ("GetPixelsPerDip",[
      ("This",AThis);
    ],MANone);
    ("SetPixelsPerDip",[
      ("This",AThis);
      ("pixelsPerDip",ANone);
    ],MANone);
    ("GetCurrentTransform",[
      ("This",AThis);
      ("transform",OutReturn);
    ],MANone);
    ("SetCurrentTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
    ("GetSize",[
      ("This",AThis);
      ("size",OutReturn);
    ],MANone);
    ("Resize",[
      ("This",AThis);
      ("width",ANone);
      ("height",ANone);
    ],MANone);
  ]);
  ("IDWriteFactoryVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetSystemFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
      ("checkForUpdates",ANone);
    ],MANone);
    ("CreateCustomFontCollection",[
      ("This",AThis);
      ("collectionLoader",InComPtr);
      ("collectionKey",InOfSize "collectionKeySize");
      ("collectionKeySize",ANone);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("RegisterFontCollectionLoader",[
      ("This",AThis);
      ("fontCollectionLoader",InComPtr);
    ],MANone);
    ("UnregisterFontCollectionLoader",[
      ("This",AThis);
      ("fontCollectionLoader",InComPtr);
    ],MANone);
    ("CreateFontFileReference",[
      ("This",AThis);
      ("filePath",ANone);
      ("lastWriteTime",InOptional);
      ("fontFile",OutReturnComPtr);
    ],MANone);
    ("CreateCustomFontFileReference",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("fontFileLoader",InComPtr);
      ("fontFile",OutReturnComPtr);
    ],MANone);
    ("CreateFontFace",[
      ("This",AThis);
      ("fontFaceType",ANone);
      ("numberOfFiles",ANone);
      ("fontFiles",InComPtrArrayOfSize "numberOfFiles"); // TODO: check if it is array
      ("faceIndex",ANone);
      ("fontFaceSimulationFlags",ANone);
      ("fontFace",OutReturnComPtr);
    ],MANone);
    ("CreateRenderingParams",[
      ("This",AThis);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("CreateMonitorRenderingParams",[
      ("This",AThis);
      ("monitor",ANone);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("CreateCustomRenderingParams",[
      ("This",AThis);
      ("gamma",ANone);
      ("enhancedContrast",ANone);
      ("clearTypeLevel",ANone);
      ("pixelGeometry",ANone);
      ("renderingMode",ANone);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("RegisterFontFileLoader",[
      ("This",AThis);
      ("fontFileLoader",InComPtr);
    ],MANone);
    ("UnregisterFontFileLoader",[
      ("This",AThis);
      ("fontFileLoader",InComPtr);
    ],MANone);
    ("CreateTextFormat",[
      ("This",AThis);
      ("fontFamilyName",ANone);
      ("fontCollection",InComPtr);
      ("fontWeight",ANone);
      ("fontStyle",ANone);
      ("fontStretch",ANone);
      ("fontSize",ANone);
      ("localeName",ANone);
      ("textFormat",OutReturnComPtr);
    ],MANone);
    ("CreateTypography",[
      ("This",AThis);
      ("typography",OutReturnComPtr);
    ],MANone);
    ("GetGdiInterop",[
      ("This",AThis);
      ("gdiInterop",OutReturnComPtr);
    ],MANone);
    ("CreateTextLayout",[
      ("This",AThis);
      ("string",InArrayOfSize "stringLength"); // TODO: String conversion?
      ("stringLength",ANone);
      ("textFormat",InComPtr);
      ("maxWidth",ANone);
      ("maxHeight",ANone);
      ("textLayout",OutReturnComPtr);
    ],MANone);
    ("CreateGdiCompatibleTextLayout",[
      ("This",AThis);
      ("string",InArrayOfSize "stringLength");
      ("stringLength",ANone);
      ("textFormat",InComPtr);
      ("layoutWidth",ANone);
      ("layoutHeight",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("useGdiNatural",ANone);
      ("textLayout",OutReturnComPtr);
    ],MANone);
    ("CreateEllipsisTrimmingSign",[
      ("This",AThis);
      ("textFormat",InComPtr);
      ("trimmingSign",OutReturnComPtr);
    ],MANone);
    ("CreateTextAnalyzer",[
      ("This",AThis);
      ("textAnalyzer",OutReturnComPtr);
    ],MANone);
    ("CreateNumberSubstitution",[
      ("This",AThis);
      ("substitutionMethod",ANone);
      ("localeName",ANone);
      ("ignoreUserOverride",ANone);
      ("numberSubstitution",OutReturnComPtr);
    ],MANone);
    ("CreateGlyphRunAnalysis",[
      ("This",AThis);
      ("glyphRun",ANone);
      ("pixelsPerDip",ANone);
      ("transform",ANone);
      ("renderingMode",ANone);
      ("measuringMode",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("glyphRunAnalysis",OutReturnComPtr);
    ],MANone);
  ]);
  // This is callback interface.
  // TODO: Do something to simplify implementation.
  ("IDWriteFontCollectionLoaderVtbl",IAManual, "IUnknownVtbl", [
    ("CreateEnumeratorFromKey",[
      ("This",AThis);
      ("factory",InComPtr);
      ("collectionKey",InOfSize "collectionKeySize");
      ("collectionKeySize",ANone);
      ("fontFileEnumerator",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontCollectionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontFamilyCount",[
      ("This",AThis);
    ],MANone);
    ("GetFontFamily",[
      ("This",AThis);
      ("index",ANone);
      ("fontFamily",OutReturnComPtr);
    ],MANone);
    ("FindFamilyName",[
      ("This",AThis);
      ("familyName",ANone);
      ("index",OutReturn);
      ("exists",OutReturn); // Return values are tupled
    ],MANone);
    ("GetFontFromFontFace",[
      ("This",AThis);
      ("fontFace",InComPtr);
      ("font",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontFaceVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetType",[
      ("This",AThis);
    ],MANone);
    ("GetFiles",[
      ("This",AThis);
      ("numberOfFiles",InOutReturn);
      ("fontFiles",OutArrayOfSize "numberOfFiles"); // Incorrect. TODO: do something about functions that require two calls. First to get size of output array, second to get values.
    ],MADontImplement);
    ("GetIndex",[
      ("This",AThis);
    ],MANone);
    ("GetSimulations",[
      ("This",AThis);
    ],MANone);
    ("IsSymbolFont",[
      ("This",AThis);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("fontFaceMetrics",OutReturn);
    ],MANone);
    ("GetGlyphCount",[
      ("This",AThis);
    ],MANone);
    ("GetDesignGlyphMetrics",[
      ("This",AThis);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("glyphMetrics",OutReturn);
      ("isSideways",ANone);
    ],MANone);
    ("GetGlyphIndices",[
      ("This",AThis);
      ("codePoints",InArrayOfSize "codePointCount");
      ("codePointCount",ANone);
      ("glyphIndices",OutArrayOfSize "codePointCount");
    ],MANone);
    ("TryGetFontTable",[
      ("This",AThis);
      ("openTypeTableTag",ANone);
      ("tableData",OutPointer); 
      ("tableSize",ANone);
      ("tableContext",OutPointer); // TODO: add OutHandle, to represent pointer to opaque structure. In this case this handle also needs RAII guard
      ("exists",ANone);
    ],MADontImplement);
    ("ReleaseFontTable",[
      ("This",AThis);
      ("tableContext",ANone); // The handle, returned by previous method, should be freed by calling this method.
    ],MADontImplement);
    ("GetGlyphRunOutline",[
      ("This",AThis);
      ("emSize",ANone);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphAdvances",InOptionalArrayOfSize "glyphCount");
      ("glyphOffsets",InOptionalArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("geometrySink",InComPtr);
    ],MANone);
    ("GetRecommendedRenderingMode",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("measuringMode",ANone);
      ("renderingParams",InComPtr);
      ("renderingMode",OutReturn);
    ],MANone);
    ("GetGdiCompatibleMetrics",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("fontFaceMetrics",OutReturn);
    ],MANone);
    ("GetGdiCompatibleGlyphMetrics",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("useGdiNatural",ANone);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("glyphMetrics",OutArrayOfSize "glyphCount");
      ("isSideways",ANone);
    ],MANone);
  ]);
  ("IDWriteFontFamilyVtbl",IAAutogen(Set.ofList []), "IDWriteFontListVtbl", [
    ("GetFamilyNames",[
      ("This",AThis);
      ("names",OutReturnComPtr);
    ],MANone);
    ("GetFirstMatchingFont",[
      ("This",AThis);
      ("weight",ANone);
      ("stretch",ANone);
      ("style",ANone);
      ("matchingFont",OutReturnComPtr);
    ],MANone);
    ("GetMatchingFonts",[
      ("This",AThis);
      ("weight",ANone);
      ("stretch",ANone);
      ("style",ANone);
      ("matchingFonts",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontFileEnumeratorVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("MoveNext",[
      ("This",AThis);
      ("hasCurrentFile",OutReturn);
    ],MANone);
    ("GetCurrentFontFile",[
      ("This",AThis);
      ("fontFile",OutReturnComPtr);
    ],MANone);
  ]);
  // Another callback interface
  ("IDWriteFontFileLoaderVtbl",IAManual, "IUnknownVtbl", [
    ("CreateStreamFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",ANone);
      ("fontFileReferenceKeySize",ANone);
      ("fontFileStream",ANone);
    ],MANone);
  ]);
  // Another void** ridden interface. TODO: wrap it somehow
  ("IDWriteFontFileStreamVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("ReadFileFragment",[
      ("This",AThis);
      ("fragmentStart",ANone);
      ("fileOffset",ANone);
      ("fragmentSize",ANone);
      ("fragmentContext",ANone);
    ],MADontImplement);
    ("ReleaseFileFragment",[
      ("This",AThis);
      ("fragmentContext",ANone);
    ],MADontImplement);
    ("GetFileSize",[
      ("This",AThis);
      ("fileSize",ANone);
    ],MADontImplement);
    ("GetLastWriteTime",[
      ("This",AThis);
      ("lastWriteTime",ANone);
    ],MADontImplement);
  ]);
  // TODO: implement wrapper
  ("IDWriteFontFileVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetReferenceKey",[
      ("This",AThis);
      ("fontFileReferenceKey",ANone);
      ("fontFileReferenceKeySize",ANone);
    ],MADontImplement);
    ("GetLoader",[
      ("This",AThis);
      ("fontFileLoader",ANone);
    ],MADontImplement);
    ("Analyze",[
      ("This",AThis);
      ("isSupportedFontType",ANone);
      ("fontFileType",ANone);
      ("fontFaceType",ANone);
      ("numberOfFaces",ANone);
    ],MADontImplement);
  ]);
  ("IDWriteFontListVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("GetFontCount",[
      ("This",AThis);
    ],MANone);
    ("GetFont",[
      ("This",AThis);
      ("index",ANone);
      ("font",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontFamily",[
      ("This",AThis);
      ("fontFamily",OutReturnComPtr);
    ],MANone);
    ("GetWeight",[
      ("This",AThis);
    ],MANone);
    ("GetStretch",[
      ("This",AThis);
    ],MANone);
    ("GetStyle",[
      ("This",AThis);
    ],MANone);
    ("IsSymbolFont",[
      ("This",AThis);
    ],MANone);
    ("GetFaceNames",[
      ("This",AThis);
      ("names",OutReturnComPtr);
    ],MANone);
    ("GetInformationalStrings",[
      ("This",AThis);
      ("informationalStringID",ANone);
      ("informationalStrings",OutReturnComPtr); //TODO: add OutReturnComPtrOption "exists"
      ("exists",OutReturn); 
    ],MANone);
    ("GetSimulations",[
      ("This",AThis);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("fontMetrics",OutReturn);
    ],MANone);
    ("HasCharacter",[
      ("This",AThis);
      ("unicodeValue",ANone);
      ("exists",OutReturn);
    ],MANone);
    ("CreateFontFace",[
      ("This",AThis);
      ("fontFace",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteGdiInteropVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("CreateFontFromLOGFONT",[
      ("This",AThis);
      ("logFont",ANone);
      ("font",OutReturnComPtr);
    ],MANone);
    ("ConvertFontToLOGFONT",[
      ("This",AThis);
      ("font",InComPtr);
      ("logFont",OutReturn);
      ("isSystemFont",OutReturn);
    ],MANone);
    ("ConvertFontFaceToLOGFONT",[
      ("This",AThis);
      ("font",InComPtr);
      ("logFont",OutReturn);
    ],MANone);
    ("CreateFontFaceFromHdc",[
      ("This",AThis);
      ("hdc",ANone);
      ("fontFace",OutReturnComPtr);
    ],MANone);
    ("CreateBitmapRenderTarget",[
      ("This",AThis);
      ("hdc",InOptional);
      ("width",ANone);
      ("height",ANone);
      ("renderTarget",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteGlyphRunAnalysisVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetAlphaTextureBounds",[
      ("This",AThis);
      ("textureType",ANone);
      ("textureBounds",OutReturn);
    ],MANone);
    ("CreateAlphaTexture",[
      ("This",AThis);
      ("textureType",ANone);
      ("textureBounds",ANone);
      ("alphaValues",OutArrayOfSize "bufferSize");
      ("bufferSize",ANone);
    ],MANone);
    ("GetAlphaBlendParams",[
      ("This",AThis);
      ("renderingParams",InComPtr);
      ("blendGamma",OutReturn);
      ("blendEnhancedContrast",OutReturn);
      ("blendClearTypeLevel",OutReturn);
    ],MANone);
  ]);
  ("IDWriteInlineObjectVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("Draw",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("renderer",InComPtr);
      ("originX",ANone);
      ("originY",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("metrics",OutReturn);
    ],MANone);
    ("GetOverhangMetrics",[
      ("This",AThis);
      ("overhangs",OutReturn);
    ],MANone);
    ("GetBreakConditions",[
      ("This",AThis);
      ("breakConditionBefore",OutReturn);
      ("breakConditionAfter",OutReturn);
    ],MANone);
  ]);
  ("IDWriteLocalFontFileLoaderVtbl",IAAutogen(Set.ofList []), "IDWriteFontFileLoaderVtbl", [
    ("GetFilePathLengthFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("filePathLength",OutReturn);
    ],MANone);
    ("GetFilePathFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("filePath",OutArrayOfSize "filePathSize");
      ("filePathSize",ANone);
    ],MANone);
    ("GetLastWriteTimeFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("lastWriteTime",OutReturn);
    ],MANone);
  ]);
  ("IDWriteLocalizedStringsVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetCount",[
      ("This",AThis);
    ],MANone);
    ("FindLocaleName",[
      ("This",AThis);
      ("localeName",ANone); // TODO: add annotation for WCHAR zero terminated string
      ("index",OutReturn);
      ("exists",OutReturn);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
      ("index",ANone);
      ("length",OutReturn);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("index",ANone);
      ("localeName",OutArrayOfSize "size");
      ("size",ANone);
    ],MANone);
    ("GetStringLength",[
      ("This",AThis);
      ("index",ANone);
      ("length",OutReturn);
    ],MANone);
    ("GetString",[
      ("This",AThis);
      ("index",ANone);
      ("stringBuffer",OutArrayOfSize "size");
      ("size",ANone);
    ],MANone);
  ]);
  ("IDWriteNumberSubstitutionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
  ]);
  ("IDWritePixelSnappingVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("IsPixelSnappingDisabled",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("isDisabled",OutReturn);
    ],MAUnsafe);
    ("GetCurrentTransform",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("transform",OutReturn);
    ],MAUnsafe);
    ("GetPixelsPerDip",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("pixelsPerDip",OutReturn);
    ],MAUnsafe);
  ]);
  ("IDWriteRenderingParamsVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetGamma",[
      ("This",AThis);
    ],MANone);
    ("GetEnhancedContrast",[
      ("This",AThis);
    ],MANone);
    ("GetClearTypeLevel",[
      ("This",AThis);
    ],MANone);
    ("GetPixelGeometry",[
      ("This",AThis);
    ],MANone);
    ("GetRenderingMode",[
      ("This",AThis);
    ],MANone);
  ]);
  ("IDWriteTextAnalysisSinkVtbl",IAManual, "IUnknownVtbl", [
    ("SetScriptAnalysis",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("scriptAnalysis",ANone);
    ],MANone);
    ("SetLineBreakpoints",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("lineBreakpoints",ANone);
    ],MANone);
    ("SetBidiLevel",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("explicitLevel",ANone);
      ("resolvedLevel",ANone);
    ],MANone);
    ("SetNumberSubstitution",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("numberSubstitution",ANone);
    ],MANone);
  ]);
  ("IDWriteTextAnalysisSourceVtbl",IAManual, "IUnknownVtbl", [
    ("GetTextAtPosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textString",ANone);
      ("textLength",ANone);
    ],MANone);
    ("GetTextBeforePosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textString",ANone);
      ("textLength",ANone);
    ],MANone);
    ("GetParagraphReadingDirection",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("localeName",ANone);
    ],MANone);
    ("GetNumberSubstitution",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("numberSubstitution",ANone);
    ],MANone);
  ]);
  ("IDWriteTextAnalyzerVtbl",IAAutogen(Set.empty), "IUnknownVtbl", [
    ("AnalyzeScript",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeBidi",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeNumberSubstitution",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeLineBreakpoints",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("GetGlyphs",[
      ("This",AThis);
      ("textString",ANone);
      ("textLength",ANone);
      ("fontFace",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("numberSubstitution",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("maxGlyphCount",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("actualGlyphCount",ANone);
    ],MANone);
    ("GetGlyphPlacements",[
      ("This",AThis);
      ("textString",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("textLength",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("glyphCount",ANone);
      ("fontFace",ANone);
      ("fontEmSize",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("glyphAdvances",ANone);
      ("glyphOffsets",ANone);
    ],MANone);
    ("GetGdiCompatibleGlyphPlacements",[
      ("This",AThis);
      ("textString",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("textLength",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("glyphCount",ANone);
      ("fontFace",ANone);
      ("fontEmSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",ANone);
      ("useGdiNatural",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("glyphAdvances",ANone);
      ("glyphOffsets",ANone);
    ],MANone);
  ]);
  ("IDWriteTextFormatVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("SetTextAlignment",[
      ("This",AThis);
      ("textAlignment",ANone);
    ],MANone);
    ("SetParagraphAlignment",[
      ("This",AThis);
      ("paragraphAlignment",ANone);
    ],MANone);
    ("SetWordWrapping",[
      ("This",AThis);
      ("wordWrapping",ANone);
    ],MANone);
    ("SetReadingDirection",[
      ("This",AThis);
      ("readingDirection",ANone);
    ],MANone);
    ("SetFlowDirection",[
      ("This",AThis);
      ("flowDirection",ANone);
    ],MANone);
    ("SetIncrementalTabStop",[
      ("This",AThis);
      ("incrementalTabStop",ANone);
    ],MANone);
    ("SetTrimming",[
      ("This",AThis);
      ("trimmingOptions",ANone);
      ("trimmingSign",InComPtr);
    ],MANone);
    ("SetLineSpacing",[
      ("This",AThis);
      ("lineSpacingMethod",ANone);
      ("lineSpacing",ANone);
      ("baseline",ANone);
    ],MANone);
    ("GetTextAlignment",[
      ("This",AThis);
    ],MANone);
    ("GetParagraphAlignment",[
      ("This",AThis);
    ],MANone);
    ("GetWordWrapping",[
      ("This",AThis);
    ],MANone);
    ("GetReadingDirection",[
      ("This",AThis);
    ],MANone);
    ("GetFlowDirection",[
      ("This",AThis);
    ],MANone);
    ("GetIncrementalTabStop",[
      ("This",AThis);
    ],MANone);
    ("GetTrimming",[
      ("This",AThis);
      ("trimmingOptions",ANone);
      ("trimmingSign",OutReturnComPtr);
    ],MANone);
    ("GetLineSpacing",[
      ("This",AThis);
      ("lineSpacingMethod",OutReturn);
      ("lineSpacing",OutReturn);
      ("baseline",OutReturn);
    ],MANone);
    ("GetFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("GetFontFamilyNameLength",[
      ("This",AThis);
    ],MANone);
    ("GetFontFamilyName",[
      ("This",AThis);
      ("fontFamilyName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
    ],MANone);
    ("GetFontWeight",[
      ("This",AThis);
    ],MANone);
    ("GetFontStyle",[
      ("This",AThis);
    ],MANone);
    ("GetFontStretch",[
      ("This",AThis);
    ],MANone);
    ("GetFontSize",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("localeName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
    ],MANone);
  ]);
  ("IDWriteTextLayoutVtbl",IAAutogen(Set.ofList []), "IDWriteTextFormatVtbl", [
    ("SetMaxWidth",[
      ("This",AThis);
      ("maxWidth",ANone);
    ],MANone);
    ("SetMaxHeight",[
      ("This",AThis);
      ("maxHeight",ANone);
    ],MANone);
    ("SetFontCollection",[
      ("This",AThis);
      ("fontCollection",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetFontFamilyName",[
      ("This",AThis);
      ("fontFamilyName",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontWeight",[
      ("This",AThis);
      ("fontWeight",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontStyle",[
      ("This",AThis);
      ("fontStyle",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontStretch",[
      ("This",AThis);
      ("fontStretch",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontSize",[
      ("This",AThis);
      ("fontSize",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetUnderline",[
      ("This",AThis);
      ("hasUnderline",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetStrikethrough",[
      ("This",AThis);
      ("hasStrikethrough",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetDrawingEffect",[
      ("This",AThis);
      ("drawingEffect",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetInlineObject",[
      ("This",AThis);
      ("inlineObject",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetTypography",[
      ("This",AThis);
      ("typography",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetLocaleName",[
      ("This",AThis);
      ("localeName",ANone);
      ("textRange",ANone);
    ],MANone);
    ("GetMaxWidth",[
      ("This",AThis);
    ],MANone);
    ("GetMaxHeight",[
      ("This",AThis);
    ],MANone);
    ("GetFontCollection",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontCollection",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MAMangle "GetFontCollectionTl");
    ("GetFontFamilyNameLength",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("nameLength",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontFamilyNameLengthTl");
    ("GetFontFamilyName",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontFamilyName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
      ("textRange",OutReturn);
    ],MAMangle "GetFontFamilyNameTl");
    ("GetFontWeight",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontWeight",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontWeightTl");
    ("GetFontStyle",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontStyle",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontStyleTl");
    ("GetFontStretch",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontStretch",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontStretchTl");
    ("GetFontSize",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontSize",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontSizeTl");
    ("GetUnderline",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("hasUnderline",ANone);
      ("textRange",ANone);
    ],MANone);
    ("GetStrikethrough",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("hasStrikethrough",OutReturn);
      ("textRange",OutReturn);
    ],MANone);
    ("GetDrawingEffect",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("drawingEffect",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetInlineObject",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("inlineObject",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetTypography",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("typography",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("nameLength",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetLocaleNameLengthTl");
    ("GetLocaleName",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("localeName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
      ("textRange",OutReturn);
    ],MAMangle "GetLocaleNameTl");
    ("Draw",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("renderer",InComPtr);
      ("originX",ANone);
      ("originY",ANone);
    ],MAUnsafe);
    ("GetLineMetrics",[
      ("This",AThis);
      ("lineMetrics",OutOptionalArrayOfSize "maxLineCount");
      ("maxLineCount",ANone);
      ("actualLineCount",OutReturn);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("textMetrics",OutReturn);
    ],MANone);
    ("GetOverhangMetrics",[
      ("This",AThis);
      ("overhangs",OutReturn);
    ],MANone);
    ("GetClusterMetrics",[
      ("This",AThis);
      ("clusterMetrics",OutOptionalArrayOfSize "maxClusterCount");
      ("maxClusterCount",ANone);
      ("actualClusterCount",OutReturn);
    ],MANone);
    ("DetermineMinWidth",[
      ("This",AThis);
      ("minWidth",OutReturn);
    ],MANone);
    ("HitTestPoint",[
      ("This",AThis);
      ("pointX",ANone);
      ("pointY",ANone);
      ("isTrailingHit",OutReturn);
      ("isInside",OutReturn);
      ("hitTestMetrics",OutReturn);
    ],MANone);
    ("HitTestTextPosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("isTrailingHit",ANone);
      ("pointX",OutReturn);
      ("pointY",OutReturn);
      ("hitTestMetrics",OutReturn);
    ],MANone);
    ("HitTestTextRange",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("originX",ANone);
      ("originY",ANone);
      ("hitTestMetrics",OutOptionalArrayOfSize "maxHitTestMetricsCount");
      ("maxHitTestMetricsCount",ANone);
      ("actualHitTestMetricsCount",OutReturn);
    ],MANone);
  ]);
  ("IDWriteTextRendererVtbl",IAAutogen(Set.ofList []), "IDWritePixelSnappingVtbl", [
    ("DrawGlyphRun",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("measuringMode",ANone);
      ("glyphRun",ANone);
      ("glyphRunDescription",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawUnderline",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("underline",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawStrikethrough",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("strikethrough",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawInlineObject",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("originX",ANone);
      ("originY",ANone);
      ("inlineObject",InComPtr);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
  ]);
  ("IDWriteTypographyVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("AddFontFeature",[
      ("This",AThis);
      ("fontFeature",ANone);
    ],MANone);
    ("GetFontFeatureCount",[
      ("This",AThis);
    ],MANone);
    ("GetFontFeature",[
      ("This",AThis);
      ("fontFeatureIndex",ANone);
      ("fontFeature",OutReturn);
    ],MANone);
  ]);
  ]

let d2d1 =
 [
  ("ID2D1BitmapBrushVtbl",IAAutogen(Set.ofList []), "ID2D1BrushVtbl", [
    ("SetExtendModeX",[
      ("This",AThis);
      ("extendModeX",ANone);
    ],MANone);
    ("SetExtendModeY",[
      ("This",AThis);
      ("extendModeY",ANone);
    ],MANone);
    ("SetInterpolationMode",[
      ("This",AThis);
      ("interpolationMode",ANone);
    ],MANone);
    ("SetBitmap",[
      ("This",AThis);
      ("bitmap",InComPtr);
    ],MANone);
    ("GetExtendModeX",[
      ("This",AThis);
    ],MANone);
    ("GetExtendModeY",[
      ("This",AThis);
    ],MANone);
    ("GetInterpolationMode",[
      ("This",AThis);
    ],MANone);
    ("GetBitmap",[
      ("This",AThis);
      ("bitmap",OutReturnOptionalComPtr);
    ],MANone);
  ]);
  ("ID2D1BitmapRenderTargetVtbl",IAAutogen(Set.ofList []), "ID2D1RenderTargetVtbl", [
    ("GetBitmap",[
      ("This",AThis);
      ("bitmap",OutReturnComPtr);
    ],MANone);
  ]);
  ("ID2D1BitmapVtbl",IAAutogen(Set.ofList []), "ID2D1ImageVtbl", [
    ("GetSize",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetPixelSize",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetPixelFormat",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetDpi",[
      ("This",AThis);
      ("dpiX",OutReturn);
      ("dpiY",OutReturn);
    ],MANone);
    ("CopyFromBitmap",[
      ("This",AThis);
      ("destPoint",InOptional);
      ("bitmap",InComPtr);
      ("srcRect",InOptional);
    ],MANone);
    ("CopyFromRenderTarget",[
      ("This",AThis);
      ("destPoint",InOptional);
      ("renderTarget",InComPtr);
      ("srcRect",InOptional);
    ],MANone);
    ("CopyFromMemory",[
      ("This",AThis);
      ("dstRect",InOptional);
      ("srcData",ANone);
      ("pitch",ANone);
    ],MAUnsafe);
  ]);
  ("ID2D1BrushVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("SetOpacity",[
      ("This",AThis);
      ("opacity",ANone);
    ],MANone);
    ("SetTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
    ("GetOpacity",[
      ("This",AThis);
    ],MANone);
    ("GetTransform",[
      ("This",AThis);
      ("transform",OutReturn);
    ],MANone);
  ]);
  ("ID2D1DCRenderTargetVtbl",IAAutogen(Set.ofList []), "ID2D1RenderTargetVtbl", [
    ("BindDC",[
      ("This",AThis);
      ("hDC",ANone);
      ("pSubRect",ANone);
    ],MANone);
  ]);
  ("ID2D1DrawingStateBlockVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("GetDescription",[
      ("This",AThis);
      ("stateDescription",OutReturn);
    ],MANone);
    ("SetDescription",[
      ("This",AThis);
      ("stateDescription",ANone);
    ],MANone);
    ("SetTextRenderingParams",[
      ("This",AThis);
      ("textRenderingParams",InComPtr);
    ],MANone);
    ("GetTextRenderingParams",[
      ("This",AThis);
      ("textRenderingParams",OutReturnComPtr);
    ],MANone);
  ]);
  ("ID2D1EllipseGeometryVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("GetEllipse",[
      ("This",AThis);
      ("ellipse",OutReturn);
    ],MANone);
  ]);
  ("ID2D1FactoryVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("ReloadSystemMetrics",[
      ("This",AThis);
    ],MANone);
    ("GetDesktopDpi",[
      ("This",AThis);
      ("dpiX",OutReturn);
      ("dpiY",OutReturn);
    ],MANone);
    ("CreateRectangleGeometry",[
      ("This",AThis);
      ("rectangle",ANone);
      ("rectangleGeometry",OutReturnComPtr);
    ],MANone);
    ("CreateRoundedRectangleGeometry",[
      ("This",AThis);
      ("roundedRectangle",ANone);
      ("roundedRectangleGeometry",OutReturnComPtr);
    ],MANone);
    ("CreateEllipseGeometry",[
      ("This",AThis);
      ("ellipse",ANone);
      ("ellipseGeometry",OutReturnComPtr);
    ],MANone);
    ("CreateGeometryGroup",[
      ("This",AThis);
      ("fillMode",ANone);
      ("geometries",InComPtrArrayOfSize "geometriesCount");
      ("geometriesCount",ANone);
      ("geometryGroup",OutReturnComPtr);
    ],MANone);
    ("CreateTransformedGeometry",[
      ("This",AThis);
      ("sourceGeometry",InComPtr);
      ("transform",InOptional);
      ("transformedGeometry",OutReturnComPtr);
    ],MANone);
    ("CreatePathGeometry",[
      ("This",AThis);
      ("pathGeometry",OutReturnComPtr);
    ],MANone);
    ("CreateStrokeStyle",[
      ("This",AThis);
      ("strokeStyleProperties",ANone);
      ("dashes",InOptionalArrayOfSize "dashesCount");
      ("dashesCount",ANone);
      ("strokeStyle",OutReturnComPtr);
    ],MANone);
    ("CreateDrawingStateBlock",[
      ("This",AThis);
      ("drawingStateDescription",InOptional);
      ("textRenderingParams",InOptionalComPtr);
      ("drawingStateBlock",OutReturnComPtr);
    ],MANone);
    ("CreateWicBitmapRenderTarget",[
      ("This",AThis);
      ("target",InComPtr);
      ("renderTargetProperties",InOptional);
      ("renderTarget",OutReturnComPtr);
    ],MANone);
    ("CreateHwndRenderTarget",[
      ("This",AThis);
      ("renderTargetProperties",ANone);
      ("hwndRenderTargetProperties",ANone);
      ("hwndRenderTarget",OutReturnComPtr);
    ],MANone);
    ("CreateDxgiSurfaceRenderTarget",[
      ("This",AThis);
      ("dxgiSurface",InComPtr);
      ("renderTargetProperties",ANone);
      ("renderTarget",OutReturnComPtr);
    ],MANone);
    ("CreateDCRenderTarget",[
      ("This",AThis);
      ("renderTargetProperties",ANone);
      ("dcRenderTarget",OutReturnComPtr);
    ],MANone);
  ]);
  // TODO: add 'private' flag to IAAutogen flags
  ("ID2D1GdiInteropRenderTargetVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetDC",[
      ("This",AThis);
      ("mode",ANone);
      ("hdc",OutReturn);
    ],MANone);
    ("ReleaseDC",[
      ("This",AThis);
      ("update",InOptional);
    ],MANone);
  ]);
  ("ID2D1GeometryGroupVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("GetFillMode",[
      ("This",AThis);
    ],MANone);
    ("GetSourceGeometryCount",[
      ("This",AThis);
    ],MANone);
    // TODO: add OutReturnComPtrArrayOfSize
    ("GetSourceGeometries",[
      ("This",AThis);
      ("geometries",OutReturnComPtr);
      ("geometriesCount",ANone);
    ], MACustom id2d1geometrygroup_getsourcegeometries); // Handmade implementation
  ]);
  ("ID2D1GeometrySinkVtbl",IAAutogen(Set.ofList []), "ID2D1SimplifiedGeometrySinkVtbl", [
    ("AddLine",[
      ("This",AThis);
      ("point",ANone);
    ],MANone);
    ("AddBezier",[
      ("This",AThis);
      ("bezier",ANone);
    ],MANone);
    ("AddQuadraticBezier",[
      ("This",AThis);
      ("bezier",ANone);
    ],MANone);
    ("AddQuadraticBeziers",[
      ("This",AThis);
      ("beziers",InArrayOfSize "beziersCount");
      ("beziersCount",ANone);
    ],MANone);
    ("AddArc",[
      ("This",AThis);
      ("arc",ANone);
    ],MANone);
  ]);
  // TODO: Annotate and allow wrapper generation
  ("ID2D1GeometryVtbl", IAAutogen (Set.ofList []), "ID2D1ResourceVtbl", [
    ("GetBounds",[
      ("This",AThis);
      ("worldTransform",InOptional);
      ("bounds",OutReturn);
    ],MANone);
    ("GetWidenedBounds",[
      ("This",AThis);
      ("strokeWidth",ANone);
      ("strokeStyle",InOptionalComPtr);
      ("worldTransform",InOptional);
      ("flatteningTolerance",ANone);
      ("bounds",OutReturn);
    ],MANone);
    ("StrokeContainsPoint",[
      ("This",AThis);
      ("point",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",InOptionalComPtr);
      ("worldTransform",InOptional);
      ("flatteningTolerance",ANone);
      ("contains",OutReturn);
    ],MANone);
    ("FillContainsPoint",[
      ("This",AThis);
      ("point",ANone);
      ("worldTransform",InOptional);
      ("flatteningTolerance",ANone);
      ("contains",OutReturn);
    ],MANone);
    ("CompareWithGeometry",[
      ("This",AThis);
      ("inputGeometry",ANone);
      ("inputGeometryTransform",ANone);
      ("flatteningTolerance",ANone);
      ("relation",ANone);
    ],MANone);
    ("Simplify",[
      ("This",AThis);
      ("simplificationOption",ANone);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("geometrySink",ANone);
    ],MANone);
    ("Tessellate",[
      ("This",AThis);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("tessellationSink",ANone);
    ],MANone);
    ("CombineWithGeometry",[
      ("This",AThis);
      ("inputGeometry",ANone);
      ("combineMode",ANone);
      ("inputGeometryTransform",ANone);
      ("flatteningTolerance",ANone);
      ("geometrySink",ANone);
    ],MANone);
    ("Outline",[
      ("This",AThis);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("geometrySink",ANone);
    ],MANone);
    ("ComputeArea",[
      ("This",AThis);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("area",ANone);
    ],MANone);
    ("ComputeLength",[
      ("This",AThis);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("length",ANone);
    ],MANone);
    ("ComputePointAtLength",[
      ("This",AThis);
      ("length",ANone);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("point",ANone);
      ("unitTangentVector",ANone);
    ],MANone);
    ("Widen",[
      ("This",AThis);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
      ("worldTransform",ANone);
      ("flatteningTolerance",ANone);
      ("geometrySink",ANone);
    ],MANone);
  ]);
  // TODO: annotate and enable
  ("ID2D1GradientStopCollectionVtbl",IAManual, "ID2D1ResourceVtbl", [
    ("GetGradientStopCount",[
      ("This",AThis);
    ],MANone);
    ("GetGradientStops",[
      ("This",AThis);
      ("gradientStops",ANone);
      ("gradientStopsCount",ANone);
    ],MANone);
    ("GetColorInterpolationGamma",[
      ("This",AThis);
    ],MANone);
    ("GetExtendMode",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID2D1HwndRenderTargetVtbl",IAAutogen(Set.ofList []), "ID2D1RenderTargetVtbl", [
    ("CheckWindowState",[
      ("This",AThis);
    ],MANone);
    ("Resize",[
      ("This",AThis);
      ("pixelSize",ANone);
    ],MANone);
    ("GetHwnd",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID2D1ImageVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
  ]);
  ("ID2D1LayerVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("GetSize",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
  ]);
  ("ID2D1LinearGradientBrushVtbl",IAAutogen(Set.ofList []), "ID2D1BrushVtbl", [
    ("SetStartPoint",[
      ("This",AThis);
      ("startPoint",ANone);
    ],MANone);
    ("SetEndPoint",[
      ("This",AThis);
      ("endPoint",ANone);
    ],MANone);
    ("GetStartPoint",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetEndPoint",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetGradientStopCollection",[
      ("This",AThis);
      ("gradientStopCollection",ANone);
    ],MANone);
  ]);
  ("ID2D1MeshVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("Open",[
      ("This",AThis);
      ("tessellationSink",ANone);
    ],MANone);
  ]);
  ("ID2D1PathGeometryVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("Open",[
      ("This",AThis);
      ("geometrySink",ANone);
    ],MANone);
    ("Stream",[
      ("This",AThis);
      ("geometrySink",ANone);
    ],MANone);
    ("GetSegmentCount",[
      ("This",AThis);
      ("count",ANone);
    ],MANone);
    ("GetFigureCount",[
      ("This",AThis);
      ("count",ANone);
    ],MANone);
  ]);
  ("ID2D1RadialGradientBrushVtbl",IAAutogen(Set.ofList []), "ID2D1BrushVtbl", [
    ("SetCenter",[
      ("This",AThis);
      ("center",ANone);
    ],MANone);
    ("SetGradientOriginOffset",[
      ("This",AThis);
      ("gradientOriginOffset",ANone);
    ],MANone);
    ("SetRadiusX",[
      ("This",AThis);
      ("radiusX",ANone);
    ],MANone);
    ("SetRadiusY",[
      ("This",AThis);
      ("radiusY",ANone);
    ],MANone);
    ("GetCenter",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetGradientOriginOffset",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetRadiusX",[
      ("This",AThis);
    ],MANone);
    ("GetRadiusY",[
      ("This",AThis);
    ],MANone);
    ("GetGradientStopCollection",[
      ("This",AThis);
      ("gradientStopCollection",ANone);
    ],MANone);
  ]);
  ("ID2D1RectangleGeometryVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("GetRect",[
      ("This",AThis);
      ("rect",ANone);
    ],MANone);
  ]);
  ("ID2D1RenderTargetVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("CreateBitmap",[
      ("This",AThis);
      ("size",ANone);
      ("srcData",ANone);
      ("pitch",ANone);
      ("bitmapProperties",ANone);
      ("bitmap",ANone);
    ],MANone);
    ("CreateBitmapFromWicBitmap",[
      ("This",AThis);
      ("wicBitmapSource",ANone);
      ("bitmapProperties",ANone);
      ("bitmap",ANone);
    ],MANone);
    ("CreateSharedBitmap",[
      ("This",AThis);
      ("riid",ANone);
      ("data",ANone);
      ("bitmapProperties",ANone);
      ("bitmap",ANone);
    ],MANone);
    ("CreateBitmapBrush",[
      ("This",AThis);
      ("bitmap",ANone);
      ("bitmapBrushProperties",ANone);
      ("brushProperties",ANone);
      ("bitmapBrush",ANone);
    ],MANone);
    ("CreateSolidColorBrush",[
      ("This",AThis);
      ("color",ANone);
      ("brushProperties",ANone);
      ("solidColorBrush",ANone);
    ],MANone);
    ("CreateGradientStopCollection",[
      ("This",AThis);
      ("gradientStops",ANone);
      ("gradientStopsCount",ANone);
      ("colorInterpolationGamma",ANone);
      ("extendMode",ANone);
      ("gradientStopCollection",ANone);
    ],MANone);
    ("CreateLinearGradientBrush",[
      ("This",AThis);
      ("linearGradientBrushProperties",ANone);
      ("brushProperties",ANone);
      ("gradientStopCollection",ANone);
      ("linearGradientBrush",ANone);
    ],MANone);
    ("CreateRadialGradientBrush",[
      ("This",AThis);
      ("radialGradientBrushProperties",ANone);
      ("brushProperties",ANone);
      ("gradientStopCollection",ANone);
      ("radialGradientBrush",ANone);
    ],MANone);
    ("CreateCompatibleRenderTarget",[
      ("This",AThis);
      ("desiredSize",ANone);
      ("desiredPixelSize",ANone);
      ("desiredFormat",ANone);
      ("options",ANone);
      ("bitmapRenderTarget",ANone);
    ],MANone);
    ("CreateLayer",[
      ("This",AThis);
      ("size",ANone);
      ("layer",ANone);
    ],MANone);
    ("CreateMesh",[
      ("This",AThis);
      ("mesh",ANone);
    ],MANone);
    ("DrawLine",[
      ("This",AThis);
      ("point0",ANone);
      ("point1",ANone);
      ("brush",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
    ],MANone);
    ("DrawRectangle",[
      ("This",AThis);
      ("rect",ANone);
      ("brush",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
    ],MANone);
    ("FillRectangle",[
      ("This",AThis);
      ("rect",ANone);
      ("brush",ANone);
    ],MANone);
    ("DrawRoundedRectangle",[
      ("This",AThis);
      ("roundedRect",ANone);
      ("brush",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
    ],MANone);
    ("FillRoundedRectangle",[
      ("This",AThis);
      ("roundedRect",ANone);
      ("brush",ANone);
    ],MANone);
    ("DrawEllipse",[
      ("This",AThis);
      ("ellipse",ANone);
      ("brush",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
    ],MANone);
    ("FillEllipse",[
      ("This",AThis);
      ("ellipse",ANone);
      ("brush",ANone);
    ],MANone);
    ("DrawGeometry",[
      ("This",AThis);
      ("geometry",ANone);
      ("brush",ANone);
      ("strokeWidth",ANone);
      ("strokeStyle",ANone);
    ],MANone);
    ("FillGeometry",[
      ("This",AThis);
      ("geometry",ANone);
      ("brush",ANone);
      ("opacityBrush",ANone);
    ],MANone);
    ("FillMesh",[
      ("This",AThis);
      ("mesh",ANone);
      ("brush",ANone);
    ],MANone);
    ("FillOpacityMask",[
      ("This",AThis);
      ("opacityMask",ANone);
      ("brush",ANone);
      ("content",ANone);
      ("destinationRectangle",ANone);
      ("sourceRectangle",ANone);
    ],MANone);
    ("DrawBitmap",[
      ("This",AThis);
      ("bitmap",ANone);
      ("destinationRectangle",ANone);
      ("opacity",ANone);
      ("interpolationMode",ANone);
      ("sourceRectangle",ANone);
    ],MANone);
    ("DrawText",[
      ("This",AThis);
      ("string",ANone);
      ("stringLength",ANone);
      ("textFormat",ANone);
      ("layoutRect",ANone);
      ("defaultForegroundBrush",ANone);
      ("options",ANone);
      ("measuringMode",ANone);
    ],MANone);
    ("DrawTextLayout",[
      ("This",AThis);
      ("origin",ANone);
      ("textLayout",ANone);
      ("defaultForegroundBrush",ANone);
      ("options",ANone);
    ],MANone);
    ("DrawGlyphRun",[
      ("This",AThis);
      ("baselineOrigin",ANone);
      ("glyphRun",ANone);
      ("foregroundBrush",ANone);
      ("measuringMode",ANone);
    ],MANone);
    ("SetTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
    ("GetTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
    ("SetAntialiasMode",[
      ("This",AThis);
      ("antialiasMode",ANone);
    ],MANone);
    ("GetAntialiasMode",[
      ("This",AThis);
    ],MANone);
    ("SetTextAntialiasMode",[
      ("This",AThis);
      ("textAntialiasMode",ANone);
    ],MANone);
    ("GetTextAntialiasMode",[
      ("This",AThis);
    ],MANone);
    ("SetTextRenderingParams",[
      ("This",AThis);
      ("textRenderingParams",ANone);
    ],MANone);
    ("GetTextRenderingParams",[
      ("This",AThis);
      ("textRenderingParams",ANone);
    ],MANone);
    ("SetTags",[
      ("This",AThis);
      ("tag1",ANone);
      ("tag2",ANone);
    ],MANone);
    ("GetTags",[
      ("This",AThis);
      ("tag1",ANone);
      ("tag2",ANone);
    ],MANone);
    ("PushLayer",[
      ("This",AThis);
      ("layerParameters",ANone);
      ("layer",ANone);
    ],MANone);
    ("PopLayer",[
      ("This",AThis);
    ],MANone);
    ("Flush",[
      ("This",AThis);
      ("tag1",ANone);
      ("tag2",ANone);
    ],MANone);
    ("SaveDrawingState",[
      ("This",AThis);
      ("drawingStateBlock",ANone);
    ],MANone);
    ("RestoreDrawingState",[
      ("This",AThis);
      ("drawingStateBlock",ANone);
    ],MANone);
    ("PushAxisAlignedClip",[
      ("This",AThis);
      ("clipRect",ANone);
      ("antialiasMode",ANone);
    ],MANone);
    ("PopAxisAlignedClip",[
      ("This",AThis);
    ],MANone);
    ("Clear",[
      ("This",AThis);
      ("clearColor",ANone);
    ],MANone);
    ("BeginDraw",[
      ("This",AThis);
    ],MANone);
    ("EndDraw",[
      ("This",AThis);
      ("tag1",ANone);
      ("tag2",ANone);
    ],MANone);
    ("GetPixelFormat",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("SetDpi",[
      ("This",AThis);
      ("dpiX",ANone);
      ("dpiY",ANone);
    ],MANone);
    ("GetDpi",[
      ("This",AThis);
      ("dpiX",ANone);
      ("dpiY",ANone);
    ],MANone);
    ("GetSize",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetPixelSize",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetMaximumBitmapSize",[
      ("This",AThis);
    ],MANone);
    ("IsSupported",[
      ("This",AThis);
      ("renderTargetProperties",ANone);
    ],MANone);
  ]);
  ("ID2D1ResourceVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFactory",[
      ("This",AThis);
      ("factory",OutReturnComPtr);
    ],MANone);
  ]);
  ("ID2D1RoundedRectangleGeometryVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("GetRoundedRect",[
      ("This",AThis);
      ("roundedRect",ANone);
    ],MANone);
  ]);
  ("ID2D1SimplifiedGeometrySinkVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("SetFillMode",[
      ("This",AThis);
      ("fillMode",ANone);
    ],MANone);
    ("SetSegmentFlags",[
      ("This",AThis);
      ("vertexFlags",ANone);
    ],MANone);
    ("BeginFigure",[
      ("This",AThis);
      ("startPoint",ANone);
      ("figureBegin",ANone);
    ],MANone);
    ("AddLines",[
      ("This",AThis);
      ("points",ANone);
      ("pointsCount",ANone);
    ],MANone);
    ("AddBeziers",[
      ("This",AThis);
      ("beziers",ANone);
      ("beziersCount",ANone);
    ],MANone);
    ("EndFigure",[
      ("This",AThis);
      ("figureEnd",ANone);
    ],MANone);
    ("Close",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID2D1SolidColorBrushVtbl",IAAutogen(Set.ofList []), "ID2D1BrushVtbl", [
    ("SetColor",[
      ("This",AThis);
      ("color",ANone);
    ],MANone);
    ("GetColor",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
  ]);
  ("ID2D1StrokeStyleVtbl",IAAutogen(Set.ofList []), "ID2D1ResourceVtbl", [
    ("GetStartCap",[
      ("This",AThis);
    ],MANone);
    ("GetEndCap",[
      ("This",AThis);
    ],MANone);
    ("GetDashCap",[
      ("This",AThis);
    ],MANone);
    ("GetMiterLimit",[
      ("This",AThis);
    ],MANone);
    ("GetLineJoin",[
      ("This",AThis);
    ],MANone);
    ("GetDashOffset",[
      ("This",AThis);
    ],MANone);
    ("GetDashStyle",[
      ("This",AThis);
    ],MANone);
    ("GetDashesCount",[
      ("This",AThis);
    ],MANone);
    ("GetDashes",[
      ("This",AThis);
      ("dashes",ANone);
      ("dashesCount",ANone);
    ],MANone);
  ]);
  ("ID2D1TessellationSinkVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("AddTriangles",[
      ("This",AThis);
      ("triangles",ANone);
      ("trianglesCount",ANone);
    ],MANone);
    ("Close",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID2D1TransformedGeometryVtbl",IAAutogen(Set.ofList []), "ID2D1GeometryVtbl", [
    ("GetSourceGeometry",[
      ("This",AThis);
      ("sourceGeometry",ANone);
    ],MANone);
    ("GetTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
  ]);
 ]

let d3d12shader=[
  ("ID3D12FunctionParameterReflectionVtbl",IAAutogen(Set.ofList []), "", [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
  ]);
  ("ID3D12FunctionReflectionVtbl",IAAutogen(Set.ofList []), "", [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetConstantBufferByIndex",[
      ("This",AThis);
      ("BufferIndex",ANone);
    ],MAReturnsInterface);
    ("GetConstantBufferByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
    ("GetResourceBindingDesc",[
      ("This",AThis);
      ("ResourceIndex",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetVariableByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
    ("GetResourceBindingDescByName",[
      ("This",AThis);
      ("Name",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetFunctionParameter",[
      ("This",AThis);
      ("ParameterIndex",ANone);
    ],MAReturnsInterface);
  ]);
  ("ID3D12LibraryReflectionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetFunctionByIndex",[
      ("This",AThis);
      ("FunctionIndex",ANone);
    ],MAReturnsInterface);
  ]);
  ("ID3D12ShaderReflectionConstantBufferVtbl",IAAutogen(Set.ofList []), "", [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetVariableByIndex",[
      ("This",AThis);
      ("Index",ANone);
    ],MAReturnsInterface);
    ("GetVariableByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
  ]);
  ("ID3D12ShaderReflectionTypeVtbl",IAAutogen(Set.ofList []), "", [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetMemberTypeByIndex",[
      ("This",AThis);
      ("Index",ANone);
    ],MAReturnsInterface);
    ("GetMemberTypeByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
    ("GetMemberTypeName",[
      ("This",AThis);
      ("Index",ANone);
    ],MANone);
    ("IsEqual",[
      ("This",AThis);
      ("pType",ANone);
    ],MANone);
    ("GetSubType",[
      ("This",AThis);
    ],MAReturnsInterface);
    ("GetBaseClass",[
      ("This",AThis);
    ],MAReturnsInterface);
    ("GetNumInterfaces",[
      ("This",AThis);
    ],MANone);
    ("GetInterfaceByIndex",[
      ("This",AThis);
      ("uIndex",ANone);
    ],MAReturnsInterface);
    ("IsOfType",[
      ("This",AThis);
      ("pType",ANone);
    ],MANone);
    ("ImplementsInterface",[
      ("This",AThis);
      ("pBase",ANone);
    ],MANone);
  ]);
  ("ID3D12ShaderReflectionVariableVtbl",IAAutogen(Set.ofList []), "", [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetType",[
      ("This",AThis);
    ],MAReturnsInterface);
    ("GetBuffer",[
      ("This",AThis);
    ],MAReturnsInterface);
    ("GetInterfaceSlot",[
      ("This",AThis);
      ("uArrayIndex",ANone);
    ],MANone);
  ]);
  ("ID3D12ShaderReflectionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",ANone);
    ],MANone);
    ("GetConstantBufferByIndex",[
      ("This",AThis);
      ("Index",ANone);
    ],MAReturnsInterface);
    ("GetConstantBufferByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
    ("GetResourceBindingDesc",[
      ("This",AThis);
      ("ResourceIndex",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetInputParameterDesc",[
      ("This",AThis);
      ("ParameterIndex",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetOutputParameterDesc",[
      ("This",AThis);
      ("ParameterIndex",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetPatchConstantParameterDesc",[
      ("This",AThis);
      ("ParameterIndex",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetVariableByName",[
      ("This",AThis);
      ("Name",ANone);
    ],MAReturnsInterface);
    ("GetResourceBindingDescByName",[
      ("This",AThis);
      ("Name",ANone);
      ("pDesc",ANone);
    ],MANone);
    ("GetMovInstructionCount",[
      ("This",AThis);
    ],MANone);
    ("GetMovcInstructionCount",[
      ("This",AThis);
    ],MANone);
    ("GetConversionInstructionCount",[
      ("This",AThis);
    ],MANone);
    ("GetBitwiseInstructionCount",[
      ("This",AThis);
    ],MANone);
    ("GetGSInputPrimitive",[
      ("This",AThis);
    ],MANone);
    ("IsSampleFrequencyShader",[
      ("This",AThis);
    ],MANone);
    ("GetNumInterfaceSlots",[
      ("This",AThis);
    ],MANone);
    ("GetMinFeatureLevel",[
      ("This",AThis);
      ("pLevel",ANone);
    ],MANone);
    ("GetThreadGroupSize",[
      ("This",AThis);
      ("pSizeX",ANone);
      ("pSizeY",ANone);
      ("pSizeZ",ANone);
    ],MANone);
    ("GetRequiresFlags",[
      ("This",AThis);
    ],MANone);
  ]);
  ]
