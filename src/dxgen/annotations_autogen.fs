module annotations_autogen
open annotations
open cdesc  

let (++) xs ys=
  List.concat [xs;ys]

let getPrivateData= // Low level method
  ("GetPrivateData",[
      ("This",AThis);
      ("guid",ANone);
      ("pDataSize",InOutReturn);
      ("pData",OutOptionalOfSize "pDataSize");
    ],MAUnsafe) // safe method should be: unsafe fn get_private_data<T>(guid: REFGUID, data: Option<&mut T>) -> HResult<usize>

let setPrivateData=
  ("SetPrivateData",[
      ("This",AThis);
      ("guid",ANone);
      ("DataSize",ANone);
      ("pData", InOfSize "DataSize");
    ],MANone)

let setPrivateDataInterface=
  ("SetPrivateDataInterface",[
      ("This",AThis);
      ("guid",ANone);
      ("pData",InIUnknown);
    ],MADontImplement) // Not useful without full-blown COM-support

let setName=
  ("SetName",[
      ("This",AThis);
      ("Name",ANone);
    ],MANone)

let getDevice=
  ("GetDevice",[
    ("This",AThis);
    ("riid",ANone);
    ("ppvDevice",OutReturnInterface "riid");
  ],MANone)

let d3d12Object= [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    getPrivateData;
    setPrivateData;
    setPrivateDataInterface;
    setName
  ]

let dxgiObject = [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("SetPrivateData",[
      ("This",AThis);
      ("Name",ANone);
      ("DataSize",ANone);
      ("pData", InOfSize "DataSize");
    ],MANone);
    ("SetPrivateDataInterface",[
      ("This",AThis);
      ("Name",ANone);
      ("pUnknown",ANone);
    ],MADontImplement);
    ("GetPrivateData",[
      ("This",AThis);
      ("Name",ANone);
      ("pDataSize",InOutReturn);
      ("pData", OutOptionalOfSize "pDataSize");
    ],MANone);
    ("GetParent",[
      ("This",AThis);
      ("riid",ANone);
      ("ppParent",OutReturnInterface "riid");
    ],MANone);
  ]

let dxgiDevice=
  dxgiObject ++ [
    ("GetAdapter",[
      ("This",AThis);
      ("pAdapter",OutReturnComPtr);
    ],MANone);
    ("CreateSurface",[
      ("This",AThis);
      ("pDesc",ANone);
      ("NumSurfaces",ANone);
      ("Usage",ANone);
      ("pSharedResource",ANone);
      ("ppSurface",ANone);
    ],MADontImplement); // MSDN states that this method is internal
    ("QueryResourceResidency",[
      ("This",AThis);
      ("ppResources",InComPtrArrayOfSize "NumResources");
      ("pResidencyStatus",OutArrayOfSize "NumResources");
      ("NumResources",ANone);
    ],MANone);
    ("SetGPUThreadPriority",[
      ("This",AThis);
      ("Priority",ANone);
    ],MANone);
    ("GetGPUThreadPriority",[
      ("This",AThis);
      ("pPriority",OutReturn);
    ],MANone);]

let dxgiFactory=
  dxgiObject ++ 
  [
    ("EnumAdapters",[
      ("This",AThis);
      ("Adapter",ANone);
      ("ppAdapter",OutReturnComPtr);
    ],MANone);
    ("MakeWindowAssociation",[
      ("This",AThis);
      ("WindowHandle",ANone);
      ("Flags",ANone);
    ],MANone);
    ("GetWindowAssociation",[
      ("This",AThis);
      ("pWindowHandle",OutReturn);
    ],MANone);
    ("CreateSwapChain",[
      ("This",AThis);
      ("pDevice",InComPtr);
      ("pDesc",ANone);
      ("ppSwapChain",OutReturnComPtr);
    ],MANone);
    ("CreateSoftwareAdapter",[
      ("This",AThis);
      ("Module",ANone);
      ("ppAdapter",OutReturnComPtr);
    ],MANone);]

let d3d12annotations=[
  ("ID3D10BlobVtbl",IAAutogen,"IUnknownVtbl",[
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("GetBufferPointer",[
      ("This",AThis);
    ],MANone);
    ("GetBufferSize",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12CommandAllocatorVtbl",IAAutogen, "ID3D12PageableVtbl", d3d12Object++[
    getDevice;
    ("Reset",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12CommandListVtbl",IAAutogen, "ID3D12DeviceChildVtbl", d3d12Object++[
    getDevice;
    ("GetType",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12CommandQueueVtbl",IAAutogen, "ID3D12PageableVtbl", d3d12Object++[
    getDevice;
    ("UpdateTileMappings",[
      ("This",AThis);
      ("pResource",InComPtr);
      ("NumResourceRegions",ANone);
      ("pResourceRegionStartCoordinates",InOptionalArrayOfSize "NumResourceRegions");
      ("pResourceRegionSizes",InOptionalArrayOfSize "NumResourceRegions");
      ("pHeap",InOptional);
      ("NumRanges",ANone);
      ("pRangeFlags",InOptionalArrayOfSize "NumRanges");
      ("pHeapRangeStartOffsets",InOptionalArrayOfSize "NumRanges");
      ("pRangeTileCounts",InOptionalArrayOfSize "NumRanges");
      ("Flags",ANone);
    ],MANone);
    ("CopyTileMappings",[
      ("This",AThis);
      ("pDstResource",InComPtr);
      ("pDstRegionStartCoordinate",ANone);
      ("pSrcResource",InComPtr);
      ("pSrcRegionStartCoordinate",ANone);
      ("pRegionSize",ANone);
      ("Flags",ANone);
    ],MANone);
    ("ExecuteCommandLists",[
      ("This",AThis);
      ("NumCommandLists",ANone);
      ("ppCommandLists",InComPtrArrayOfSize "NumCommandLists");
    ],MANone);
    ("SetMarker",[
      ("This",AThis);
      ("Metadata",ANone);
      ("pData",ANone);
      ("Size",ANone);
    ],MADontImplement);
    ("BeginEvent",[
      ("This",AThis);
      ("Metadata",ANone);
      ("pData",ANone);
      ("Size",ANone);
    ],MADontImplement);
    ("EndEvent",[
      ("This",AThis);
    ],MADontImplement);
    ("Signal",[
      ("This",AThis);
      ("pFence",ANone);
      ("Value",ANone);
    ],MANone);
    ("Wait",[
      ("This",AThis);
      ("pFence",ANone);
      ("Value",ANone);
    ],MANone);
    ("GetTimestampFrequency",[
      ("This",AThis);
      ("pFrequency",OutReturn);
    ],MANone);
    ("GetClockCalibration",[
      ("This",AThis);
      ("pGpuTimestamp",OutReturnCombine("GPUCPUTimestamp","gpu_timestamp"));
      ("pCpuTimestamp",OutReturnCombine("GPUCPUTimestamp","cpu_timestamp"));
    ],MANone);
    ("GetDesc",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12CommandSignatureVtbl",IAAutogen, "ID3D12PageableVtbl", d3d12Object++[
    getDevice;
  ]);
  ("ID3D12DebugCommandListVtbl",IAManual, "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("AssertResourceState",[
      ("This",AThis);
      ("pResource",ANone);
      ("Subresource",ANone);
      ("State",ANone);
    ],MANone);
    ("SetFeatureMask",[
      ("This",AThis);
      ("Mask",ANone);
    ],MANone);
    ("GetFeatureMask",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12DebugCommandQueueVtbl",IAManual, "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("AssertResourceState",[
      ("This",AThis);
      ("pResource",ANone);
      ("Subresource",ANone);
      ("State",ANone);
    ],MANone);
  ]);
  ("ID3D12DebugDeviceVtbl",IAManual, "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("SetFeatureMask",[
      ("This",AThis);
      ("Mask",ANone);
    ],MANone);
    ("GetFeatureMask",[
      ("This",AThis);
    ],MANone);
    ("ReportLiveDeviceObjects",[
      ("This",AThis);
      ("Flags",ANone);
    ],MANone);
  ]);
  ("ID3D12DebugVtbl", IAManual, "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("EnableDebugLayer",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12DescriptorHeapVtbl",IAAutogen, "ID3D12PageableVtbl", d3d12Object++[
    getDevice;
    ("GetDesc",[
      ("This",AThis);
    ],MANone);
    ("GetCPUDescriptorHandleForHeapStart",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
    ("GetGPUDescriptorHandleForHeapStart",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
  ]);
  ("ID3D12DeviceChildVtbl",IAAutogen, "ID3D12ObjectVtbl",  d3d12Object++[
    getDevice;
  ]);
  ("ID3D12DeviceVtbl",IAAutogen, "ID3D12ObjectVtbl", d3d12Object++[
    ("GetNodeCount",[
      ("This",AThis);
    ],MANone);
    ("CreateCommandQueue",[
      ("This",AThis);
      ("pDesc",ANone);
      ("riid",ANone);
      ("ppCommandQueue",OutReturnKnownInterface("riid","D3D12CommandQueue"));
    ],MANone);
    ("CreateCommandAllocator",[
      ("This",AThis);
      ("type",ANone);
      ("riid",ANone);
      ("ppCommandAllocator",OutReturnKnownInterface("riid","D3D12CommandAllocator"));
    ],MANone);
    ("CreateGraphicsPipelineState",[
      ("This",AThis);
      ("pDesc",ANone);
      ("riid",ANone);
      ("ppPipelineState",OutReturnKnownInterface("riid","D3D12PipelineState"));
    ],MANone);
    ("CreateComputePipelineState",[
      ("This",AThis);
      ("pDesc",ANone);
      ("riid",ANone);
      ("ppPipelineState",OutReturnKnownInterface("riid","D3D12PipelineState"));
    ],MANone);
    ("CreateCommandList",[
      ("This",AThis);
      ("nodeMask",ANone);
      ("type",ANone);
      ("pCommandAllocator",ANone);
      ("pInitialState",InOptionalComPtr);
      ("riid",ANone);
      ("ppCommandList",OutReturnInterface "riid");
    ],MANone);
    ("CheckFeatureSupport",[
      ("This",AThis);
      ("Feature",TypeSelector("pFeatureSupportData",[("Options","D3D12_FEATURE_D3D12_OPTIONS",Ptr(StructRef "D3D12_FEATURE_DATA_D3D12_OPTIONS"), InOutOfSize "FeatureSupportDataSize");
                                                     ("Arch","D3D12_FEATURE_ARCHITECTURE",Ptr(StructRef "D3D12_FEATURE_DATA_ARCHITECTURE"), InOutOfSize "FeatureSupportDataSize");
                                                     ("FeatureLevels","D3D12_FEATURE_FEATURE_LEVELS",Ptr(StructRef "D3D12_FEATURE_DATA_FEATURE_LEVELS"), InOutOfSize "FeatureSupportDataSize");
                                                     ("FormatSupport","D3D12_FEATURE_FORMAT_SUPPORT",Ptr(StructRef "D3D12_FEATURE_DATA_FORMAT_SUPPORT"), InOutOfSize "FeatureSupportDataSize");
                                                     ("MultisampleQualityLevels","D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS",Ptr(StructRef "D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS"), InOutOfSize "FeatureSupportDataSize");
                                                     ("FormatInfo","D3D12_FEATURE_FORMAT_INFO",Ptr(StructRef "D3D12_FEATURE_DATA_FORMAT_INFO"), InOutOfSize "FeatureSupportDataSize");
                                                     ]));
      ("pFeatureSupportData",InOutOfSize "FeatureSupportDataSize");
      ("FeatureSupportDataSize",ANone);
    ],MANone);
    ("CreateDescriptorHeap",[
      ("This",AThis);
      ("pDescriptorHeapDesc",ANone);
      ("riid",ANone);
      ("ppvHeap",OutReturnKnownInterface("riid","D3D12DescriptorHeap"));
    ],MANone);
    ("GetDescriptorHandleIncrementSize",[
      ("This",AThis);
      ("DescriptorHeapType",ANone);
    ],MANone);
    ("CreateRootSignature",[
      ("This",AThis);
      ("nodeMask",ANone);
      ("pBlobWithRootSignature", InByteArrayOfSize ("blobLengthInBytes",1u));
      ("blobLengthInBytes",ANone);
      ("riid",ANone);
      ("ppvRootSignature",OutReturnKnownInterface("riid","D3D12RootSignature"));
    ],MANone);
    ("CreateConstantBufferView",[
      ("This",AThis);
      ("pDesc",InOptional);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CreateShaderResourceView",[
      ("This",AThis);
      ("pResource",InOptional);
      ("pDesc",InOptional);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CreateUnorderedAccessView",[
      ("This",AThis);
      ("pResource",InOptional);
      ("pCounterResource",InOptional);
      ("pDesc",InOptional);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CreateRenderTargetView",[
      ("This",AThis);
      ("pResource",InOptionalComPtr);
      ("pDesc",InOptional);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CreateDepthStencilView",[
      ("This",AThis);
      ("pResource",InOptional);
      ("pDesc",InOptional);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CreateSampler",[
      ("This",AThis);
      ("pDesc",ANone);
      ("DestDescriptor",ANone);
    ],MANone);
    ("CopyDescriptors",[
      ("This",AThis);
      ("NumDestDescriptorRanges",ANone);
      ("pDestDescriptorRangeStarts",InArrayOfSize "NumDestDescriptorRanges");
      ("pDestDescriptorRangeSizes",InOptionalArrayOfSize "NumDestDescriptorRanges");
      ("NumSrcDescriptorRanges",ANone);
      ("pSrcDescriptorRangeStarts",InArrayOfSize "NumSrcDescriptorRanges");
      ("pSrcDescriptorRangeSizes",InOptionalArrayOfSize "NumSrcDescriptorRanges");
      ("DescriptorHeapsType",ANone);
    ],MANone);
    ("CopyDescriptorsSimple",[
      ("This",AThis);
      ("NumDescriptors",ANone);
      ("DestDescriptorRangeStart",ANone);
      ("SrcDescriptorRangeStart",ANone);
      ("DescriptorHeapsType",ANone);
    ],MANone);
    ("GetResourceAllocationInfo",[
      ("This",AThis);
      ("visibleMask",ANone);
      ("numResourceDescs",ANone);
      ("pResourceDescs",InArrayOfSize "numResourceDescs");
    ],MANone);
    ("GetCustomHeapProperties",[
      ("This",AThis);
      ("nodeMask",ANone);
      ("heapType",ANone);
    ],MANone);
    ("CreateCommittedResource",[
      ("This",AThis);
      ("pHeapProperties",ANone);
      ("HeapFlags",ANone);
      ("pResourceDesc",ANone);
      ("InitialResourceState",ANone);
      ("pOptimizedClearValue",InOptional);
      ("riidResource",ANone);
      ("ppvResource",OutReturnKnownInterface("riidResource","D3D12Resource"));
    ],MANone);
    ("CreateHeap",[
      ("This",AThis);
      ("pDesc",ANone);
      ("riid",ANone);
      ("ppvHeap",OutReturnKnownInterface("riid","D3D12Heap"));
    ],MANone);
    ("CreatePlacedResource",[
      ("This",AThis);
      ("pHeap",ANone);
      ("HeapOffset",ANone);
      ("pDesc",ANone);
      ("InitialState",ANone);
      ("pOptimizedClearValue",InOptional);
      ("riid",ANone);
      ("ppvResource",OutReturnKnownInterface("riid","D3D12Resource"));
    ],MANone);
    ("CreateReservedResource",[
      ("This",AThis);
      ("pDesc",ANone);
      ("InitialState",ANone);
      ("pOptimizedClearValue",InOptional);
      ("riid",ANone);
      ("ppvResource",OutReturnKnownInterface("riid","D3D12Resource"));
    ],MANone);
    ("CreateSharedHandle",[
      ("This",AThis);
      ("pObject",ANone);
      ("pAttributes",InOptional);
      ("Access",ANone);
      ("Name",ANone);
      ("pHandle",OutReturn);
    ],MANone);
    ("OpenSharedHandle",[
      ("This",AThis);
      ("NTHandle",ANone);
      ("riid",ANone);
      ("ppvObj",OutReturnInterface("riid"));
    ],MANone);
    ("OpenSharedHandleByName",[
      ("This",AThis);
      ("Name",ANone);
      ("Access",ANone);
      ("pNTHandle",OutReturn);
    ],MANone);
    ("MakeResident",[
      ("This",AThis);
      ("NumObjects",ANone);
      ("ppObjects",InArrayOfSize "NumObjects");
    ],MANone);
    ("Evict",[
      ("This",AThis);
      ("NumObjects",ANone);
      ("ppObjects",InArrayOfSize "NumObjects");
    ],MANone);
    ("CreateFence",[
      ("This",AThis);
      ("InitialValue",ANone);
      ("Flags",ANone);
      ("riid",ANone);
      ("ppFence",OutReturnKnownInterface("riid","D3D12Fence"));
    ],MANone);
    ("GetDeviceRemovedReason",[
      ("This",AThis);
    ],MANone);
    ("GetCopyableFootprints",[
      ("This",AThis);
      ("pResourceDesc",ANone);
      ("FirstSubresource",ANone);
      ("NumSubresources",ANone);
      ("BaseOffset",ANone);
      ("pLayouts", OutOptionalArrayOfSize "NumSubresources");
      ("pNumRows",OutOptionalArrayOfSize "NumSubresources");
      ("pRowSizeInBytes",OutOptionalArrayOfSize "NumSubresources");
      ("pTotalBytes",OutOptional);
    ],MANone);
    ("CreateQueryHeap",[
      ("This",AThis);
      ("pDesc",ANone);
      ("riid",ANone);
      ("ppvHeap",OutReturnKnownInterface("riid","D3D12QueryHeap"));
    ],MANone);
    ("SetStablePowerState",[
      ("This",AThis);
      ("Enable",ANone);
    ],MANone);
    ("CreateCommandSignature",[
      ("This",AThis);
      ("pDesc",ANone);
      ("pRootSignature",InOptional); // Structure needs to be converted (contains pointer)
      ("riid",ANone);
      ("ppvCommandSignature",OutReturnKnownInterface("riid","D3D12CommandSignature"));
    ],MANone);
    ("GetResourceTiling",[
      ("This",AThis);
      ("pTiledResource",InComPtr);
      ("pNumTilesForEntireResource",OutOptional);
      ("pPackedMipDesc",OutOptional);
      ("pStandardTileShapeForNonPackedMips",OutOptional);
      ("pNumSubresourceTilings",InOutOptional);
      ("FirstSubresourceTilingToGet",ANone);
      ("pSubresourceTilingsForNonPackedMips",OutReturn);
    ],MANone);
    ("GetAdapterLuid",[
      ("This",AThis);
      ("__ret_val",OutReturn);
    ],MANone);
  ]);
  ("ID3D12FenceVtbl",IAAutogen, "ID3D12PageableVtbl",  d3d12Object++[
    getDevice;
    ("GetCompletedValue",[
      ("This",AThis);
    ],MANone);
    ("SetEventOnCompletion",[
      ("This",AThis);
      ("Value",ANone);
      ("hEvent",ANone);
    ],MANone);
    ("Signal",[
      ("This",AThis);
      ("Value",ANone);
    ],MANone);
  ]);
  ("ID3D12GraphicsCommandListVtbl",IAAutogen,  "ID3D12CommandListVtbl", d3d12Object++[
    getDevice;
    ("GetType",[
      ("This",AThis);
    ],MANone);
    ("Close",[
      ("This",AThis);
    ],MANone);
    ("Reset",[
      ("This",AThis);
      ("pAllocator",InComPtr);
      ("pInitialState",InOptionalComPtr);
    ],MANone);
    ("ClearState",[
      ("This",AThis);
      ("pPipelineState",InOptionalComPtr);
    ],MANone);
    ("DrawInstanced",[
      ("This",AThis);
      ("VertexCountPerInstance",ANone);
      ("InstanceCount",ANone);
      ("StartVertexLocation",ANone);
      ("StartInstanceLocation",ANone);
    ],MANone);
    ("DrawIndexedInstanced",[
      ("This",AThis);
      ("IndexCountPerInstance",ANone);
      ("InstanceCount",ANone);
      ("StartIndexLocation",ANone);
      ("BaseVertexLocation",ANone);
      ("StartInstanceLocation",ANone);
    ],MANone);
    ("Dispatch",[
      ("This",AThis);
      ("ThreadGroupCountX",ANone);
      ("ThreadGroupCountY",ANone);
      ("ThreadGroupCountZ",ANone);
    ],MANone);
    ("CopyBufferRegion",[
      ("This",AThis);
      ("pDstBuffer",InComPtr);
      ("DstOffset",ANone);
      ("pSrcBuffer",InComPtr);
      ("SrcOffset",ANone);
      ("NumBytes",ANone);
    ],MANone);
    ("CopyTextureRegion",[
      ("This",AThis);
      ("pDst",ANone);
      ("DstX",ANone);
      ("DstY",ANone);
      ("DstZ",ANone);
      ("pSrc",ANone);
      ("pSrcBox",InOptional);
    ],MANone);
    ("CopyResource",[
      ("This",AThis);
      ("pDstResource",InComPtr);
      ("pSrcResource",InComPtr);
    ],MANone);
    ("CopyTiles",[
      ("This",AThis);
      ("pTiledResource",InComPtr);
      ("pTileRegionStartCoordinate",ANone);
      ("pTileRegionSize",ANone);
      ("pBuffer",InComPtr);
      ("BufferStartOffsetInBytes",ANone);
      ("Flags",ANone);
    ],MANone);
    ("ResolveSubresource",[
      ("This",AThis);
      ("pDstResource",InComPtr);
      ("DstSubresource",ANone);
      ("pSrcResource",InComPtr);
      ("SrcSubresource",ANone);
      ("Format",ANone);
    ],MANone);
    ("IASetPrimitiveTopology",[
      ("This",AThis);
      ("PrimitiveTopology",ANone);
    ],MANone);
    ("RSSetViewports",[
      ("This",AThis);
      ("NumViewports",ANone);
      ("pViewports",InArrayOfSize "NumViewports");
    ],MANone);
    ("RSSetScissorRects",[
      ("This",AThis);
      ("NumRects",ANone);
      ("pRects",InArrayOfSize "NumRects");
    ],MANone);
    ("OMSetBlendFactor",[
      ("This",AThis);
      ("BlendFactor",InOptional);
    ],MANone);
    ("OMSetStencilRef",[
      ("This",AThis);
      ("StencilRef",ANone);
    ],MANone);
    ("SetPipelineState",[
      ("This",AThis);
      ("pPipelineState",InComPtr);
    ],MANone);
    ("ResourceBarrier",[
      ("This",AThis);
      ("NumBarriers",ANone);
      ("pBarriers",InArrayOfSize "NumBarriers");
    ],MANone);
    ("ExecuteBundle",[
      ("This",AThis);
      ("pCommandList",InComPtr);
    ],MANone);
    ("SetDescriptorHeaps",[
      ("This",AThis);
      ("NumDescriptorHeaps",ANone);
      ("ppDescriptorHeaps", InComPtrArrayOfSize "NumDescriptorHeaps");
    ],MANone);
    ("SetComputeRootSignature",[
      ("This",AThis);
      ("pRootSignature",InComPtr);
    ],MANone);
    ("SetGraphicsRootSignature",[
      ("This",AThis);
      ("pRootSignature",InComPtr);
    ],MANone);
    ("SetComputeRootDescriptorTable",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BaseDescriptor",ANone);
    ],MANone);
    ("SetGraphicsRootDescriptorTable",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BaseDescriptor",ANone);
    ],MANone);
    ("SetComputeRoot32BitConstant",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("SrcData",ANone);
      ("DestOffsetIn32BitValues",ANone);
    ],MANone);
    ("SetGraphicsRoot32BitConstant",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("SrcData",ANone);
      ("DestOffsetIn32BitValues",ANone);
    ],MANone);
    ("SetComputeRoot32BitConstants",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("Num32BitValuesToSet",ANone);
      ("pSrcData",InByteArrayOfSize("Num32BitValuesToSet",4u));
      ("DestOffsetIn32BitValues",ANone);
    ],MANone);
    ("SetGraphicsRoot32BitConstants",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("Num32BitValuesToSet",ANone);
      ("pSrcData",InByteArrayOfSize("Num32BitValuesToSet",4u));
      ("DestOffsetIn32BitValues",ANone);
    ],MANone);
    ("SetComputeRootConstantBufferView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("SetGraphicsRootConstantBufferView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("SetComputeRootShaderResourceView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("SetGraphicsRootShaderResourceView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("SetComputeRootUnorderedAccessView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("SetGraphicsRootUnorderedAccessView",[
      ("This",AThis);
      ("RootParameterIndex",ANone);
      ("BufferLocation",ANone);
    ],MANone);
    ("IASetIndexBuffer",[
      ("This",AThis);
      ("pView",InOptional);
    ],MANone);
    ("IASetVertexBuffers",[
      ("This",AThis);
      ("StartSlot",ANone);
      ("NumViews",ANone);
      ("pViews",InOptionalArrayOfSize "NumViews");
    ],MANone);
    ("SOSetTargets",[
      ("This",AThis);
      ("StartSlot",ANone);
      ("NumViews",ANone);
      ("pViews",InOptionalArrayOfSize "NumViews");
    ],MANone);
    ("OMSetRenderTargets",[
      ("This",AThis);
      ("NumRenderTargetDescriptors",ANone);
      ("pRenderTargetDescriptors",ANone);
      ("RTsSingleHandleToDescriptorRange", 
        TypeSelector("pRenderTargetDescriptors",[("","TRUE",Ptr(Const(StructRef "D3D12_CPU_DESCRIPTOR_HANDLE")),ANone);
                                                 ("Arr","FALSE",Ptr(Const(StructRef "D3D12_CPU_DESCRIPTOR_HANDLE")),InArrayOfSize "NumRenderTargetDescriptors");]));
      ("pDepthStencilDescriptor",InOptional);
    ],MANone);
    ("ClearDepthStencilView",[
      ("This",AThis);
      ("DepthStencilView",ANone);
      ("ClearFlags",ANone);
      ("Depth",ANone);
      ("Stencil",ANone);
      ("NumRects",ANone);
      ("pRects",InArrayOfSize "NumRects");
    ],MANone);
    ("ClearRenderTargetView",[
      ("This",AThis);
      ("RenderTargetView",ANone);
      ("ColorRGBA",ANone);
      ("NumRects",ANone);
      ("pRects",InArrayOfSize "NumRects");
    ],MANone);
    ("ClearUnorderedAccessViewUint",[
      ("This",AThis);
      ("ViewGPUHandleInCurrentHeap",ANone);
      ("ViewCPUHandle",ANone);
      ("pResource",InComPtr);
      ("Values",ANone);
      ("NumRects",ANone);
      ("pRects",InArrayOfSize "NumRects");
    ],MANone);
    ("ClearUnorderedAccessViewFloat",[
      ("This",AThis);
      ("ViewGPUHandleInCurrentHeap",ANone);
      ("ViewCPUHandle",ANone);
      ("pResource",InComPtr);
      ("Values",ANone);
      ("NumRects",ANone);
      ("pRects",InArrayOfSize "NumRects");
    ],MANone);
    ("DiscardResource",[
      ("This",AThis);
      ("pResource",InComPtr);
      ("pRegion",InOptional);
    ],MANone);
    ("BeginQuery",[
      ("This",AThis);
      ("pQueryHeap",InComPtr);
      ("Type",ANone);
      ("Index",ANone);
    ],MANone);
    ("EndQuery",[
      ("This",AThis);
      ("pQueryHeap",InComPtr);
      ("Type",ANone);
      ("Index",ANone);
    ],MANone);
    ("ResolveQueryData",[
      ("This",AThis);
      ("pQueryHeap",InComPtr);
      ("Type",ANone);
      ("StartIndex",ANone);
      ("NumQueries",ANone);
      ("pDestinationBuffer",InComPtr);
      ("AlignedDestinationBufferOffset",ANone);
    ],MANone);
    ("SetPredication",[
      ("This",AThis);
      ("pBuffer",InOptionalComPtr);
      ("AlignedBufferOffset",ANone);
      ("Operation",ANone);
    ],MANone);
    ("SetMarker",[
      ("This",AThis);
      ("Metadata",ANone);
      ("pData",ANone);
      ("Size",ANone);
    ],MADontImplement);
    ("BeginEvent",[
      ("This",AThis);
      ("Metadata",ANone);
      ("pData",ANone);
      ("Size",ANone);
    ],MADontImplement);
    ("EndEvent",[
      ("This",AThis);
    ],MADontImplement);
    ("ExecuteIndirect",[
      ("This",AThis);
      ("pCommandSignature",InComPtr);
      ("MaxCommandCount",ANone);
      ("pArgumentBuffer",InComPtr);
      ("ArgumentBufferOffset",ANone);
      ("pCountBuffer",InComPtr);
      ("CountBufferOffset",ANone);
    ],MANone);
  ]);
  ("ID3D12HeapVtbl",IAAutogen, "ID3D12PageableVtbl",  d3d12Object++[
    getDevice;
    ("GetDesc",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12InfoQueueVtbl",IAManual, "IUnknownVtbl", [ //TODO: Annotate debug interfaces
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("SetMessageCountLimit",[
      ("This",AThis);
      ("MessageCountLimit",ANone);
    ],MANone);
    ("ClearStoredMessages",[
      ("This",AThis);
    ],MANone);
    ("GetMessage",[
      ("This",AThis);
      ("MessageIndex",ANone);
      ("pMessage",ANone);
      ("pMessageByteLength",ANone);
    ],MANone);
    ("GetNumMessagesAllowedByStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("GetNumMessagesDeniedByStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("GetNumStoredMessages",[
      ("This",AThis);
    ],MANone);
    ("GetNumStoredMessagesAllowedByRetrievalFilter",[
      ("This",AThis);
    ],MANone);
    ("GetNumMessagesDiscardedByMessageCountLimit",[
      ("This",AThis);
    ],MANone);
    ("GetMessageCountLimit",[
      ("This",AThis);
    ],MANone);
    ("AddStorageFilterEntries",[
      ("This",AThis);
      ("pFilter",ANone);
    ],MANone);
    ("GetStorageFilter",[
      ("This",AThis);
      ("pFilter",ANone);
      ("pFilterByteLength",ANone);
    ],MANone);
    ("ClearStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("PushEmptyStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("PushCopyOfStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("PushStorageFilter",[
      ("This",AThis);
      ("pFilter",ANone);
    ],MANone);
    ("PopStorageFilter",[
      ("This",AThis);
    ],MANone);
    ("GetStorageFilterStackSize",[
      ("This",AThis);
    ],MANone);
    ("AddRetrievalFilterEntries",[
      ("This",AThis);
      ("pFilter",ANone);
    ],MANone);
    ("GetRetrievalFilter",[
      ("This",AThis);
      ("pFilter",ANone);
      ("pFilterByteLength",ANone);
    ],MANone);
    ("ClearRetrievalFilter",[
      ("This",AThis);
    ],MANone);
    ("PushEmptyRetrievalFilter",[
      ("This",AThis);
    ],MANone);
    ("PushCopyOfRetrievalFilter",[
      ("This",AThis);
    ],MANone);
    ("PushRetrievalFilter",[
      ("This",AThis);
      ("pFilter",ANone);
    ],MANone);
    ("PopRetrievalFilter",[
      ("This",AThis);
    ],MANone);
    ("GetRetrievalFilterStackSize",[
      ("This",AThis);
    ],MANone);
    ("AddMessage",[
      ("This",AThis);
      ("Category",ANone);
      ("Severity",ANone);
      ("ID",ANone);
      ("pDescription",ANone);
    ],MANone);
    ("AddApplicationMessage",[
      ("This",AThis);
      ("Severity",ANone);
      ("pDescription",ANone);
    ],MANone);
    ("SetBreakOnCategory",[
      ("This",AThis);
      ("Category",ANone);
      ("bEnable",ANone);
    ],MANone);
    ("SetBreakOnSeverity",[
      ("This",AThis);
      ("Severity",ANone);
      ("bEnable",ANone);
    ],MANone);
    ("SetBreakOnID",[
      ("This",AThis);
      ("ID",ANone);
      ("bEnable",ANone);
    ],MANone);
    ("GetBreakOnCategory",[
      ("This",AThis);
      ("Category",ANone);
    ],MANone);
    ("GetBreakOnSeverity",[
      ("This",AThis);
      ("Severity",ANone);
    ],MANone);
    ("GetBreakOnID",[
      ("This",AThis);
      ("ID",ANone);
    ],MANone);
    ("SetMuteDebugOutput",[
      ("This",AThis);
      ("bMute",ANone);
    ],MANone);
    ("GetMuteDebugOutput",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12ObjectVtbl",IAAutogen,  "IUnknownVtbl", d3d12Object);
  ("ID3D12PageableVtbl",IAAutogen,  "ID3D12ObjectVtbl",  d3d12Object++[
    getDevice;
  ]);
  ("ID3D12PipelineStateVtbl",IAAutogen, "ID3D12PageableVtbl",  d3d12Object++[
    getDevice;
    ("GetCachedBlob",[
      ("This",AThis);
      ("ppBlob",OutReturnComPtr); // TODO: do something with typedefs like 'typedef ID3D10Blob ID3DBlob;' E.g. type D3DBlob=D3D10Blob;
    ],MADontImplement); // TODO: do todo above, then replace with MANone
  ]);
  ("ID3D12QueryHeapVtbl",IAAutogen, "ID3D12PageableVtbl",  d3d12Object++[
    getDevice;
  ]);
  ("ID3D12ResourceVtbl",IAAutogen, "ID3D12PageableVtbl",  d3d12Object++[
    getDevice;
    ("Map",[
      ("This",AThis);
      ("Subresource",ANone);
      ("pReadRange",InOptional);
      ("ppData",ANone);
    ],MADontImplement); // TODO: Mapping and unmapping call for RAII guards
    ("Unmap",[
      ("This",AThis);
      ("Subresource",ANone);
      ("pWrittenRange",ANone);
    ],MADontImplement); // TODO: Find some way of dealing with unbounded memory areas in safe rust
    ("GetDesc",[
      ("This",AThis);
    ],MANone);
    ("GetGPUVirtualAddress",[
      ("This",AThis);
    ],MANone);
    ("WriteToSubresource",[
      ("This",AThis);
      ("DstSubresource",ANone);
      ("pDstBox",InOptional);
      ("pSrcData",ANone);
      ("SrcRowPitch",ANone);
      ("SrcDepthPitch",ANone);
    ],MADontImplement); // TODO: Unsafe. Method can read past the end of provided buffer
    ("ReadFromSubresource",[
      ("This",AThis);
      ("pDstData",ANone);
      ("DstRowPitch",ANone);
      ("DstDepthPitch",ANone);
      ("SrcSubresource",ANone);
      ("pSrcBox",ANone);
    ],MADontImplement); // TODO: Unsafe. Method doesn't take size of output buffer
    ("GetHeapProperties",[
      ("This",AThis);
      ("pHeapProperties",OutOptional);
      ("pHeapFlags",OutOptional);
    ],MANone);
  ]);
  ("ID3D12RootSignatureDeserializerVtbl",IAAutogen, "IUnknownVtbl", [
    ("QueryInterface",[],MAIUnknown);
    ("AddRef",[],MAIUnknown);
    ("Release",[],MAIUnknown);
    ("GetRootSignatureDesc",[
      ("This",AThis);
    ],MANone);
  ]);
  ("ID3D12RootSignatureVtbl",IAAutogen, "ID3D12DeviceChildVtbl",  d3d12Object++[
    getDevice;
  ]);
  ("ID3DIncludeVtbl",IAManual, "IUnknown", [
    ("Open",[
      ("This",AThis);
      ("IncludeType",ANone);
      ("pFileName",ANone);
      ("pParentData",ANone);
      ("ppData",ANone);
      ("pBytes",ANone);
    ],MANone);
    ("Close",[
      ("This",AThis);
      ("pData",ANone);
    ],MANone);
  ]);
  ("IDXGIAdapter1Vtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("EnumOutputs",[
      ("This",AThis);
      ("Output",ANone);
      ("ppOutput", OutReturnComPtr);
    ],MANone);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("CheckInterfaceSupport",[
      ("This",AThis);
      ("InterfaceName",ANone);
      ("pUMDVersion",OutReturn);
    ],MANone);
    ("GetDesc1",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
  ]);
  ("IDXGIAdapterVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("EnumOutputs",[
      ("This",AThis);
      ("Output",ANone);
      ("ppOutput",OutReturnComPtr);
    ],MANone);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("CheckInterfaceSupport",[
      ("This",AThis);
      ("InterfaceName",ANone);
      ("pUMDVersion",OutReturn);
    ],MANone);
  ]);
  ("IDXGIDevice1Vtbl",IAAutogen, "IDXGIDeviceVtbl", dxgiDevice ++ [
    ("SetMaximumFrameLatency",[
      ("This",AThis);
      ("MaxLatency",ANone);
    ],MANone);
    ("GetMaximumFrameLatency",[
      ("This",AThis);
      ("pMaxLatency",OutReturn);
    ],MANone);
  ]);
  ("IDXGIDeviceSubObjectVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",ANone); // I cannot understand what MSDN says about this. TODO: Find out
    ],MADontImplement);
  ]);
  ("IDXGIDeviceVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiDevice);
  ("IDXGIFactory1Vtbl",IAAutogen, "IDXGIFactoryVtbl", dxgiFactory ++ [
    ("EnumAdapters1",[
      ("This",AThis);
      ("Adapter",ANone);
      ("ppAdapter",OutReturnComPtr);
    ],MANone);
    ("IsCurrent",[
      ("This",AThis);
    ],MANone);
  ]);
  ("IDXGIFactoryVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiFactory);
  ("IDXGIKeyedMutexVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",OutReturnInterface "riid"); 
    ],MADontImplement);
    ("AcquireSync",[
      ("This",AThis);
      ("Key",ANone);
      ("dwMilliseconds",ANone);
    ],MANone);
    ("ReleaseSync",[
      ("This",AThis);
      ("Key",ANone);
    ],MANone);
  ]);
  ("IDXGIObjectVtbl",IAAutogen, "IUnknown", 
    dxgiObject
  );
  ("IDXGIOutputVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("GetDisplayModeList",[
      ("This",AThis);
      ("EnumFormat",ANone);
      ("Flags",ANone);
      ("pNumModes",InOutReturn);
      ("pDesc",OutOptionalArrayOfSize "pNumModes");
    ],MANone);
    ("FindClosestMatchingMode",[
      ("This",AThis);
      ("pModeToMatch",ANone);
      ("pClosestMatch",OutReturn);
      ("pConcernedDevice",InOptionalComPtr);
    ],MANone);
    ("WaitForVBlank",[
      ("This",AThis);
    ],MANone);
    ("TakeOwnership",[
      ("This",AThis);
      ("pDevice",InComPtr);
      ("Exclusive",ANone);
    ],MANone);
    ("ReleaseOwnership",[
      ("This",AThis);
    ],MANone);
    ("GetGammaControlCapabilities",[
      ("This",AThis);
      ("pGammaCaps",OutReturn);
    ],MANone);
    ("SetGammaControl",[
      ("This",AThis);
      ("pArray",ANone);
    ],MANone);
    ("GetGammaControl",[
      ("This",AThis);
      ("pArray",OutReturn);
    ],MANone);
    ("SetDisplaySurface",[
      ("This",AThis);
      ("pScanoutSurface",InComPtr);
    ],MANone);
    ("GetDisplaySurfaceData",[
      ("This",AThis);
      ("pDestination",InComPtr);
    ],MANone);
    ("GetFrameStatistics",[
      ("This",AThis);
      ("pStats",OutReturn);
    ],MANone);
  ]);
  ("IDXGIResourceVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",OutReturnInterface "riid"); 
    ],MADontImplement);
    ("GetSharedHandle",[
      ("This",AThis);
      ("pSharedHandle",OutReturn);
    ],MANone);
    ("GetUsage",[
      ("This",AThis);
      ("pUsage",OutReturn);
    ],MANone);
    ("SetEvictionPriority",[
      ("This",AThis);
      ("EvictionPriority",ANone);
    ],MANone);
    ("GetEvictionPriority",[
      ("This",AThis);
      ("pEvictionPriority",OutReturn);
    ],MANone);
  ]);
  ("IDXGISurface1Vtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",OutReturnInterface "riid");
    ],MADontImplement);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("Map",[
      ("This",AThis);
      ("pLockedRect",OutReturn);
      ("MapFlags",ANone);
    ],MANone);
    ("Unmap",[
      ("This",AThis);
    ],MANone);
    ("GetDC",[
      ("This",AThis);
      ("Discard",ANone);
      ("phdc",OutReturn);
    ],MANone);
    ("ReleaseDC",[
      ("This",AThis);
      ("pDirtyRect",InOptional);
    ],MANone);
  ]);
  ("IDXGISurfaceVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",OutReturnInterface "riid"); 
    ],MADontImplement);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("Map",[
      ("This",AThis);
      ("pLockedRect",OutReturn);
      ("MapFlags",ANone);
    ],MANone);
    ("Unmap",[
      ("This",AThis);
    ],MANone);
  ]);
  ("IDXGISwapChainVtbl",IAAutogen, "IDXGIObjectVtbl", dxgiObject ++ [
    ("GetDevice",[
      ("This",AThis);
      ("riid",ANone);
      ("ppDevice",OutReturnInterface "riid");
    ],MADontImplement);
    ("Present",[
      ("This",AThis);
      ("SyncInterval",ANone);
      ("Flags",ANone);
    ],MANone);
    ("GetBuffer",[
      ("This",AThis);
      ("Buffer",ANone);
      ("riid",ANone);
      ("ppSurface",OutReturnInterface "riid");
    ],MANone);
    ("SetFullscreenState",[
      ("This",AThis);
      ("Fullscreen",ANone);
      ("pTarget",InOptionalComPtr);
    ],MANone);
    ("GetFullscreenState",[
      ("This",AThis);
      ("pFullscreen",AConst "ptr::null_mut()"); // This parameter can be ignored. Good case for AConst "ptr::null_mut()". OTOH why it is here? TODO: Investigate
      ("ppTarget",ANone); // TODO: Implement OutOptionalComPtr, or OutOptionalReturnComPtr. 
    ],MANone);
    ("GetDesc",[
      ("This",AThis);
      ("pDesc",OutReturn);
    ],MANone);
    ("ResizeBuffers",[
      ("This",AThis);
      ("BufferCount",ANone);
      ("Width",ANone);
      ("Height",ANone);
      ("NewFormat",ANone);
      ("SwapChainFlags",ANone);
    ],MANone);
    ("ResizeTarget",[
      ("This",AThis);
      ("pNewTargetParameters",ANone);
    ],MANone);
    ("GetContainingOutput",[
      ("This",AThis);
      ("ppOutput",OutReturnComPtr);
    ],MANone);
    ("GetFrameStatistics",[
      ("This",AThis);
      ("pStats",OutReturn);
    ],MANone);
    ("GetLastPresentCount",[
      ("This",AThis);
      ("pLastPresentCount",OutReturn);
    ],MANone);
  ]);
  ("IUnknown",IAManual,"",[
    ]);
  ("SECURITY_ATTRIBUTES",IAManual,"",[
    ]);
  ]

let enum_annotations=
  [
    ("D3D12_BLEND",EAEnum);
    ("D3D12_BLEND_OP",EAEnum);
    ("D3D12_BUFFER_SRV_FLAGS",EAFlags);
    ("D3D12_BUFFER_UAV_FLAGS",EAFlags);
    ("D3D12_CLEAR_FLAGS",EAFlags);
    ("D3D12_COLOR_WRITE_ENABLE",EAFlags);
    ("D3D12_COMMAND_LIST_TYPE",EAEnum);
    ("D3D12_COMMAND_QUEUE_FLAGS",EAFlags);
    ("D3D12_COMMAND_QUEUE_PRIORITY",EAEnum);
    ("D3D12_COMPARISON_FUNC",EAEnum);
    ("D3D12_CONSERVATIVE_RASTERIZATION_MODE",EAEnum);
    ("D3D12_CONSERVATIVE_RASTERIZATION_TIER",EAEnum);
    ("D3D12_CPU_PAGE_PROPERTY",EAEnum);
    ("D3D12_CROSS_NODE_SHARING_TIER",EAEnum);
    ("D3D12_CULL_MODE",EAEnum);
    ("D3D12_DEBUG_FEATURE",EAEnum);
    ("D3D12_DEPTH_WRITE_MASK",EAEnum);
    ("D3D12_DESCRIPTOR_HEAP_FLAGS",EAFlags);
    ("D3D12_DESCRIPTOR_HEAP_TYPE",EAEnum);
    ("D3D12_DESCRIPTOR_RANGE_TYPE",EAEnum);
    ("D3D12_DSV_DIMENSION",EAEnum);
    ("D3D12_DSV_FLAGS",EAFlags);
    ("D3D12_FEATURE",EAEnum);
    ("D3D12_FENCE_FLAGS",EAFlags);
    ("D3D12_FILL_MODE",EAEnum);
    ("D3D12_FILTER",EAEnum);
    ("D3D12_FILTER_REDUCTION_TYPE",EAEnum);
    ("D3D12_FILTER_TYPE",EAEnum);
    ("D3D12_FORMAT_SUPPORT1",EAFlags);
    ("D3D12_FORMAT_SUPPORT2",EAFlags);
    ("D3D12_HEAP_FLAGS",EAEnum);
    ("D3D12_HEAP_TYPE",EAEnum);
    ("D3D12_INDEX_BUFFER_STRIP_CUT_VALUE",EAEnum);
    ("D3D12_INDIRECT_ARGUMENT_TYPE",EAEnum);
    ("D3D12_INPUT_CLASSIFICATION",EAEnum);
    ("D3D12_LOGIC_OP",EAEnum);
    ("D3D12_MEMORY_POOL",EAEnum);
    ("D3D12_MESSAGE_CATEGORY",EAEnum);
    ("D3D12_MESSAGE_ID",EAEnum);
    ("D3D12_MESSAGE_SEVERITY",EAEnum);
    ("D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS",EAFlags);
    ("D3D12_PIPELINE_STATE_FLAGS",EAFlags);
    ("D3D12_PREDICATION_OP",EAEnum);
    ("D3D12_PRIMITIVE_TOPOLOGY_TYPE",EAEnum);
    ("D3D12_QUERY_HEAP_TYPE",EAEnum);
    ("D3D12_QUERY_TYPE",EAEnum);
    ("D3D12_RESOURCE_BARRIER_FLAGS",EAFlags);
    ("D3D12_RESOURCE_BARRIER_TYPE",EAEnum);
    ("D3D12_RESOURCE_BINDING_TIER",EAEnum);
    ("D3D12_RESOURCE_DIMENSION",EAEnum);
    ("D3D12_RESOURCE_FLAGS",EAFlags);
    ("D3D12_RESOURCE_HEAP_TIER",EAEnum);
    ("D3D12_RESOURCE_STATES",EAEnum);
    ("D3D12_RLDO_FLAGS",EAFlags);
    ("D3D12_ROOT_PARAMETER_TYPE",EAEnum);
    ("D3D12_ROOT_SIGNATURE_FLAGS",EAFlags);
    ("D3D12_RTV_DIMENSION",EAEnum);
    ("D3D12_SHADER_COMPONENT_MAPPING",EAEnum);
    ("D3D12_SHADER_MIN_PRECISION_SUPPORT",EAEnum);
    ("D3D12_SHADER_VISIBILITY",EAEnum);
    ("D3D12_SRV_DIMENSION",EAEnum);
    ("D3D12_STATIC_BORDER_COLOR",EAEnum);
    ("D3D12_STENCIL_OP",EAEnum);
    ("D3D12_TEXTURE_ADDRESS_MODE",EAEnum);
    ("D3D12_TEXTURE_COPY_TYPE",EAEnum);
    ("D3D12_TEXTURE_LAYOUT",EAEnum);
    ("D3D12_TILED_RESOURCES_TIER",EAEnum);
    ("D3D12_TILE_COPY_FLAGS",EAFlags);
    ("D3D12_TILE_MAPPING_FLAGS",EAFlags);
    ("D3D12_TILE_RANGE_FLAGS",EAFlags);
    ("D3D12_UAV_DIMENSION",EAEnum);
    ("D3D_DRIVER_TYPE",EAEnum);
    ("D3D_FEATURE_LEVEL",EAEnum);
    ("D3D_INTERPOLATION_MODE",EAEnum);
    ("D3D_MIN_PRECISION",EAEnum);
    ("D3D_NAME",EAEnum);
    ("D3D_PRIMITIVE",EAEnum);
    ("D3D_PRIMITIVE_TOPOLOGY",EAEnum);
    ("D3D_REGISTER_COMPONENT_TYPE",EAEnum);
    ("D3D_RESOURCE_RETURN_TYPE",EAEnum);
    ("D3D_ROOT_SIGNATURE_VERSION",EAEnum);
    ("D3D_SRV_DIMENSION",EAEnum);
    ("D3D_TESSELLATOR_DOMAIN",EAEnum);
    ("D3D_TESSELLATOR_OUTPUT_PRIMITIVE",EAEnum);
    ("D3D_TESSELLATOR_PARTITIONING",EAEnum);
    ("DXGI_ADAPTER_FLAG",EAFlags);
    ("DXGI_COLOR_SPACE_TYPE",EAEnum);
    ("DXGI_FORMAT",EAEnum);
    ("DXGI_MODE_ROTATION",EAEnum);
    ("DXGI_MODE_SCALING",EAEnum);
    ("DXGI_MODE_SCANLINE_ORDER",EAEnum);
    ("DXGI_RESIDENCY",EAEnum);
    ("DXGI_SWAP_CHAIN_FLAG",EAFlags);
    ("DXGI_SWAP_EFFECT",EAEnum);
    ("_D3D_CBUFFER_TYPE",EAEnum);
    ("_D3D_INCLUDE_TYPE",EAEnum);
    ("_D3D_PARAMETER_FLAGS",EAEnum);
    ("_D3D_SHADER_CBUFFER_FLAGS",EAEnum);
    ("_D3D_SHADER_INPUT_FLAGS",EAFlags);
    ("_D3D_SHADER_INPUT_TYPE",EAEnum);
    ("_D3D_SHADER_VARIABLE_CLASS",EAEnum);
    ("_D3D_SHADER_VARIABLE_FLAGS",EAFlags);
    ("_D3D_SHADER_VARIABLE_TYPE",EAEnum);
      ] |> Map.ofList

let d3d12structs=
  [
    ("D3D12_BLEND_DESC",StructFlags.DeriveCopy ||| StructFlags.DeriveDebug ||| StructFlags.DeriveDefault,[
      ("AlphaToCoverageEnable",FANone);
      ("IndependentBlendEnable",FANone);
      ("RenderTarget",FANone);
      ]);
    ("D3D12_BOX",StructFlags.None,[
      ("left",FANone);
      ("top",FANone);
      ("front",FANone);
      ("right",FANone);
      ("bottom",FANone);
      ("back",FANone);
      ]);
    ("D3D12_BUFFER_RTV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ]);
    ("D3D12_BUFFER_SRV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ("StructureByteStride",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_BUFFER_UAV",StructFlags.None,[
      ("FirstElement",FANone);
      ("NumElements",FANone);
      ("StructureByteStride",FANone);
      ("CounterOffsetInBytes",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_CACHED_PIPELINE_STATE",StructFlags.None,[
      ("pCachedBlob",FANone);
      ("CachedBlobSizeInBytes",FANone);
      ]);
    ("D3D12_CLEAR_VALUE",StructFlags.None,[
      ("Format",FANone);
      ]);
    ("D3D12_COMMAND_QUEUE_DESC",StructFlags.DeriveDefault,[
      ("Type",FANone);
      ("Priority",FANone);
      ("Flags",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_COMMAND_SIGNATURE_DESC",StructFlags.None,[
      ("ByteStride",FANone);
      ("NumArgumentDescs",FANone);
      ("pArgumentDescs",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_COMPUTE_PIPELINE_STATE_DESC",StructFlags.None,[
      ("pRootSignature",FANone);
      ("CS",FANone);
      ("NodeMask",FANone);
      ("CachedPSO",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_CONSTANT_BUFFER_VIEW_DESC",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ]);
    ("D3D12_CPU_DESCRIPTOR_HANDLE",StructFlags.DeriveCopy,[
      ("ptr",FANone);
      ]);
    ("D3D12_DEPTH_STENCILOP_DESC",StructFlags.None,[
      ("StencilFailOp",FANone);
      ("StencilDepthFailOp",FANone);
      ("StencilPassOp",FANone);
      ("StencilFunc",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_DESC",StructFlags.None,[
      ("DepthEnable",FANone);
      ("DepthWriteMask",FANone);
      ("DepthFunc",FANone);
      ("StencilEnable",FANone);
      ("StencilReadMask",FANone);
      ("StencilWriteMask",FANone);
      ("FrontFace",FANone);
      ("BackFace",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_VALUE",StructFlags.None,[
      ("Depth",FANone);
      ("Stencil",FANone);
      ]);
    ("D3D12_DEPTH_STENCIL_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_DESCRIPTOR_HEAP_DESC",StructFlags.None,[
      ("Type",FANone);
      ("NumDescriptors",FANone);
      ("Flags",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_DESCRIPTOR_RANGE",StructFlags.None,[
      ("RangeType",FANone);
      ("NumDescriptors",FANone);
      ("BaseShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("OffsetInDescriptorsFromTableStart",FANone);
      ]);
    ("D3D12_DISCARD_REGION",StructFlags.None,[
      ("NumRects",FANone);
      ("pRects",FANone);
      ("FirstSubresource",FANone);
      ("NumSubresources",FANone);
      ]);
    ("D3D12_DISPATCH_ARGUMENTS",StructFlags.None,[
      ("ThreadGroupCountX",FANone);
      ("ThreadGroupCountY",FANone);
      ("ThreadGroupCountZ",FANone);
      ]);
    ("D3D12_DRAW_ARGUMENTS",StructFlags.None,[
      ("VertexCountPerInstance",FANone);
      ("InstanceCount",FANone);
      ("StartVertexLocation",FANone);
      ("StartInstanceLocation",FANone);
      ]);
    ("D3D12_DRAW_INDEXED_ARGUMENTS",StructFlags.None,[
      ("IndexCountPerInstance",FANone);
      ("InstanceCount",FANone);
      ("StartIndexLocation",FANone);
      ("BaseVertexLocation",FANone);
      ("StartInstanceLocation",FANone);
      ]);
    ("D3D12_FEATURE_DATA_ARCHITECTURE",StructFlags.None,[
      ("NodeIndex",FANone);
      ("TileBasedRenderer",FANone);
      ("UMA",FANone);
      ("CacheCoherentUMA",FANone);
      ]);
    ("D3D12_FEATURE_DATA_D3D12_OPTIONS",StructFlags.DeriveDefault,[
      ("DoublePrecisionFloatShaderOps",FANone);
      ("OutputMergerLogicOp",FANone);
      ("MinPrecisionSupport",FANone);
      ("TiledResourcesTier",FANone);
      ("ResourceBindingTier",FANone);
      ("PSSpecifiedStencilRefSupported",FANone);
      ("TypedUAVLoadAdditionalFormats",FANone);
      ("ROVsSupported",FANone);
      ("ConservativeRasterizationTier",FANone);
      ("MaxGPUVirtualAddressBitsPerResource",FANone);
      ("StandardSwizzle64KBSupported",FANone);
      ("CrossNodeSharingTier",FANone);
      ("CrossAdapterRowMajorTextureSupported",FANone);
      ("VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation",FANone);
      ("ResourceHeapTier",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FEATURE_LEVELS",StructFlags.None,[
      ("NumFeatureLevels",FANone);
      ("pFeatureLevelsRequested",FANone);
      ("MaxSupportedFeatureLevel",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FORMAT_INFO",StructFlags.None,[
      ("Format",FANone);
      ("PlaneCount",FANone);
      ]);
    ("D3D12_FEATURE_DATA_FORMAT_SUPPORT",StructFlags.None,[
      ("Format",FANone);
      ("Support1",FANone);
      ("Support2",FANone);
      ]);
    ("D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT",StructFlags.None,[
      ("MaxGPUVirtualAddressBitsPerResource",FANone);
      ("MaxGPUVirtualAddressBitsPerProcess",FANone);
      ]);
    ("D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS",StructFlags.None,[
      ("Format",FANone);
      ("SampleCount",FANone);
      ("Flags",FANone);
      ("NumQualityLevels",FANone);
      ]);
    ("D3D12_GPU_DESCRIPTOR_HANDLE",StructFlags.None,[
      ("ptr",FANone);
      ]);
    ("D3D12_GRAPHICS_PIPELINE_STATE_DESC",StructFlags.None,[
      ("pRootSignature",FANone);
      ("VS",FANone);
      ("PS",FANone);
      ("DS",FANone);
      ("HS",FANone);
      ("GS",FANone);
      ("StreamOutput",FANone);
      ("BlendState",FANone);
      ("SampleMask",FANone);
      ("RasterizerState",FANone);
      ("DepthStencilState",FANone);
      ("InputLayout",FANone);
      ("IBStripCutValue",FANone);
      ("PrimitiveTopologyType",FANone);
      ("NumRenderTargets",FANone);
      ("RTVFormats",FANone);
      ("DSVFormat",FANone);
      ("SampleDesc",FANone);
      ("NodeMask",FANone);
      ("CachedPSO",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_HEAP_DESC",StructFlags.None,[
      ("SizeInBytes",FANone);
      ("Properties",FANone);
      ("Alignment",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_HEAP_PROPERTIES",StructFlags.None,[
      ("Type",FANone);
      ("CPUPageProperty",FANone);
      ("MemoryPoolPreference",FANone);
      ("CreationNodeMask",FANone);
      ("VisibleNodeMask",FANone);
      ]);
    ("D3D12_INDEX_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("Format",FANone);
      ]);
    ("D3D12_INDIRECT_ARGUMENT_DESC",StructFlags.None,[
      ("Type",FANone);
      ]);
    ("D3D12_INFO_QUEUE_FILTER",StructFlags.None,[
      ("AllowList",FANone);
      ("DenyList",FANone);
      ]);
    ("D3D12_INFO_QUEUE_FILTER_DESC",StructFlags.None,[
      ("NumCategories",FANone);
      ("pCategoryList",FANone);
      ("NumSeverities",FANone);
      ("pSeverityList",FANone);
      ("NumIDs",FANone);
      ("pIDList",FANone);
      ]);
    ("D3D12_INPUT_ELEMENT_DESC",StructFlags.None,[
      ("SemanticName",FANone);
      ("SemanticIndex",FANone);
      ("Format",FANone);
      ("InputSlot",FANone);
      ("AlignedByteOffset",FANone);
      ("InputSlotClass",FANone);
      ("InstanceDataStepRate",FANone);
      ]);
    ("D3D12_INPUT_LAYOUT_DESC",StructFlags.None,[
      ("pInputElementDescs",FANone);
      ("NumElements",FANone);
      ]);
    ("D3D12_MEMCPY_DEST",StructFlags.None,[
      ("pData",FANone);
      ("RowPitch",FANone);
      ("SlicePitch",FANone);
      ]);
    ("D3D12_MESSAGE",StructFlags.None,[
      ("Category",FANone);
      ("Severity",FANone);
      ("ID",FANone);
      ("pDescription",FANone);
      ("DescriptionByteLength",FANone);
      ]);
    ("D3D12_PACKED_MIP_INFO",StructFlags.None,[
      ("NumStandardMips",FANone);
      ("NumPackedMips",FANone);
      ("NumTilesForPackedMips",FANone);
      ("StartTileIndexInOverallResource",FANone);
      ]);
    ("D3D12_PLACED_SUBRESOURCE_FOOTPRINT",StructFlags.None,[
      ("Offset",FANone);
      ("Footprint",FANone);
      ]);
    ("D3D12_QUERY_DATA_PIPELINE_STATISTICS",StructFlags.None,[
      ("IAVertices",FANone);
      ("IAPrimitives",FANone);
      ("VSInvocations",FANone);
      ("GSInvocations",FANone);
      ("GSPrimitives",FANone);
      ("CInvocations",FANone);
      ("CPrimitives",FANone);
      ("PSInvocations",FANone);
      ("HSInvocations",FANone);
      ("DSInvocations",FANone);
      ("CSInvocations",FANone);
      ]);
    ("D3D12_QUERY_DATA_SO_STATISTICS",StructFlags.None,[
      ("NumPrimitivesWritten",FANone);
      ("PrimitivesStorageNeeded",FANone);
      ]);
    ("D3D12_QUERY_HEAP_DESC",StructFlags.None,[
      ("Type",FANone);
      ("Count",FANone);
      ("NodeMask",FANone);
      ]);
    ("D3D12_RANGE",StructFlags.None,[
      ("Begin",FANone);
      ("End",FANone);
      ]);
    ("D3D12_RASTERIZER_DESC",StructFlags.None,[
      ("FillMode",FANone);
      ("CullMode",FANone);
      ("FrontCounterClockwise",FANone);
      ("DepthBias",FANone);
      ("DepthBiasClamp",FANone);
      ("SlopeScaledDepthBias",FANone);
      ("DepthClipEnable",FANone);
      ("MultisampleEnable",FANone);
      ("AntialiasedLineEnable",FANone);
      ("ForcedSampleCount",FANone);
      ("ConservativeRaster",FANone);
      ]);
    ("D3D12_RENDER_TARGET_BLEND_DESC",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy ||| StructFlags.DeriveDebug ,[
      ("BlendEnable",FANone);
      ("LogicOpEnable",FANone);
      ("SrcBlend",FANone);
      ("DestBlend",FANone);
      ("BlendOp",FANone);
      ("SrcBlendAlpha",FANone);
      ("DestBlendAlpha",FANone);
      ("BlendOpAlpha",FANone);
      ("LogicOp",FANone);
      ("RenderTargetWriteMask",FANone);
      ]);
    ("D3D12_RENDER_TARGET_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ]);
    ("D3D12_RESOURCE_ALIASING_BARRIER",StructFlags.None,[
      ("pResourceBefore",FANone);
      ("pResourceAfter",FANone);
      ]);
    ("D3D12_RESOURCE_ALLOCATION_INFO",StructFlags.None,[
      ("SizeInBytes",FANone);
      ("Alignment",FANone);
      ]);
    ("D3D12_RESOURCE_BARRIER",StructFlags.None,[
      ("Type",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_RESOURCE_DESC",StructFlags.None,[
      ("Dimension",FANone);
      ("Alignment",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("DepthOrArraySize",FANone);
      ("MipLevels",FANone);
      ("Format",FANone);
      ("SampleDesc",FANone);
      ("Layout",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_RESOURCE_TRANSITION_BARRIER",StructFlags.None,[
      ("pResource",FANone);
      ("Subresource",FANone);
      ("StateBefore",FANone);
      ("StateAfter",FANone);
      ]);
    ("D3D12_RESOURCE_UAV_BARRIER",StructFlags.None,[
      ("pResource",FANone);
      ]);
    ("D3D12_ROOT_CONSTANTS",StructFlags.None,[
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("Num32BitValues",FANone);
      ]);
    ("D3D12_ROOT_DESCRIPTOR",StructFlags.None,[
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ]);
    ("D3D12_ROOT_DESCRIPTOR_TABLE",StructFlags.None,[
      ("NumDescriptorRanges",FANone);
      ("pDescriptorRanges",FANone);
      ]);
    ("D3D12_ROOT_PARAMETER",StructFlags.None,[
      ("ParameterType",FANone);
      ("ShaderVisibility",FANone);
      ]);
    ("D3D12_ROOT_SIGNATURE_DESC",StructFlags.None,[
      ("NumParameters",FANone);
      ("pParameters",FANone);
      ("NumStaticSamplers",FANone);
      ("pStaticSamplers",FANone);
      ("Flags",FANone);
      ]);
    ("D3D12_SAMPLER_DESC",StructFlags.None,[
      ("Filter",FANone);
      ("AddressU",FANone);
      ("AddressV",FANone);
      ("AddressW",FANone);
      ("MipLODBias",FANone);
      ("MaxAnisotropy",FANone);
      ("ComparisonFunc",FANone);
      ("BorderColor",FANone);
      ("MinLOD",FANone);
      ("MaxLOD",FANone);
      ]);
    ("D3D12_SHADER_BYTECODE",StructFlags.None,[
      ("pShaderBytecode",FANone);
      ("BytecodeLength",FANone);
      ]);
    ("D3D12_SHADER_RESOURCE_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ("Shader4ComponentMapping",FANone);
      ]);
    ("D3D12_SO_DECLARATION_ENTRY",StructFlags.None,[
      ("Stream",FANone);
      ("SemanticName",FANone);
      ("SemanticIndex",FANone);
      ("StartComponent",FANone);
      ("ComponentCount",FANone);
      ("OutputSlot",FANone);
      ]);
    ("D3D12_STATIC_SAMPLER_DESC",StructFlags.None,[
      ("Filter",FANone);
      ("AddressU",FANone);
      ("AddressV",FANone);
      ("AddressW",FANone);
      ("MipLODBias",FANone);
      ("MaxAnisotropy",FANone);
      ("ComparisonFunc",FANone);
      ("BorderColor",FANone);
      ("MinLOD",FANone);
      ("MaxLOD",FANone);
      ("ShaderRegister",FANone);
      ("RegisterSpace",FANone);
      ("ShaderVisibility",FANone);
      ]);
    ("D3D12_STREAM_OUTPUT_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("BufferFilledSizeLocation",FANone);
      ]);
    ("D3D12_STREAM_OUTPUT_DESC",StructFlags.None,[
      ("pSODeclaration",FANone);
      ("NumEntries",FANone);
      ("pBufferStrides",FANone);
      ("NumStrides",FANone);
      ("RasterizedStream",FANone);
      ]);
    ("D3D12_SUBRESOURCE_DATA",StructFlags.None,[
      ("pData",FANone);
      ("RowPitch",FANone);
      ("SlicePitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_FOOTPRINT",StructFlags.None,[
      ("Format",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("Depth",FANone);
      ("RowPitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_INFO",StructFlags.None,[
      ("Offset",FANone);
      ("RowPitch",FANone);
      ("DepthPitch",FANone);
      ]);
    ("D3D12_SUBRESOURCE_TILING",StructFlags.None,[
      ("WidthInTiles",FANone);
      ("HeightInTiles",FANone);
      ("DepthInTiles",FANone);
      ("StartTileIndexInOverallResource",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX1D_ARRAY_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX1D_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX1D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX1D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX1D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_DSV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_RTV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_ARRAY_SRV",StructFlags.None,[
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2DMS_DSV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2DMS_RTV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2DMS_SRV",StructFlags.None,[
      ("UnusedField_NothingToDefine",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX2D_ARRAY_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstArraySlice",FANone);
      ("ArraySize",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_DSV",StructFlags.None,[
      ("MipSlice",FANone);
      ]);
    ("D3D12_TEX2D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX2D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("PlaneSlice",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX2D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("PlaneSlice",FANone);
      ]);
    ("D3D12_TEX3D_RTV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstWSlice",FANone);
      ("WSize",FANone);
      ]);
    ("D3D12_TEX3D_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEX3D_UAV",StructFlags.None,[
      ("MipSlice",FANone);
      ("FirstWSlice",FANone);
      ("WSize",FANone);
      ]);
    ("D3D12_TEXCUBE_ARRAY_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("First2DArrayFace",FANone);
      ("NumCubes",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEXCUBE_SRV",StructFlags.None,[
      ("MostDetailedMip",FANone);
      ("MipLevels",FANone);
      ("ResourceMinLODClamp",FANone);
      ]);
    ("D3D12_TEXTURE_COPY_LOCATION",StructFlags.None,[
      ("pResource",FANone);
      ("Type",FANone);
      ]);
    ("D3D12_TILED_RESOURCE_COORDINATE",StructFlags.None,[
      ("X",FANone);
      ("Y",FANone);
      ("Z",FANone);
      ("Subresource",FANone);
      ]);
    ("D3D12_TILE_REGION_SIZE",StructFlags.None,[
      ("NumTiles",FANone);
      ("UseBox",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("Depth",FANone);
      ]);
    ("D3D12_TILE_SHAPE",StructFlags.None,[
      ("WidthInTexels",FANone);
      ("HeightInTexels",FANone);
      ("DepthInTexels",FANone);
      ]);
    ("D3D12_UNORDERED_ACCESS_VIEW_DESC",StructFlags.None,[
      ("Format",FANone);
      ("ViewDimension",FANone);
      ]);
    ("D3D12_VERTEX_BUFFER_VIEW",StructFlags.None,[
      ("BufferLocation",FANone);
      ("SizeInBytes",FANone);
      ("StrideInBytes",FANone);
      ]);
    ("D3D12_VIEWPORT",StructFlags.None,[
      ("TopLeftX",FANone);
      ("TopLeftY",FANone);
      ("Width",FANone);
      ("Height",FANone);
      ("MinDepth",FANone);
      ("MaxDepth",FANone);
      ]);
    ("D3DCOLORVALUE",StructFlags.None,[
      ("r",FANone);
      ("g",FANone);
      ("b",FANone);
      ("a",FANone);
      ]);
    ("D3D_SHADER_MACRO",StructFlags.None,[
      ("Name",FANone);
      ("Definition",FANone);
      ]);
    ("DXGI_ADAPTER_DESC",StructFlags.DeriveDebug,[
      ("Description",FANone);
      ("VendorId",FANone);
      ("DeviceId",FANone);
      ("SubSysId",FANone);
      ("Revision",FANone);
      ("DedicatedVideoMemory",FANone);
      ("DedicatedSystemMemory",FANone);
      ("SharedSystemMemory",FANone);
      ("AdapterLuid",FANone);
      ]);
    ("DXGI_ADAPTER_DESC1",StructFlags.DeriveDebug,[
      ("Description",FANone);
      ("VendorId",FANone);
      ("DeviceId",FANone);
      ("SubSysId",FANone);
      ("Revision",FANone);
      ("DedicatedVideoMemory",FANone);
      ("DedicatedSystemMemory",FANone);
      ("SharedSystemMemory",FANone);
      ("AdapterLuid",FANone);
      ("Flags",FANone);
      ]);
    ("DXGI_DISPLAY_COLOR_SPACE",StructFlags.None,[
      ("PrimaryCoordinates",FANone);
      ("WhitePoints",FANone);
      ]);
    ("DXGI_FRAME_STATISTICS",StructFlags.None,[
      ("PresentCount",FANone);
      ("PresentRefreshCount",FANone);
      ("SyncRefreshCount",FANone);
      ("SyncQPCTime",FANone);
      ("SyncGPUTime",FANone);
      ]);
    ("DXGI_GAMMA_CONTROL",StructFlags.None,[
      ("Scale",FANone);
      ("Offset",FANone);
      ("GammaCurve",FANone);
      ]);
    ("DXGI_GAMMA_CONTROL_CAPABILITIES",StructFlags.None,[
      ("ScaleAndOffsetSupported",FANone);
      ("MaxConvertedValue",FANone);
      ("MinConvertedValue",FANone);
      ("NumGammaControlPoints",FANone);
      ("ControlPointPositions",FANone);
      ]);
    ("DXGI_JPEG_AC_HUFFMAN_TABLE",StructFlags.None,[
      ("CodeCounts",FANone);
      ("CodeValues",FANone);
      ]);
    ("DXGI_JPEG_DC_HUFFMAN_TABLE",StructFlags.None,[
      ("CodeCounts",FANone);
      ("CodeValues",FANone);
      ]);
    ("DXGI_JPEG_QUANTIZATION_TABLE",StructFlags.None,[
      ("Elements",FANone);
      ]);
    ("DXGI_MAPPED_RECT",StructFlags.None,[
      ("Pitch",FANone);
      ("pBits",FANone);
      ]);
    ("DXGI_MODE_DESC",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy,[
      ("Width",FANone);
      ("Height",FANone);
      ("RefreshRate",FANone);
      ("Format",FANone);
      ("ScanlineOrdering",FANone);
      ("Scaling",FANone);
      ]);
    ("DXGI_OUTPUT_DESC",StructFlags.None,[
      ("DeviceName",FANone);
      ("DesktopCoordinates",FANone);
      ("AttachedToDesktop",FANone);
      ("Rotation",FANone);
      ("Monitor",FANone);
      ]);
    ("DXGI_RATIONAL",StructFlags.DeriveDefault ||| StructFlags.DeriveCopy,[
      ("Numerator",FANone);
      ("Denominator",FANone);
      ]);
    ("DXGI_RGB",StructFlags.None,[
      ("Red",FANone);
      ("Green",FANone);
      ("Blue",FANone);
      ]);
    ("DXGI_SAMPLE_DESC",StructFlags.None,[
      ("Count",FANone);
      ("Quality",FANone);
      ]);
    ("DXGI_SHARED_RESOURCE",StructFlags.None,[
      ("Handle",FANone);
      ]);
    ("DXGI_SURFACE_DESC",StructFlags.None,[
      ("Width",FANone);
      ("Height",FANone);
      ("Format",FANone);
      ("SampleDesc",FANone);
      ]);
    ("DXGI_SWAP_CHAIN_DESC",StructFlags.None,[
      ("BufferDesc",FANone);
      ("SampleDesc",FANone);
      ("BufferUsage",FANone);
      ("BufferCount",FANone);
      ("OutputWindow",FANone);
      ("Windowed",FANone);
      ("SwapEffect",FANone);
      ("Flags",FANone);
      ]);
    ("GUID",StructFlags.None,[
      ("Data1",FANone);
      ("Data2",FANone);
      ("Data3",FANone);
      ("Data4",FANone);
      ]);  
    ] |> Seq.map (fun (a,b,c) -> (a,(b,c))) |> Map.ofSeq
