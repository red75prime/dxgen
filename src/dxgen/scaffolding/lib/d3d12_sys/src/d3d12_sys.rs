// This file is autogenerated.



extern crate libc;
use libc::*;
use std::fmt;
use iid::IUnknown;
use std::os::windows::ffi::OsStringExt;
use std::ffi::OsString;

fn wchar_array_to_string_lossy(ws: &[u16]) -> String {
  match ws.iter().position(|c|*c==0) {
    Some(p) => {
      OsString::from_wide(&ws[0..p]).to_string_lossy().into_owned()
    },
    None => {
      OsString::from_wide(ws).to_string_lossy().into_owned()
    },
  }
}

fn debug_fmt_enum(name : &str, val: u32, opts: &[(&str,u32)], f: &mut fmt::Formatter) -> fmt::Result {
  let mut p_opts=0u32;
  let mut cval=val;
  let mut has_prev=false;
  for &(s,v) in opts {
    if (p_opts & v)==0 {
        p_opts |= v;
        if (cval & v)!=0 {
            if has_prev {
                try!{write!(f," | ")};
            } else {
                has_prev=true;
            }
            try!{write!(f,"{:}",s)};
            cval &= !v;
        }
    }
  }
  if cval!=0 {
    if has_prev {
        try!{write!(f," | ")};
    }
    try!{write!(f, "{}({:?})", name, cval)}
  } else if !has_prev {
    try!{write!(f, "{}(0)", name)}
  }
  Ok(())
}

use std::ops::BitOr;

#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_BLEND(pub u32);


impl fmt::Debug for D3D12_BLEND {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_BLEND_ZERO => write!(f,"D3D12_BLEND_ZERO"),
      D3D12_BLEND_ONE => write!(f,"D3D12_BLEND_ONE"),
      D3D12_BLEND_SRC_COLOR => write!(f,"D3D12_BLEND_SRC_COLOR"),
      D3D12_BLEND_INV_SRC_COLOR => write!(f,"D3D12_BLEND_INV_SRC_COLOR"),
      D3D12_BLEND_SRC_ALPHA => write!(f,"D3D12_BLEND_SRC_ALPHA"),
      D3D12_BLEND_INV_SRC_ALPHA => write!(f,"D3D12_BLEND_INV_SRC_ALPHA"),
      D3D12_BLEND_DEST_ALPHA => write!(f,"D3D12_BLEND_DEST_ALPHA"),
      D3D12_BLEND_INV_DEST_ALPHA => write!(f,"D3D12_BLEND_INV_DEST_ALPHA"),
      D3D12_BLEND_DEST_COLOR => write!(f,"D3D12_BLEND_DEST_COLOR"),
      D3D12_BLEND_INV_DEST_COLOR => write!(f,"D3D12_BLEND_INV_DEST_COLOR"),
      D3D12_BLEND_SRC_ALPHA_SAT => write!(f,"D3D12_BLEND_SRC_ALPHA_SAT"),
      D3D12_BLEND_BLEND_FACTOR => write!(f,"D3D12_BLEND_BLEND_FACTOR"),
      D3D12_BLEND_INV_BLEND_FACTOR => write!(f,"D3D12_BLEND_INV_BLEND_FACTOR"),
      D3D12_BLEND_SRC1_COLOR => write!(f,"D3D12_BLEND_SRC1_COLOR"),
      D3D12_BLEND_INV_SRC1_COLOR => write!(f,"D3D12_BLEND_INV_SRC1_COLOR"),
      D3D12_BLEND_SRC1_ALPHA => write!(f,"D3D12_BLEND_SRC1_ALPHA"),
      D3D12_BLEND_INV_SRC1_ALPHA => write!(f,"D3D12_BLEND_INV_SRC1_ALPHA"),

      _ => write!(f, "D3D12_BLEND({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_ZERO: D3D12_BLEND = D3D12_BLEND(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_ONE: D3D12_BLEND = D3D12_BLEND(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_SRC_COLOR: D3D12_BLEND = D3D12_BLEND(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_SRC_COLOR: D3D12_BLEND = D3D12_BLEND(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_SRC_ALPHA: D3D12_BLEND = D3D12_BLEND(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_SRC_ALPHA: D3D12_BLEND = D3D12_BLEND(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_DEST_ALPHA: D3D12_BLEND = D3D12_BLEND(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_DEST_ALPHA: D3D12_BLEND = D3D12_BLEND(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_DEST_COLOR: D3D12_BLEND = D3D12_BLEND(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_DEST_COLOR: D3D12_BLEND = D3D12_BLEND(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_SRC_ALPHA_SAT: D3D12_BLEND = D3D12_BLEND(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_BLEND_FACTOR: D3D12_BLEND = D3D12_BLEND(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_BLEND_FACTOR: D3D12_BLEND = D3D12_BLEND(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_SRC1_COLOR: D3D12_BLEND = D3D12_BLEND(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_SRC1_COLOR: D3D12_BLEND = D3D12_BLEND(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_SRC1_ALPHA: D3D12_BLEND = D3D12_BLEND(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_INV_SRC1_ALPHA: D3D12_BLEND = D3D12_BLEND(19);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_BLEND_OP(pub u32);


impl fmt::Debug for D3D12_BLEND_OP {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_BLEND_OP_ADD => write!(f,"D3D12_BLEND_OP_ADD"),
      D3D12_BLEND_OP_SUBTRACT => write!(f,"D3D12_BLEND_OP_SUBTRACT"),
      D3D12_BLEND_OP_REV_SUBTRACT => write!(f,"D3D12_BLEND_OP_REV_SUBTRACT"),
      D3D12_BLEND_OP_MIN => write!(f,"D3D12_BLEND_OP_MIN"),
      D3D12_BLEND_OP_MAX => write!(f,"D3D12_BLEND_OP_MAX"),

      _ => write!(f, "D3D12_BLEND_OP({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_OP_ADD: D3D12_BLEND_OP = D3D12_BLEND_OP(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_OP_SUBTRACT: D3D12_BLEND_OP = D3D12_BLEND_OP(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_OP_REV_SUBTRACT: D3D12_BLEND_OP = D3D12_BLEND_OP(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_OP_MIN: D3D12_BLEND_OP = D3D12_BLEND_OP(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BLEND_OP_MAX: D3D12_BLEND_OP = D3D12_BLEND_OP(5);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_BUFFER_SRV_FLAGS(pub u32);


impl BitOr for D3D12_BUFFER_SRV_FLAGS {
  type Output=D3D12_BUFFER_SRV_FLAGS;

  fn bitor(self, rhs: D3D12_BUFFER_SRV_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_BUFFER_SRV_FLAGS(a),D3D12_BUFFER_SRV_FLAGS(b)) => D3D12_BUFFER_SRV_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_BUFFER_SRV_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_BUFFER_SRV_FLAGS", self.0, &[("D3D12_BUFFER_SRV_FLAG_RAW",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BUFFER_SRV_FLAG_NONE: D3D12_BUFFER_SRV_FLAGS = D3D12_BUFFER_SRV_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BUFFER_SRV_FLAG_RAW: D3D12_BUFFER_SRV_FLAGS = D3D12_BUFFER_SRV_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_BUFFER_UAV_FLAGS(pub u32);


impl BitOr for D3D12_BUFFER_UAV_FLAGS {
  type Output=D3D12_BUFFER_UAV_FLAGS;

  fn bitor(self, rhs: D3D12_BUFFER_UAV_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_BUFFER_UAV_FLAGS(a),D3D12_BUFFER_UAV_FLAGS(b)) => D3D12_BUFFER_UAV_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_BUFFER_UAV_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_BUFFER_UAV_FLAGS", self.0, &[("D3D12_BUFFER_UAV_FLAG_RAW",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BUFFER_UAV_FLAG_NONE: D3D12_BUFFER_UAV_FLAGS = D3D12_BUFFER_UAV_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_BUFFER_UAV_FLAG_RAW: D3D12_BUFFER_UAV_FLAGS = D3D12_BUFFER_UAV_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CLEAR_FLAGS(pub u32);


impl BitOr for D3D12_CLEAR_FLAGS {
  type Output=D3D12_CLEAR_FLAGS;

  fn bitor(self, rhs: D3D12_CLEAR_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_CLEAR_FLAGS(a),D3D12_CLEAR_FLAGS(b)) => D3D12_CLEAR_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_CLEAR_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_CLEAR_FLAGS", self.0, &[("D3D12_CLEAR_FLAG_DEPTH",1), ("D3D12_CLEAR_FLAG_STENCIL",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CLEAR_FLAG_DEPTH: D3D12_CLEAR_FLAGS = D3D12_CLEAR_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CLEAR_FLAG_STENCIL: D3D12_CLEAR_FLAGS = D3D12_CLEAR_FLAGS(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_COLOR_WRITE_ENABLE(pub u32);


impl BitOr for D3D12_COLOR_WRITE_ENABLE {
  type Output=D3D12_COLOR_WRITE_ENABLE;

  fn bitor(self, rhs: D3D12_COLOR_WRITE_ENABLE) -> Self::Output {
    match (self,rhs) {
      (D3D12_COLOR_WRITE_ENABLE(a),D3D12_COLOR_WRITE_ENABLE(b)) => D3D12_COLOR_WRITE_ENABLE(a|b)
    }
  }
}

impl fmt::Debug for D3D12_COLOR_WRITE_ENABLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_COLOR_WRITE_ENABLE", self.0, &[("D3D12_COLOR_WRITE_ENABLE_RED",1), ("D3D12_COLOR_WRITE_ENABLE_GREEN",2), ("D3D12_COLOR_WRITE_ENABLE_BLUE",4), ("D3D12_COLOR_WRITE_ENABLE_ALPHA",8)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COLOR_WRITE_ENABLE_RED: D3D12_COLOR_WRITE_ENABLE = D3D12_COLOR_WRITE_ENABLE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COLOR_WRITE_ENABLE_GREEN: D3D12_COLOR_WRITE_ENABLE = D3D12_COLOR_WRITE_ENABLE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COLOR_WRITE_ENABLE_BLUE: D3D12_COLOR_WRITE_ENABLE = D3D12_COLOR_WRITE_ENABLE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COLOR_WRITE_ENABLE_ALPHA: D3D12_COLOR_WRITE_ENABLE = D3D12_COLOR_WRITE_ENABLE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COLOR_WRITE_ENABLE_ALL: D3D12_COLOR_WRITE_ENABLE = D3D12_COLOR_WRITE_ENABLE(15);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_COMMAND_LIST_TYPE(pub u32);


impl fmt::Debug for D3D12_COMMAND_LIST_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_COMMAND_LIST_TYPE_DIRECT => write!(f,"D3D12_COMMAND_LIST_TYPE_DIRECT"),
      D3D12_COMMAND_LIST_TYPE_BUNDLE => write!(f,"D3D12_COMMAND_LIST_TYPE_BUNDLE"),
      D3D12_COMMAND_LIST_TYPE_COMPUTE => write!(f,"D3D12_COMMAND_LIST_TYPE_COMPUTE"),
      D3D12_COMMAND_LIST_TYPE_COPY => write!(f,"D3D12_COMMAND_LIST_TYPE_COPY"),

      _ => write!(f, "D3D12_COMMAND_LIST_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_LIST_TYPE_DIRECT: D3D12_COMMAND_LIST_TYPE = D3D12_COMMAND_LIST_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_LIST_TYPE_BUNDLE: D3D12_COMMAND_LIST_TYPE = D3D12_COMMAND_LIST_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_LIST_TYPE_COMPUTE: D3D12_COMMAND_LIST_TYPE = D3D12_COMMAND_LIST_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_LIST_TYPE_COPY: D3D12_COMMAND_LIST_TYPE = D3D12_COMMAND_LIST_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_COMMAND_QUEUE_FLAGS(pub u32);


impl BitOr for D3D12_COMMAND_QUEUE_FLAGS {
  type Output=D3D12_COMMAND_QUEUE_FLAGS;

  fn bitor(self, rhs: D3D12_COMMAND_QUEUE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_COMMAND_QUEUE_FLAGS(a),D3D12_COMMAND_QUEUE_FLAGS(b)) => D3D12_COMMAND_QUEUE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_COMMAND_QUEUE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_COMMAND_QUEUE_FLAGS", self.0, &[("D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_QUEUE_FLAG_NONE: D3D12_COMMAND_QUEUE_FLAGS = D3D12_COMMAND_QUEUE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT: D3D12_COMMAND_QUEUE_FLAGS = D3D12_COMMAND_QUEUE_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_COMMAND_QUEUE_PRIORITY(pub u32);


impl fmt::Debug for D3D12_COMMAND_QUEUE_PRIORITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_COMMAND_QUEUE_PRIORITY_NORMAL => write!(f,"D3D12_COMMAND_QUEUE_PRIORITY_NORMAL"),
      D3D12_COMMAND_QUEUE_PRIORITY_HIGH => write!(f,"D3D12_COMMAND_QUEUE_PRIORITY_HIGH"),

      _ => write!(f, "D3D12_COMMAND_QUEUE_PRIORITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_QUEUE_PRIORITY_NORMAL: D3D12_COMMAND_QUEUE_PRIORITY = D3D12_COMMAND_QUEUE_PRIORITY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMMAND_QUEUE_PRIORITY_HIGH: D3D12_COMMAND_QUEUE_PRIORITY = D3D12_COMMAND_QUEUE_PRIORITY(100);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_COMPARISON_FUNC(pub u32);


impl fmt::Debug for D3D12_COMPARISON_FUNC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_COMPARISON_FUNC_NEVER => write!(f,"D3D12_COMPARISON_FUNC_NEVER"),
      D3D12_COMPARISON_FUNC_LESS => write!(f,"D3D12_COMPARISON_FUNC_LESS"),
      D3D12_COMPARISON_FUNC_EQUAL => write!(f,"D3D12_COMPARISON_FUNC_EQUAL"),
      D3D12_COMPARISON_FUNC_LESS_EQUAL => write!(f,"D3D12_COMPARISON_FUNC_LESS_EQUAL"),
      D3D12_COMPARISON_FUNC_GREATER => write!(f,"D3D12_COMPARISON_FUNC_GREATER"),
      D3D12_COMPARISON_FUNC_NOT_EQUAL => write!(f,"D3D12_COMPARISON_FUNC_NOT_EQUAL"),
      D3D12_COMPARISON_FUNC_GREATER_EQUAL => write!(f,"D3D12_COMPARISON_FUNC_GREATER_EQUAL"),
      D3D12_COMPARISON_FUNC_ALWAYS => write!(f,"D3D12_COMPARISON_FUNC_ALWAYS"),

      _ => write!(f, "D3D12_COMPARISON_FUNC({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_NEVER: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_LESS: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_EQUAL: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_LESS_EQUAL: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_GREATER: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_NOT_EQUAL: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_GREATER_EQUAL: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_COMPARISON_FUNC_ALWAYS: D3D12_COMPARISON_FUNC = D3D12_COMPARISON_FUNC(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CONSERVATIVE_RASTERIZATION_MODE(pub u32);


impl fmt::Debug for D3D12_CONSERVATIVE_RASTERIZATION_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF"),
      D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON"),

      _ => write!(f, "D3D12_CONSERVATIVE_RASTERIZATION_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF: D3D12_CONSERVATIVE_RASTERIZATION_MODE = D3D12_CONSERVATIVE_RASTERIZATION_MODE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON: D3D12_CONSERVATIVE_RASTERIZATION_MODE = D3D12_CONSERVATIVE_RASTERIZATION_MODE(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CONSERVATIVE_RASTERIZATION_TIER(pub u32);


impl fmt::Debug for D3D12_CONSERVATIVE_RASTERIZATION_TIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED"),
      D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_TIER_1"),
      D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_TIER_2"),
      D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 => write!(f,"D3D12_CONSERVATIVE_RASTERIZATION_TIER_3"),

      _ => write!(f, "D3D12_CONSERVATIVE_RASTERIZATION_TIER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED: D3D12_CONSERVATIVE_RASTERIZATION_TIER = D3D12_CONSERVATIVE_RASTERIZATION_TIER(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_1: D3D12_CONSERVATIVE_RASTERIZATION_TIER = D3D12_CONSERVATIVE_RASTERIZATION_TIER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_2: D3D12_CONSERVATIVE_RASTERIZATION_TIER = D3D12_CONSERVATIVE_RASTERIZATION_TIER(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CONSERVATIVE_RASTERIZATION_TIER_3: D3D12_CONSERVATIVE_RASTERIZATION_TIER = D3D12_CONSERVATIVE_RASTERIZATION_TIER(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CPU_PAGE_PROPERTY(pub u32);


impl fmt::Debug for D3D12_CPU_PAGE_PROPERTY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_CPU_PAGE_PROPERTY_UNKNOWN => write!(f,"D3D12_CPU_PAGE_PROPERTY_UNKNOWN"),
      D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE => write!(f,"D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE"),
      D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE => write!(f,"D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE"),
      D3D12_CPU_PAGE_PROPERTY_WRITE_BACK => write!(f,"D3D12_CPU_PAGE_PROPERTY_WRITE_BACK"),

      _ => write!(f, "D3D12_CPU_PAGE_PROPERTY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CPU_PAGE_PROPERTY_UNKNOWN: D3D12_CPU_PAGE_PROPERTY = D3D12_CPU_PAGE_PROPERTY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE: D3D12_CPU_PAGE_PROPERTY = D3D12_CPU_PAGE_PROPERTY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE: D3D12_CPU_PAGE_PROPERTY = D3D12_CPU_PAGE_PROPERTY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CPU_PAGE_PROPERTY_WRITE_BACK: D3D12_CPU_PAGE_PROPERTY = D3D12_CPU_PAGE_PROPERTY(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CROSS_NODE_SHARING_TIER(pub u32);


impl fmt::Debug for D3D12_CROSS_NODE_SHARING_TIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED => write!(f,"D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED"),
      D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED => write!(f,"D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED"),
      D3D12_CROSS_NODE_SHARING_TIER_1 => write!(f,"D3D12_CROSS_NODE_SHARING_TIER_1"),
      D3D12_CROSS_NODE_SHARING_TIER_2 => write!(f,"D3D12_CROSS_NODE_SHARING_TIER_2"),

      _ => write!(f, "D3D12_CROSS_NODE_SHARING_TIER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED: D3D12_CROSS_NODE_SHARING_TIER = D3D12_CROSS_NODE_SHARING_TIER(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED: D3D12_CROSS_NODE_SHARING_TIER = D3D12_CROSS_NODE_SHARING_TIER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CROSS_NODE_SHARING_TIER_1: D3D12_CROSS_NODE_SHARING_TIER = D3D12_CROSS_NODE_SHARING_TIER(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CROSS_NODE_SHARING_TIER_2: D3D12_CROSS_NODE_SHARING_TIER = D3D12_CROSS_NODE_SHARING_TIER(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_CULL_MODE(pub u32);


impl fmt::Debug for D3D12_CULL_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_CULL_MODE_NONE => write!(f,"D3D12_CULL_MODE_NONE"),
      D3D12_CULL_MODE_FRONT => write!(f,"D3D12_CULL_MODE_FRONT"),
      D3D12_CULL_MODE_BACK => write!(f,"D3D12_CULL_MODE_BACK"),

      _ => write!(f, "D3D12_CULL_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CULL_MODE_NONE: D3D12_CULL_MODE = D3D12_CULL_MODE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CULL_MODE_FRONT: D3D12_CULL_MODE = D3D12_CULL_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_CULL_MODE_BACK: D3D12_CULL_MODE = D3D12_CULL_MODE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DEBUG_FEATURE(pub u32);


impl fmt::Debug for D3D12_DEBUG_FEATURE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_DEBUG_FEATURE_NONE => write!(f,"D3D12_DEBUG_FEATURE_NONE"),
      D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DRAW => write!(f,"D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DRAW"),
      D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DISPATCH => write!(f,"D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DISPATCH"),

      _ => write!(f, "D3D12_DEBUG_FEATURE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DEBUG_FEATURE_NONE: D3D12_DEBUG_FEATURE = D3D12_DEBUG_FEATURE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DRAW: D3D12_DEBUG_FEATURE = D3D12_DEBUG_FEATURE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DEBUG_FEATURE_TREAT_BUNDLE_AS_DISPATCH: D3D12_DEBUG_FEATURE = D3D12_DEBUG_FEATURE(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DEPTH_WRITE_MASK(pub u32);


impl fmt::Debug for D3D12_DEPTH_WRITE_MASK {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_DEPTH_WRITE_MASK_ZERO => write!(f,"D3D12_DEPTH_WRITE_MASK_ZERO"),
      D3D12_DEPTH_WRITE_MASK_ALL => write!(f,"D3D12_DEPTH_WRITE_MASK_ALL"),

      _ => write!(f, "D3D12_DEPTH_WRITE_MASK({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DEPTH_WRITE_MASK_ZERO: D3D12_DEPTH_WRITE_MASK = D3D12_DEPTH_WRITE_MASK(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DEPTH_WRITE_MASK_ALL: D3D12_DEPTH_WRITE_MASK = D3D12_DEPTH_WRITE_MASK(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DESCRIPTOR_HEAP_FLAGS(pub u32);


impl BitOr for D3D12_DESCRIPTOR_HEAP_FLAGS {
  type Output=D3D12_DESCRIPTOR_HEAP_FLAGS;

  fn bitor(self, rhs: D3D12_DESCRIPTOR_HEAP_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_DESCRIPTOR_HEAP_FLAGS(a),D3D12_DESCRIPTOR_HEAP_FLAGS(b)) => D3D12_DESCRIPTOR_HEAP_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_DESCRIPTOR_HEAP_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_DESCRIPTOR_HEAP_FLAGS", self.0, &[("D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_FLAG_NONE: D3D12_DESCRIPTOR_HEAP_FLAGS = D3D12_DESCRIPTOR_HEAP_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE: D3D12_DESCRIPTOR_HEAP_FLAGS = D3D12_DESCRIPTOR_HEAP_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DESCRIPTOR_HEAP_TYPE(pub u32);


impl fmt::Debug for D3D12_DESCRIPTOR_HEAP_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV => write!(f,"D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV"),
      D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER => write!(f,"D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER"),
      D3D12_DESCRIPTOR_HEAP_TYPE_RTV => write!(f,"D3D12_DESCRIPTOR_HEAP_TYPE_RTV"),
      D3D12_DESCRIPTOR_HEAP_TYPE_DSV => write!(f,"D3D12_DESCRIPTOR_HEAP_TYPE_DSV"),
      D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES => write!(f,"D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES"),

      _ => write!(f, "D3D12_DESCRIPTOR_HEAP_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV: D3D12_DESCRIPTOR_HEAP_TYPE = D3D12_DESCRIPTOR_HEAP_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER: D3D12_DESCRIPTOR_HEAP_TYPE = D3D12_DESCRIPTOR_HEAP_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_TYPE_RTV: D3D12_DESCRIPTOR_HEAP_TYPE = D3D12_DESCRIPTOR_HEAP_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_TYPE_DSV: D3D12_DESCRIPTOR_HEAP_TYPE = D3D12_DESCRIPTOR_HEAP_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES: D3D12_DESCRIPTOR_HEAP_TYPE = D3D12_DESCRIPTOR_HEAP_TYPE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DESCRIPTOR_RANGE_TYPE(pub u32);


impl fmt::Debug for D3D12_DESCRIPTOR_RANGE_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_DESCRIPTOR_RANGE_TYPE_SRV => write!(f,"D3D12_DESCRIPTOR_RANGE_TYPE_SRV"),
      D3D12_DESCRIPTOR_RANGE_TYPE_UAV => write!(f,"D3D12_DESCRIPTOR_RANGE_TYPE_UAV"),
      D3D12_DESCRIPTOR_RANGE_TYPE_CBV => write!(f,"D3D12_DESCRIPTOR_RANGE_TYPE_CBV"),
      D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER => write!(f,"D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER"),

      _ => write!(f, "D3D12_DESCRIPTOR_RANGE_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_RANGE_TYPE_SRV: D3D12_DESCRIPTOR_RANGE_TYPE = D3D12_DESCRIPTOR_RANGE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_RANGE_TYPE_UAV: D3D12_DESCRIPTOR_RANGE_TYPE = D3D12_DESCRIPTOR_RANGE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_RANGE_TYPE_CBV: D3D12_DESCRIPTOR_RANGE_TYPE = D3D12_DESCRIPTOR_RANGE_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER: D3D12_DESCRIPTOR_RANGE_TYPE = D3D12_DESCRIPTOR_RANGE_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DSV_DIMENSION(pub u32);


impl fmt::Debug for D3D12_DSV_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_DSV_DIMENSION_UNKNOWN => write!(f,"D3D12_DSV_DIMENSION_UNKNOWN"),
      D3D12_DSV_DIMENSION_TEXTURE1D => write!(f,"D3D12_DSV_DIMENSION_TEXTURE1D"),
      D3D12_DSV_DIMENSION_TEXTURE1DARRAY => write!(f,"D3D12_DSV_DIMENSION_TEXTURE1DARRAY"),
      D3D12_DSV_DIMENSION_TEXTURE2D => write!(f,"D3D12_DSV_DIMENSION_TEXTURE2D"),
      D3D12_DSV_DIMENSION_TEXTURE2DARRAY => write!(f,"D3D12_DSV_DIMENSION_TEXTURE2DARRAY"),
      D3D12_DSV_DIMENSION_TEXTURE2DMS => write!(f,"D3D12_DSV_DIMENSION_TEXTURE2DMS"),
      D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY => write!(f,"D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY"),

      _ => write!(f, "D3D12_DSV_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_UNKNOWN: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE1D: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE1DARRAY: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE2D: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE2DARRAY: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE2DMS: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY: D3D12_DSV_DIMENSION = D3D12_DSV_DIMENSION(6);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_DSV_FLAGS(pub u32);


impl BitOr for D3D12_DSV_FLAGS {
  type Output=D3D12_DSV_FLAGS;

  fn bitor(self, rhs: D3D12_DSV_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_DSV_FLAGS(a),D3D12_DSV_FLAGS(b)) => D3D12_DSV_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_DSV_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_DSV_FLAGS", self.0, &[("D3D12_DSV_FLAG_READ_ONLY_DEPTH",1), ("D3D12_DSV_FLAG_READ_ONLY_STENCIL",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_FLAG_NONE: D3D12_DSV_FLAGS = D3D12_DSV_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_FLAG_READ_ONLY_DEPTH: D3D12_DSV_FLAGS = D3D12_DSV_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_DSV_FLAG_READ_ONLY_STENCIL: D3D12_DSV_FLAGS = D3D12_DSV_FLAGS(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FEATURE(pub u32);


impl fmt::Debug for D3D12_FEATURE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_FEATURE_D3D12_OPTIONS => write!(f,"D3D12_FEATURE_D3D12_OPTIONS"),
      D3D12_FEATURE_ARCHITECTURE => write!(f,"D3D12_FEATURE_ARCHITECTURE"),
      D3D12_FEATURE_FEATURE_LEVELS => write!(f,"D3D12_FEATURE_FEATURE_LEVELS"),
      D3D12_FEATURE_FORMAT_SUPPORT => write!(f,"D3D12_FEATURE_FORMAT_SUPPORT"),
      D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS => write!(f,"D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS"),
      D3D12_FEATURE_FORMAT_INFO => write!(f,"D3D12_FEATURE_FORMAT_INFO"),
      D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT => write!(f,"D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT"),

      _ => write!(f, "D3D12_FEATURE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_D3D12_OPTIONS: D3D12_FEATURE = D3D12_FEATURE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_ARCHITECTURE: D3D12_FEATURE = D3D12_FEATURE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_FEATURE_LEVELS: D3D12_FEATURE = D3D12_FEATURE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_FORMAT_SUPPORT: D3D12_FEATURE = D3D12_FEATURE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS: D3D12_FEATURE = D3D12_FEATURE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_FORMAT_INFO: D3D12_FEATURE = D3D12_FEATURE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT: D3D12_FEATURE = D3D12_FEATURE(6);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FENCE_FLAGS(pub u32);


impl BitOr for D3D12_FENCE_FLAGS {
  type Output=D3D12_FENCE_FLAGS;

  fn bitor(self, rhs: D3D12_FENCE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_FENCE_FLAGS(a),D3D12_FENCE_FLAGS(b)) => D3D12_FENCE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_FENCE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_FENCE_FLAGS", self.0, &[("D3D12_FENCE_FLAG_SHARED",1), ("D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FENCE_FLAG_NONE: D3D12_FENCE_FLAGS = D3D12_FENCE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FENCE_FLAG_SHARED: D3D12_FENCE_FLAGS = D3D12_FENCE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER: D3D12_FENCE_FLAGS = D3D12_FENCE_FLAGS(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FILL_MODE(pub u32);


impl fmt::Debug for D3D12_FILL_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_FILL_MODE_WIREFRAME => write!(f,"D3D12_FILL_MODE_WIREFRAME"),
      D3D12_FILL_MODE_SOLID => write!(f,"D3D12_FILL_MODE_SOLID"),

      _ => write!(f, "D3D12_FILL_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILL_MODE_WIREFRAME: D3D12_FILL_MODE = D3D12_FILL_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILL_MODE_SOLID: D3D12_FILL_MODE = D3D12_FILL_MODE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FILTER(pub u32);


impl fmt::Debug for D3D12_FILTER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_FILTER_MIN_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MIN_MAG_MIP_POINT"),
      D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR"),
      D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT"),
      D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MIN_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MIN_MAG_MIP_LINEAR"),
      D3D12_FILTER_ANISOTROPIC => write!(f,"D3D12_FILTER_ANISOTROPIC"),
      D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT => write!(f,"D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT"),
      D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR"),
      D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT => write!(f,"D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT"),
      D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR"),
      D3D12_FILTER_COMPARISON_ANISOTROPIC => write!(f,"D3D12_FILTER_COMPARISON_ANISOTROPIC"),
      D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT"),
      D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR"),
      D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT"),
      D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR"),
      D3D12_FILTER_MINIMUM_ANISOTROPIC => write!(f,"D3D12_FILTER_MINIMUM_ANISOTROPIC"),
      D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT"),
      D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR"),
      D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT => write!(f,"D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT"),
      D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR => write!(f,"D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR"),
      D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT => write!(f,"D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT"),
      D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR => write!(f,"D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR"),
      D3D12_FILTER_MAXIMUM_ANISOTROPIC => write!(f,"D3D12_FILTER_MAXIMUM_ANISOTROPIC"),

      _ => write!(f, "D3D12_FILTER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MIN_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_ANISOTROPIC: D3D12_FILTER = D3D12_FILTER(85);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(129);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(132);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(133);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(144);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(145);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(148);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(149);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_COMPARISON_ANISOTROPIC: D3D12_FILTER = D3D12_FILTER(213);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(257);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(260);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(261);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(272);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(273);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(276);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(277);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MINIMUM_ANISOTROPIC: D3D12_FILTER = D3D12_FILTER(341);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(384);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(385);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(388);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(389);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT: D3D12_FILTER = D3D12_FILTER(400);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(401);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT: D3D12_FILTER = D3D12_FILTER(404);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR: D3D12_FILTER = D3D12_FILTER(405);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_MAXIMUM_ANISOTROPIC: D3D12_FILTER = D3D12_FILTER(469);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FILTER_REDUCTION_TYPE(pub u32);


impl fmt::Debug for D3D12_FILTER_REDUCTION_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_FILTER_REDUCTION_TYPE_STANDARD => write!(f,"D3D12_FILTER_REDUCTION_TYPE_STANDARD"),
      D3D12_FILTER_REDUCTION_TYPE_COMPARISON => write!(f,"D3D12_FILTER_REDUCTION_TYPE_COMPARISON"),
      D3D12_FILTER_REDUCTION_TYPE_MINIMUM => write!(f,"D3D12_FILTER_REDUCTION_TYPE_MINIMUM"),
      D3D12_FILTER_REDUCTION_TYPE_MAXIMUM => write!(f,"D3D12_FILTER_REDUCTION_TYPE_MAXIMUM"),

      _ => write!(f, "D3D12_FILTER_REDUCTION_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_REDUCTION_TYPE_STANDARD: D3D12_FILTER_REDUCTION_TYPE = D3D12_FILTER_REDUCTION_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_REDUCTION_TYPE_COMPARISON: D3D12_FILTER_REDUCTION_TYPE = D3D12_FILTER_REDUCTION_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_REDUCTION_TYPE_MINIMUM: D3D12_FILTER_REDUCTION_TYPE = D3D12_FILTER_REDUCTION_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_REDUCTION_TYPE_MAXIMUM: D3D12_FILTER_REDUCTION_TYPE = D3D12_FILTER_REDUCTION_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FILTER_TYPE(pub u32);


impl fmt::Debug for D3D12_FILTER_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_FILTER_TYPE_POINT => write!(f,"D3D12_FILTER_TYPE_POINT"),
      D3D12_FILTER_TYPE_LINEAR => write!(f,"D3D12_FILTER_TYPE_LINEAR"),

      _ => write!(f, "D3D12_FILTER_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_TYPE_POINT: D3D12_FILTER_TYPE = D3D12_FILTER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FILTER_TYPE_LINEAR: D3D12_FILTER_TYPE = D3D12_FILTER_TYPE(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FORMAT_SUPPORT1(pub u32);


impl BitOr for D3D12_FORMAT_SUPPORT1 {
  type Output=D3D12_FORMAT_SUPPORT1;

  fn bitor(self, rhs: D3D12_FORMAT_SUPPORT1) -> Self::Output {
    match (self,rhs) {
      (D3D12_FORMAT_SUPPORT1(a),D3D12_FORMAT_SUPPORT1(b)) => D3D12_FORMAT_SUPPORT1(a|b)
    }
  }
}

impl fmt::Debug for D3D12_FORMAT_SUPPORT1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_FORMAT_SUPPORT1", self.0, &[("D3D12_FORMAT_SUPPORT1_BUFFER",1), ("D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER",2), ("D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER",4), ("D3D12_FORMAT_SUPPORT1_SO_BUFFER",8), ("D3D12_FORMAT_SUPPORT1_TEXTURE1D",16), ("D3D12_FORMAT_SUPPORT1_TEXTURE2D",32), ("D3D12_FORMAT_SUPPORT1_TEXTURE3D",64), ("D3D12_FORMAT_SUPPORT1_TEXTURECUBE",128), ("D3D12_FORMAT_SUPPORT1_SHADER_LOAD",256), ("D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE",512), ("D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON",1024), ("D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT",2048), ("D3D12_FORMAT_SUPPORT1_MIP",4096), ("D3D12_FORMAT_SUPPORT1_RENDER_TARGET",16384), ("D3D12_FORMAT_SUPPORT1_BLENDABLE",32768), ("D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL",65536), ("D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE",262144), ("D3D12_FORMAT_SUPPORT1_DISPLAY",524288), ("D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT",1048576), ("D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET",2097152), ("D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD",4194304), ("D3D12_FORMAT_SUPPORT1_SHADER_GATHER",8388608), ("D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST",16777216), ("D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW",33554432), ("D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON",67108864), ("D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT",134217728), ("D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT",268435456), ("D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT",536870912), ("D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER",1073741824)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_NONE: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_BUFFER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SO_BUFFER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_TEXTURE1D: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_TEXTURE2D: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_TEXTURE3D: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_TEXTURECUBE: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_LOAD: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(512);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(1024);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(2048);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_MIP: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(4096);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_RENDER_TARGET: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(16384);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_BLENDABLE: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(32768);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(65536);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(262144);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_DISPLAY: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(524288);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(1048576);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(2097152);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(4194304);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_GATHER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(8388608);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(16777216);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(33554432);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(67108864);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(134217728);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(268435456);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(536870912);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER: D3D12_FORMAT_SUPPORT1 = D3D12_FORMAT_SUPPORT1(1073741824);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_FORMAT_SUPPORT2(pub u32);


impl BitOr for D3D12_FORMAT_SUPPORT2 {
  type Output=D3D12_FORMAT_SUPPORT2;

  fn bitor(self, rhs: D3D12_FORMAT_SUPPORT2) -> Self::Output {
    match (self,rhs) {
      (D3D12_FORMAT_SUPPORT2(a),D3D12_FORMAT_SUPPORT2(b)) => D3D12_FORMAT_SUPPORT2(a|b)
    }
  }
}

impl fmt::Debug for D3D12_FORMAT_SUPPORT2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_FORMAT_SUPPORT2", self.0, &[("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD",1), ("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS",2), ("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE",4), ("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE",8), ("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX",16), ("D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX",32), ("D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD",64), ("D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE",128), ("D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP",256), ("D3D12_FORMAT_SUPPORT2_TILED",512), ("D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY",16384)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_NONE: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_TILED: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(512);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY: D3D12_FORMAT_SUPPORT2 = D3D12_FORMAT_SUPPORT2(16384);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_HEAP_FLAGS(pub u32);


impl fmt::Debug for D3D12_HEAP_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_HEAP_FLAG_NONE => write!(f,"D3D12_HEAP_FLAG_NONE"),
      D3D12_HEAP_FLAG_SHARED => write!(f,"D3D12_HEAP_FLAG_SHARED"),
      D3D12_HEAP_FLAG_DENY_BUFFERS => write!(f,"D3D12_HEAP_FLAG_DENY_BUFFERS"),
      D3D12_HEAP_FLAG_ALLOW_DISPLAY => write!(f,"D3D12_HEAP_FLAG_ALLOW_DISPLAY"),
      D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER => write!(f,"D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER"),
      D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES => write!(f,"D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES"),
      D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES => write!(f,"D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES"),
      D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS => write!(f,"D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS"),
      D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES => write!(f,"D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES"),
      D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES => write!(f,"D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES"),

      _ => write!(f, "D3D12_HEAP_FLAGS({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_NONE: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_SHARED: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_DENY_BUFFERS: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_ALLOW_DISPLAY: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(192);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(68);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES: D3D12_HEAP_FLAGS = D3D12_HEAP_FLAGS(132);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_HEAP_TYPE(pub u32);


impl fmt::Debug for D3D12_HEAP_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_HEAP_TYPE_DEFAULT => write!(f,"D3D12_HEAP_TYPE_DEFAULT"),
      D3D12_HEAP_TYPE_UPLOAD => write!(f,"D3D12_HEAP_TYPE_UPLOAD"),
      D3D12_HEAP_TYPE_READBACK => write!(f,"D3D12_HEAP_TYPE_READBACK"),
      D3D12_HEAP_TYPE_CUSTOM => write!(f,"D3D12_HEAP_TYPE_CUSTOM"),

      _ => write!(f, "D3D12_HEAP_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_TYPE_DEFAULT: D3D12_HEAP_TYPE = D3D12_HEAP_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_TYPE_UPLOAD: D3D12_HEAP_TYPE = D3D12_HEAP_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_TYPE_READBACK: D3D12_HEAP_TYPE = D3D12_HEAP_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_HEAP_TYPE_CUSTOM: D3D12_HEAP_TYPE = D3D12_HEAP_TYPE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_INDEX_BUFFER_STRIP_CUT_VALUE(pub u32);


impl fmt::Debug for D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED => write!(f,"D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED"),
      D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF => write!(f,"D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF"),
      D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF => write!(f,"D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF"),

      _ => write!(f, "D3D12_INDEX_BUFFER_STRIP_CUT_VALUE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_INDIRECT_ARGUMENT_TYPE(pub u32);


impl fmt::Debug for D3D12_INDIRECT_ARGUMENT_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_INDIRECT_ARGUMENT_TYPE_DRAW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_DRAW"),
      D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED"),
      D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH"),
      D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW"),
      D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW"),
      D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT"),
      D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW"),
      D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW"),
      D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW => write!(f,"D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW"),

      _ => write!(f, "D3D12_INDIRECT_ARGUMENT_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW: D3D12_INDIRECT_ARGUMENT_TYPE = D3D12_INDIRECT_ARGUMENT_TYPE(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_INPUT_CLASSIFICATION(pub u32);


impl fmt::Debug for D3D12_INPUT_CLASSIFICATION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA => write!(f,"D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA"),
      D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA => write!(f,"D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA"),

      _ => write!(f, "D3D12_INPUT_CLASSIFICATION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA: D3D12_INPUT_CLASSIFICATION = D3D12_INPUT_CLASSIFICATION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA: D3D12_INPUT_CLASSIFICATION = D3D12_INPUT_CLASSIFICATION(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_LOGIC_OP(pub u32);


impl fmt::Debug for D3D12_LOGIC_OP {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_LOGIC_OP_CLEAR => write!(f,"D3D12_LOGIC_OP_CLEAR"),
      D3D12_LOGIC_OP_SET => write!(f,"D3D12_LOGIC_OP_SET"),
      D3D12_LOGIC_OP_COPY => write!(f,"D3D12_LOGIC_OP_COPY"),
      D3D12_LOGIC_OP_COPY_INVERTED => write!(f,"D3D12_LOGIC_OP_COPY_INVERTED"),
      D3D12_LOGIC_OP_NOOP => write!(f,"D3D12_LOGIC_OP_NOOP"),
      D3D12_LOGIC_OP_INVERT => write!(f,"D3D12_LOGIC_OP_INVERT"),
      D3D12_LOGIC_OP_AND => write!(f,"D3D12_LOGIC_OP_AND"),
      D3D12_LOGIC_OP_NAND => write!(f,"D3D12_LOGIC_OP_NAND"),
      D3D12_LOGIC_OP_OR => write!(f,"D3D12_LOGIC_OP_OR"),
      D3D12_LOGIC_OP_NOR => write!(f,"D3D12_LOGIC_OP_NOR"),
      D3D12_LOGIC_OP_XOR => write!(f,"D3D12_LOGIC_OP_XOR"),
      D3D12_LOGIC_OP_EQUIV => write!(f,"D3D12_LOGIC_OP_EQUIV"),
      D3D12_LOGIC_OP_AND_REVERSE => write!(f,"D3D12_LOGIC_OP_AND_REVERSE"),
      D3D12_LOGIC_OP_AND_INVERTED => write!(f,"D3D12_LOGIC_OP_AND_INVERTED"),
      D3D12_LOGIC_OP_OR_REVERSE => write!(f,"D3D12_LOGIC_OP_OR_REVERSE"),
      D3D12_LOGIC_OP_OR_INVERTED => write!(f,"D3D12_LOGIC_OP_OR_INVERTED"),

      _ => write!(f, "D3D12_LOGIC_OP({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_CLEAR: D3D12_LOGIC_OP = D3D12_LOGIC_OP(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_SET: D3D12_LOGIC_OP = D3D12_LOGIC_OP(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_COPY: D3D12_LOGIC_OP = D3D12_LOGIC_OP(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_COPY_INVERTED: D3D12_LOGIC_OP = D3D12_LOGIC_OP(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_NOOP: D3D12_LOGIC_OP = D3D12_LOGIC_OP(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_INVERT: D3D12_LOGIC_OP = D3D12_LOGIC_OP(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_AND: D3D12_LOGIC_OP = D3D12_LOGIC_OP(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_NAND: D3D12_LOGIC_OP = D3D12_LOGIC_OP(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_OR: D3D12_LOGIC_OP = D3D12_LOGIC_OP(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_NOR: D3D12_LOGIC_OP = D3D12_LOGIC_OP(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_XOR: D3D12_LOGIC_OP = D3D12_LOGIC_OP(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_EQUIV: D3D12_LOGIC_OP = D3D12_LOGIC_OP(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_AND_REVERSE: D3D12_LOGIC_OP = D3D12_LOGIC_OP(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_AND_INVERTED: D3D12_LOGIC_OP = D3D12_LOGIC_OP(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_OR_REVERSE: D3D12_LOGIC_OP = D3D12_LOGIC_OP(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_LOGIC_OP_OR_INVERTED: D3D12_LOGIC_OP = D3D12_LOGIC_OP(15);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_MEMORY_POOL(pub u32);


impl fmt::Debug for D3D12_MEMORY_POOL {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_MEMORY_POOL_UNKNOWN => write!(f,"D3D12_MEMORY_POOL_UNKNOWN"),
      D3D12_MEMORY_POOL_L0 => write!(f,"D3D12_MEMORY_POOL_L0"),
      D3D12_MEMORY_POOL_L1 => write!(f,"D3D12_MEMORY_POOL_L1"),

      _ => write!(f, "D3D12_MEMORY_POOL({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MEMORY_POOL_UNKNOWN: D3D12_MEMORY_POOL = D3D12_MEMORY_POOL(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MEMORY_POOL_L0: D3D12_MEMORY_POOL = D3D12_MEMORY_POOL(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MEMORY_POOL_L1: D3D12_MEMORY_POOL = D3D12_MEMORY_POOL(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_MESSAGE_CATEGORY(pub u32);


impl fmt::Debug for D3D12_MESSAGE_CATEGORY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED => write!(f,"D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED"),
      D3D12_MESSAGE_CATEGORY_MISCELLANEOUS => write!(f,"D3D12_MESSAGE_CATEGORY_MISCELLANEOUS"),
      D3D12_MESSAGE_CATEGORY_INITIALIZATION => write!(f,"D3D12_MESSAGE_CATEGORY_INITIALIZATION"),
      D3D12_MESSAGE_CATEGORY_CLEANUP => write!(f,"D3D12_MESSAGE_CATEGORY_CLEANUP"),
      D3D12_MESSAGE_CATEGORY_COMPILATION => write!(f,"D3D12_MESSAGE_CATEGORY_COMPILATION"),
      D3D12_MESSAGE_CATEGORY_STATE_CREATION => write!(f,"D3D12_MESSAGE_CATEGORY_STATE_CREATION"),
      D3D12_MESSAGE_CATEGORY_STATE_SETTING => write!(f,"D3D12_MESSAGE_CATEGORY_STATE_SETTING"),
      D3D12_MESSAGE_CATEGORY_STATE_GETTING => write!(f,"D3D12_MESSAGE_CATEGORY_STATE_GETTING"),
      D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION => write!(f,"D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION"),
      D3D12_MESSAGE_CATEGORY_EXECUTION => write!(f,"D3D12_MESSAGE_CATEGORY_EXECUTION"),
      D3D12_MESSAGE_CATEGORY_SHADER => write!(f,"D3D12_MESSAGE_CATEGORY_SHADER"),

      _ => write!(f, "D3D12_MESSAGE_CATEGORY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_MISCELLANEOUS: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_INITIALIZATION: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_CLEANUP: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_COMPILATION: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_STATE_CREATION: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_STATE_SETTING: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_STATE_GETTING: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_EXECUTION: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_CATEGORY_SHADER: D3D12_MESSAGE_CATEGORY = D3D12_MESSAGE_CATEGORY(10);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_MESSAGE_ID(pub u32);


impl fmt::Debug for D3D12_MESSAGE_ID {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_MESSAGE_ID_UNKNOWN => write!(f,"D3D12_MESSAGE_ID_UNKNOWN"),
      D3D12_MESSAGE_ID_STRING_FROM_APPLICATION => write!(f,"D3D12_MESSAGE_ID_STRING_FROM_APPLICATION"),
      D3D12_MESSAGE_ID_CORRUPTED_THIS => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_THIS"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14"),
      D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15"),
      D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING => write!(f,"D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING"),
      D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA => write!(f,"D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA"),
      D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA => write!(f,"D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA"),
      D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN => write!(f,"D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN"),
      D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS => write!(f,"D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS"),
      D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT"),
      D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE"),
      D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD"),
      D3D12_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC => write!(f,"D3D12_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC"),
      D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED => write!(f,"D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED"),
      D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED => write!(f,"D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED"),
      D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT => write!(f,"D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT"),
      D3D12_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR => write!(f,"D3D12_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR"),
      D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH => write!(f,"D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID"),
      D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE => write!(f,"D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE"),
      D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE => write!(f,"D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE"),
      D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE => write!(f,"D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE"),
      D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE"),
      D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX => write!(f,"D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX"),
      D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE => write!(f,"D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE"),
      D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID => write!(f,"D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID"),
      D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID => write!(f,"D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID"),
      D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID => write!(f,"D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID"),
      D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID => write!(f,"D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID"),
      D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID => write!(f,"D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID"),
      D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE => write!(f,"D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE"),
      D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED => write!(f,"D3D12_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED"),
      D3D12_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED => write!(f,"D3D12_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE"),
      D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE"),
      D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE"),
      D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED"),
      D3D12_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED => write!(f,"D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED"),
      D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED => write!(f,"D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED"),
      D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED => write!(f,"D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED"),
      D3D12_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS => write!(f,"D3D12_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS"),
      D3D12_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE => write!(f,"D3D12_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE"),
      D3D12_MESSAGE_ID_REF_THREADING_MODE => write!(f,"D3D12_MESSAGE_ID_REF_THREADING_MODE"),
      D3D12_MESSAGE_ID_REF_UMDRIVER_EXCEPTION => write!(f,"D3D12_MESSAGE_ID_REF_UMDRIVER_EXCEPTION"),
      D3D12_MESSAGE_ID_REF_KMDRIVER_EXCEPTION => write!(f,"D3D12_MESSAGE_ID_REF_KMDRIVER_EXCEPTION"),
      D3D12_MESSAGE_ID_REF_HARDWARE_EXCEPTION => write!(f,"D3D12_MESSAGE_ID_REF_HARDWARE_EXCEPTION"),
      D3D12_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE => write!(f,"D3D12_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE"),
      D3D12_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER => write!(f,"D3D12_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER"),
      D3D12_MESSAGE_ID_REF_OUT_OF_MEMORY => write!(f,"D3D12_MESSAGE_ID_REF_OUT_OF_MEMORY"),
      D3D12_MESSAGE_ID_REF_INFO => write!(f,"D3D12_MESSAGE_ID_REF_INFO"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INPUTLAYOUT_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INPUTLAYOUT_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_TOO_SMALL => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_TOO_SMALL"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SAMPLER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SAMPLER_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SHADERRESOURCEVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SHADERRESOURCEVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VIEW_DIMENSION_MISMATCH => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VIEW_DIMENSION_MISMATCH"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_GS_INPUT_PRIMITIVE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_GS_INPUT_PRIMITIVE_MISMATCH"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_RETURN_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_RETURN_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_POSITION_NOT_PRESENT => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_POSITION_NOT_PRESENT"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_NOT_SET => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_NOT_SET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_BOUND_RESOURCE_MAPPED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_BOUND_RESOURCE_MAPPED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_OFFSET_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_OFFSET_UNALIGNED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_STRIDE_LARGER_THAN_BUFFER => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_STRIDE_LARGER_THAN_BUFFER"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0"),
      D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT => write!(f,"D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT"),
      D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT => write!(f,"D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT"),
      D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT => write!(f,"D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT"),
      D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN => write!(f,"D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC"),
      D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH => write!(f,"D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH"),
      D3D12_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW => write!(f,"D3D12_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW"),
      D3D12_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY => write!(f,"D3D12_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY"),
      D3D12_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY => write!(f,"D3D12_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN"),
      D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE => write!(f,"D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE"),
      D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE => write!(f,"D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH"),
      D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY => write!(f,"D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY"),
      D3D12_MESSAGE_ID_LIVE_BUFFER => write!(f,"D3D12_MESSAGE_ID_LIVE_BUFFER"),
      D3D12_MESSAGE_ID_LIVE_TEXTURE1D => write!(f,"D3D12_MESSAGE_ID_LIVE_TEXTURE1D"),
      D3D12_MESSAGE_ID_LIVE_TEXTURE2D => write!(f,"D3D12_MESSAGE_ID_LIVE_TEXTURE2D"),
      D3D12_MESSAGE_ID_LIVE_TEXTURE3D => write!(f,"D3D12_MESSAGE_ID_LIVE_TEXTURE3D"),
      D3D12_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW => write!(f,"D3D12_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW"),
      D3D12_MESSAGE_ID_LIVE_RENDERTARGETVIEW => write!(f,"D3D12_MESSAGE_ID_LIVE_RENDERTARGETVIEW"),
      D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW => write!(f,"D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW"),
      D3D12_MESSAGE_ID_LIVE_VERTEXSHADER => write!(f,"D3D12_MESSAGE_ID_LIVE_VERTEXSHADER"),
      D3D12_MESSAGE_ID_LIVE_GEOMETRYSHADER => write!(f,"D3D12_MESSAGE_ID_LIVE_GEOMETRYSHADER"),
      D3D12_MESSAGE_ID_LIVE_PIXELSHADER => write!(f,"D3D12_MESSAGE_ID_LIVE_PIXELSHADER"),
      D3D12_MESSAGE_ID_LIVE_INPUTLAYOUT => write!(f,"D3D12_MESSAGE_ID_LIVE_INPUTLAYOUT"),
      D3D12_MESSAGE_ID_LIVE_SAMPLER => write!(f,"D3D12_MESSAGE_ID_LIVE_SAMPLER"),
      D3D12_MESSAGE_ID_LIVE_BLENDSTATE => write!(f,"D3D12_MESSAGE_ID_LIVE_BLENDSTATE"),
      D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE => write!(f,"D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE"),
      D3D12_MESSAGE_ID_LIVE_RASTERIZERSTATE => write!(f,"D3D12_MESSAGE_ID_LIVE_RASTERIZERSTATE"),
      D3D12_MESSAGE_ID_LIVE_QUERY => write!(f,"D3D12_MESSAGE_ID_LIVE_QUERY"),
      D3D12_MESSAGE_ID_LIVE_PREDICATE => write!(f,"D3D12_MESSAGE_ID_LIVE_PREDICATE"),
      D3D12_MESSAGE_ID_LIVE_COUNTER => write!(f,"D3D12_MESSAGE_ID_LIVE_COUNTER"),
      D3D12_MESSAGE_ID_LIVE_DEVICE => write!(f,"D3D12_MESSAGE_ID_LIVE_DEVICE"),
      D3D12_MESSAGE_ID_LIVE_SWAPCHAIN => write!(f,"D3D12_MESSAGE_ID_LIVE_SWAPCHAIN"),
      D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES"),
      D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES => write!(f,"D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES"),
      D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL => write!(f,"D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL"),
      D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL => write!(f,"D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL"),
      D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE"),
      D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED"),
      D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD => write!(f,"D3D12_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD"),
      D3D12_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED => write!(f,"D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS"),
      D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE => write!(f,"D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE"),
      D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE => write!(f,"D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE"),
      D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL"),
      D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE"),
      D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE"),
      D3D12_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY"),
      D3D12_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER => write!(f,"D3D12_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER"),
      D3D12_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE => write!(f,"D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT"),
      D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS => write!(f,"D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS"),
      D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP => write!(f,"D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH => write!(f,"D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH"),
      D3D12_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY"),
      D3D12_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY => write!(f,"D3D12_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY"),
      D3D12_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED => write!(f,"D3D12_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO"),
      D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED"),
      D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET => write!(f,"D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET"),
      D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET => write!(f,"D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET"),
      D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE => write!(f,"D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE"),
      D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE => write!(f,"D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE"),
      D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV"),
      D3D12_MESSAGE_ID_SHADER_ABORT => write!(f,"D3D12_MESSAGE_ID_SHADER_ABORT"),
      D3D12_MESSAGE_ID_SHADER_MESSAGE => write!(f,"D3D12_MESSAGE_ID_SHADER_MESSAGE"),
      D3D12_MESSAGE_ID_SHADER_ERROR => write!(f,"D3D12_MESSAGE_ID_SHADER_ERROR"),
      D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN => write!(f,"D3D12_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT"),
      D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS => write!(f,"D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER"),
      D3D12_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE => write!(f,"D3D12_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE"),
      D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY => write!(f,"D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY"),
      D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW => write!(f,"D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW"),
      D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION => write!(f,"D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION"),
      D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET => write!(f,"D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET"),
      D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS => write!(f,"D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS"),
      D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED"),
      D3D12_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED"),
      D3D12_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 => write!(f,"D3D12_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1"),
      D3D12_MESSAGE_ID_GETDC_INACCESSIBLE => write!(f,"D3D12_MESSAGE_ID_GETDC_INACCESSIBLE"),
      D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT => write!(f,"D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9"),
      D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE => write!(f,"D3D12_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE"),
      D3D12_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA => write!(f,"D3D12_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA"),
      D3D12_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA => write!(f,"D3D12_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA"),
      D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT => write!(f,"D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT"),
      D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT => write!(f,"D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT"),
      D3D12_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX => write!(f,"D3D12_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX"),
      D3D12_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX => write!(f,"D3D12_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT"),
      D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT => write!(f,"D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT"),
      D3D12_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM"),
      D3D12_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM"),
      D3D12_MESSAGE_ID_SETEVENTONHARDWARECONTENTPROTECTIONTILT_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_SETEVENTONHARDWARECONTENTPROTECTIONTILT_NULLPARAM"),
      D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM"),
      D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT => write!(f,"D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT"),
      D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM"),
      D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE => write!(f,"D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE"),
      D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT => write!(f,"D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT"),
      D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED"),
      D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED"),
      D3D12_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM"),
      D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM"),
      D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE => write!(f,"D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE"),
      D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT => write!(f,"D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT"),
      D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT => write!(f,"D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT"),
      D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE => write!(f,"D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE"),
      D3D12_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE => write!(f,"D3D12_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE"),
      D3D12_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE => write!(f,"D3D12_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1"),
      D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER => write!(f,"D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER"),
      D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER => write!(f,"D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER"),
      D3D12_MESSAGE_ID_COPYTILES_INVALID_PARAMETER => write!(f,"D3D12_MESSAGE_ID_COPYTILES_INVALID_PARAMETER"),
      D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING => write!(f,"D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING"),
      D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR => write!(f,"D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR"),
      D3D12_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS => write!(f,"D3D12_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS"),
      D3D12_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA => write!(f,"D3D12_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA"),
      D3D12_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE => write!(f,"D3D12_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE"),
      D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES => write!(f,"D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES"),
      D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT => write!(f,"D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT"),
      D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE => write!(f,"D3D12_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE"),
      D3D12_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER => write!(f,"D3D12_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER"),
      D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS => write!(f,"D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS"),
      D3D12_MESSAGE_ID_CREATEDEVICE_WARNING => write!(f,"D3D12_MESSAGE_ID_CREATEDEVICE_WARNING"),
      D3D12_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATE_CRYPTOSESSION => write!(f,"D3D12_MESSAGE_ID_CREATE_CRYPTOSESSION"),
      D3D12_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL => write!(f,"D3D12_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL"),
      D3D12_MESSAGE_ID_LIVE_CRYPTOSESSION => write!(f,"D3D12_MESSAGE_ID_LIVE_CRYPTOSESSION"),
      D3D12_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL => write!(f,"D3D12_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL"),
      D3D12_MESSAGE_ID_DESTROY_CRYPTOSESSION => write!(f,"D3D12_MESSAGE_ID_DESTROY_CRYPTOSESSION"),
      D3D12_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL => write!(f,"D3D12_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL"),
      D3D12_MESSAGE_ID_MAP_INVALID_SUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALID_SUBRESOURCE"),
      D3D12_MESSAGE_ID_MAP_INVALID_TYPE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALID_TYPE"),
      D3D12_MESSAGE_ID_MAP_UNSUPPORTED_TYPE => write!(f,"D3D12_MESSAGE_ID_MAP_UNSUPPORTED_TYPE"),
      D3D12_MESSAGE_ID_UNMAP_INVALID_SUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALID_SUBRESOURCE"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE"),
      D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE => write!(f,"D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE"),
      D3D12_MESSAGE_ID_INEFFICIENT_PRESENT => write!(f,"D3D12_MESSAGE_ID_INEFFICIENT_PRESENT"),
      D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION => write!(f,"D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION"),
      D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET => write!(f,"D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET"),
      D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE => write!(f,"D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE"),
      D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET => write!(f,"D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET"),
      D3D12_MESSAGE_ID_COMMAND_LIST_OPEN => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_OPEN"),
      D3D12_MESSAGE_ID_QUERY_STATE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_QUERY_STATE_MISMATCH"),
      D3D12_MESSAGE_ID_INVALID_BUNDLE_API => write!(f,"D3D12_MESSAGE_ID_INVALID_BUNDLE_API"),
      D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED"),
      D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED_WITH_INVALID_RESOURCE => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED_WITH_INVALID_RESOURCE"),
      D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE => write!(f,"D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE"),
      D3D12_MESSAGE_ID_INVALID_INDIRECT_ARGUMENT_BUFFER => write!(f,"D3D12_MESSAGE_ID_INVALID_INDIRECT_ARGUMENT_BUFFER"),
      D3D12_MESSAGE_ID_COMPUTE_AND_GRAPHICS_PIPELINE => write!(f,"D3D12_MESSAGE_ID_COMPUTE_AND_GRAPHICS_PIPELINE"),
      D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC => write!(f,"D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC"),
      D3D12_MESSAGE_ID_COMMAND_LIST_SYNC => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_SYNC"),
      D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID"),
      D3D12_MESSAGE_ID_CREATE_QUEUE_IMAGE_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATE_QUEUE_IMAGE_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_IMAGE_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_IMAGE_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE => write!(f,"D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE"),
      D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR => write!(f,"D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR"),
      D3D12_MESSAGE_ID_CREATE_PIPELINESTATE => write!(f,"D3D12_MESSAGE_ID_CREATE_PIPELINESTATE"),
      D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 => write!(f,"D3D12_MESSAGE_ID_CREATE_COMMANDLIST12"),
      D3D12_MESSAGE_ID_CREATE_IMAGECOMMANDLIST => write!(f,"D3D12_MESSAGE_ID_CREATE_IMAGECOMMANDLIST"),
      D3D12_MESSAGE_ID_CREATE_RESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATE_RESOURCE"),
      D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP => write!(f,"D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP"),
      D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE"),
      D3D12_MESSAGE_ID_CREATE_LIBRARY => write!(f,"D3D12_MESSAGE_ID_CREATE_LIBRARY"),
      D3D12_MESSAGE_ID_CREATE_HEAP => write!(f,"D3D12_MESSAGE_ID_CREATE_HEAP"),
      D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE => write!(f,"D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE"),
      D3D12_MESSAGE_ID_CREATE_QUERYHEAP => write!(f,"D3D12_MESSAGE_ID_CREATE_QUERYHEAP"),
      D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE"),
      D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE => write!(f,"D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE"),
      D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR => write!(f,"D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR"),
      D3D12_MESSAGE_ID_LIVE_PIPELINESTATE => write!(f,"D3D12_MESSAGE_ID_LIVE_PIPELINESTATE"),
      D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 => write!(f,"D3D12_MESSAGE_ID_LIVE_COMMANDLIST12"),
      D3D12_MESSAGE_ID_LIVE_IMAGECOMMANDLIST => write!(f,"D3D12_MESSAGE_ID_LIVE_IMAGECOMMANDLIST"),
      D3D12_MESSAGE_ID_LIVE_RESOURCE => write!(f,"D3D12_MESSAGE_ID_LIVE_RESOURCE"),
      D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP => write!(f,"D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP"),
      D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE => write!(f,"D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE"),
      D3D12_MESSAGE_ID_LIVE_LIBRARY => write!(f,"D3D12_MESSAGE_ID_LIVE_LIBRARY"),
      D3D12_MESSAGE_ID_LIVE_HEAP => write!(f,"D3D12_MESSAGE_ID_LIVE_HEAP"),
      D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE => write!(f,"D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE"),
      D3D12_MESSAGE_ID_LIVE_QUERYHEAP => write!(f,"D3D12_MESSAGE_ID_LIVE_QUERYHEAP"),
      D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE => write!(f,"D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE"),
      D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE => write!(f,"D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE"),
      D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR => write!(f,"D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR"),
      D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE => write!(f,"D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE"),
      D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 => write!(f,"D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12"),
      D3D12_MESSAGE_ID_DESTROY_IMAGECOMMANDLIST => write!(f,"D3D12_MESSAGE_ID_DESTROY_IMAGECOMMANDLIST"),
      D3D12_MESSAGE_ID_DESTROY_RESOURCE => write!(f,"D3D12_MESSAGE_ID_DESTROY_RESOURCE"),
      D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP => write!(f,"D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP"),
      D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE => write!(f,"D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE"),
      D3D12_MESSAGE_ID_DESTROY_LIBRARY => write!(f,"D3D12_MESSAGE_ID_DESTROY_LIBRARY"),
      D3D12_MESSAGE_ID_DESTROY_HEAP => write!(f,"D3D12_MESSAGE_ID_DESTROY_HEAP"),
      D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE => write!(f,"D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE"),
      D3D12_MESSAGE_ID_DESTROY_QUERYHEAP => write!(f,"D3D12_MESSAGE_ID_DESTROY_QUERYHEAP"),
      D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE => write!(f,"D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDHEAPTYPE => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDHEAPTYPE"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATERESOURCE_LARGEALLOCATION => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_LARGEALLOCATION"),
      D3D12_MESSAGE_ID_CREATERESOURCE_SMALLALLOCATION => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_SMALLALLOCATION"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDINITIALSTATE => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDINITIALSTATE"),
      D3D12_MESSAGE_ID_RESOURCE_HAS_PENDING_INITIAL_DATA => write!(f,"D3D12_MESSAGE_ID_RESOURCE_HAS_PENDING_INITIAL_DATA"),
      D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE => write!(f,"D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE"),
      D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE => write!(f,"D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE"),
      D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE => write!(f,"D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE"),
      D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH"),
      D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_BUNDLE_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_BUNDLE_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE => write!(f,"D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE"),
      D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE => write!(f,"D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE"),
      D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC"),
      D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE"),
      D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE"),
      D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES"),
      D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL"),
      D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES"),
      D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT"),
      D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE => write!(f,"D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE"),
      D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE => write!(f,"D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE"),
      D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC => write!(f,"D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC"),
      D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE => write!(f,"D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE"),
      D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE => write!(f,"D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE"),
      D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE => write!(f,"D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE"),
      D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE => write!(f,"D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE"),
      D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC => write!(f,"D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC"),
      D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_LARGE_OFFSET => write!(f,"D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_LARGE_OFFSET"),
      D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE => write!(f,"D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE"),
      D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES => write!(f,"D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES"),
      D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR => write!(f,"D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE"),
      D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE => write!(f,"D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE"),
      D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH => write!(f,"D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH"),
      D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE => write!(f,"D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE"),
      D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE => write!(f,"D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE"),
      D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND => write!(f,"D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND"),
      D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED => write!(f,"D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED"),
      D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION => write!(f,"D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION"),
      D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE => write!(f,"D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES"),
      D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP"),
      D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS => write!(f,"D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS"),
      D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY => write!(f,"D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY"),
      D3D12_MESSAGE_ID_MAKERESIDENT_INVALIDOBJECT => write!(f,"D3D12_MESSAGE_ID_MAKERESIDENT_INVALIDOBJECT"),
      D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY => write!(f,"D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY"),
      D3D12_MESSAGE_ID_EVICT_INVALIDOBJECT => write!(f,"D3D12_MESSAGE_ID_EVICT_INVALIDOBJECT"),
      D3D12_MESSAGE_ID_HEAPS_UNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_HEAPS_UNSUPPORTED"),
      D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID"),
      D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID"),
      D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID"),
      D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID"),
      D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID"),
      D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC => write!(f,"D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC"),
      D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_LARGE_OFFSET => write!(f,"D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_LARGE_OFFSET"),
      D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC => write!(f,"D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC"),
      D3D12_MESSAGE_ID_SET_INDEX_BUFFER_LARGE_OFFSET => write!(f,"D3D12_MESSAGE_ID_SET_INDEX_BUFFER_LARGE_OFFSET"),
      D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC => write!(f,"D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT"),
      D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID"),
      D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID"),
      D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID"),
      D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID => write!(f,"D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID"),
      D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS => write!(f,"D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS"),
      D3D12_MESSAGE_ID_CREATEQUERY_HEAP_JPEG_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATEQUERY_HEAP_JPEG_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS => write!(f,"D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS"),
      D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY => write!(f,"D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY"),
      D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS => write!(f,"D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS"),
      D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS => write!(f,"D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS"),
      D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED => write!(f,"D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED"),
      D3D12_MESSAGE_ID_UNSTABLE_POWER_STATE => write!(f,"D3D12_MESSAGE_ID_UNSTABLE_POWER_STATE"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE => write!(f,"D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE"),
      D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET => write!(f,"D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET"),
      D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP => write!(f,"D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP"),
      D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID => write!(f,"D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID"),
      D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID => write!(f,"D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID"),
      D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS => write!(f,"D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS"),
      D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION => write!(f,"D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION"),
      D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE => write!(f,"D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE"),
      D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED"),
      D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX => write!(f,"D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET"),
      D3D12_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS"),
      D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOMPONENTS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOMPONENTS"),
      D3D12_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D"),
      D3D12_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL"),
      D3D12_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX"),
      D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D"),
      D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB"),
      D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT"),
      D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD"),
      D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD"),
      D3D12_MESSAGE_ID_JPEGDECODE_UPSCALEUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UPSCALEUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_TIER4DOWNSCALETOLARGE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_TIER4DOWNSCALETOLARGE"),
      D3D12_MESSAGE_ID_JPEGDECODE_TIER3DOWNSCALEUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_TIER3DOWNSCALEUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS"),
      D3D12_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT"),
      D3D12_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT"),
      D3D12_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE"),
      D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS"),
      D3D12_MESSAGE_ID_JPEGDECODE_HAZARD => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_HAZARD"),
      D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE"),
      D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS"),
      D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE"),
      D3D12_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS => write!(f,"D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS"),
      D3D12_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET"),
      D3D12_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS"),
      D3D12_MESSAGE_ID_JPEGENCODE_SOURCENOT2D => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_SOURCENOT2D"),
      D3D12_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH"),
      D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDCOMPONENTS => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDCOMPONENTS"),
      D3D12_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED"),
      D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL"),
      D3D12_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE"),
      D3D12_MESSAGE_ID_JPEGENCODE_HAZARD => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_HAZARD"),
      D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE"),
      D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS"),
      D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE"),
      D3D12_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED"),
      D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY => write!(f,"D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY"),
      D3D12_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE => write!(f,"D3D12_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE"),
      D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT"),
      D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT"),
      D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH => write!(f,"D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALIDDEPTH => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALIDDEPTH"),
      D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE => write!(f,"D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE"),
      D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE => write!(f,"D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE"),
      D3D12_MESSAGE_ID_MAP_INVALIDHEAP => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDHEAP"),
      D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP"),
      D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_MAP_INVALIDRANGE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDRANGE"),
      D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE"),
      D3D12_MESSAGE_ID_MAP_NULLRANGE => write!(f,"D3D12_MESSAGE_ID_MAP_NULLRANGE"),
      D3D12_MESSAGE_ID_UNMAP_NULLRANGE => write!(f,"D3D12_MESSAGE_ID_UNMAP_NULLRANGE"),
      D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER"),
      D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN => write!(f,"D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN"),
      D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN => write!(f,"D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS"),
      D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS => write!(f,"D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX"),
      D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS => write!(f,"D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS"),
      D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX => write!(f,"D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX"),
      D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT => write!(f,"D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT"),
      D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH"),
      D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT => write!(f,"D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT"),
      D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER"),
      D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH"),
      D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE => write!(f,"D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED"),
      D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP => write!(f,"D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP"),
      D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX => write!(f,"D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX"),
      D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX => write!(f,"D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX"),
      D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP => write!(f,"D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP"),
      D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX => write!(f,"D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX"),
      D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE => write!(f,"D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE"),
      D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX => write!(f,"D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX"),
      D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED => write!(f,"D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED"),
      D3D12_MESSAGE_ID_INVALID_NODE_INDEX => write!(f,"D3D12_MESSAGE_ID_INVALID_NODE_INDEX"),
      D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE => write!(f,"D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE"),
      D3D12_MESSAGE_ID_NODE_MASK_MISMATCH => write!(f,"D3D12_MESSAGE_ID_NODE_MASK_MISMATCH"),
      D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY"),
      D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES"),
      D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES"),
      D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES => write!(f,"D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE"),
      D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS"),
      D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE => write!(f,"D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE"),
      D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS => write!(f,"D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS"),
      D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT => write!(f,"D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT"),
      D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS => write!(f,"D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS"),
      D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES => write!(f,"D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES"),
      D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE => write!(f,"D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE"),
      D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT => write!(f,"D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT"),
      D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT => write!(f,"D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT"),
      D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY => write!(f,"D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY"),
      D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE => write!(f,"D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE"),
      D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY => write!(f,"D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY"),
      D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE => write!(f,"D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE"),
      D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS => write!(f,"D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS"),
      D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE => write!(f,"D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE"),
      D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED => write!(f,"D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED"),
      D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT => write!(f,"D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT"),
      D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS => write!(f,"D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS"),
      D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED => write!(f,"D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED"),
      D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_NEEDED => write!(f,"D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_NEEDED"),
      D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY => write!(f,"D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY"),
      D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE => write!(f,"D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE"),
      D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE => write!(f,"D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE"),
      D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT => write!(f,"D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT"),
      D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT => write!(f,"D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT"),
      D3D12_MESSAGE_ID_D3D12_MESSAGES_END => write!(f,"D3D12_MESSAGE_ID_D3D12_MESSAGES_END"),

      _ => write!(f, "D3D12_MESSAGE_ID({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNKNOWN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_STRING_FROM_APPLICATION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_THIS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(52);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(53);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(54);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(55);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(56);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(57);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(58);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(59);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(60);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(61);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(62);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(63);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(65);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(66);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(67);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(68);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(69);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(70);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(71);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(72);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(73);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(74);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(75);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(76);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(77);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(78);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(79);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(80);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(81);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(82);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(83);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(84);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(85);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(86);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(87);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(88);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(89);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(90);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(91);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(92);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(93);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(94);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(95);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(96);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(97);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(98);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(99);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(100);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(101);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(102);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(103);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(104);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(105);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(106);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(107);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(108);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(109);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(110);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(111);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(112);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(113);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(114);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(115);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(116);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(117);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(118);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(119);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(120);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(121);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(122);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(123);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(124);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(125);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(126);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(127);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(129);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(130);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(131);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(132);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(133);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(134);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(135);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(136);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(137);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(138);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(139);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(140);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(141);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(142);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(143);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(144);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(145);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(146);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(147);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(148);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(149);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(150);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(151);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(152);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(153);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(154);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(155);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(156);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(157);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(158);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(159);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(160);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(161);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(162);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(163);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(164);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(165);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(166);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(167);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(168);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(169);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(170);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(171);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(172);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(173);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(174);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(175);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(176);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(177);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(178);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_THREADING_MODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(179);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_UMDRIVER_EXCEPTION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(180);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_KMDRIVER_EXCEPTION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(181);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_HARDWARE_EXCEPTION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(182);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(183);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(184);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_OUT_OF_MEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(185);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REF_INFO: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(186);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(187);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(188);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(189);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(190);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(191);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(192);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(193);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(194);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(195);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(196);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(197);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(198);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(199);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(200);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(201);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(202);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INPUTLAYOUT_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(203);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(204);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_CONSTANT_BUFFER_TOO_SMALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(205);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SAMPLER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(206);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SHADERRESOURCEVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(207);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VIEW_DIMENSION_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(208);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(209);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(210);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(211);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(212);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(213);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_GS_INPUT_PRIMITIVE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(214);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_RETURN_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(215);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_POSITION_NOT_PRESENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(216);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(217);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_BOUND_RESOURCE_MAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(218);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(219);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_OFFSET_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(220);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(221);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(222);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(223);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(224);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(225);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(226);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(227);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(228);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_SO_STRIDE_LARGER_THAN_BUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(229);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(230);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(231);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(232);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(233);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(234);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(235);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(236);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(237);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(238);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(239);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(240);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(241);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(242);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(243);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(244);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(245);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(246);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(247);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(248);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(249);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(250);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(251);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(252);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(253);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(254);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(255);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_BUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_TEXTURE1D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(257);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_TEXTURE2D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(258);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_TEXTURE3D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(259);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(260);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_RENDERTARGETVIEW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(261);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(262);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_VERTEXSHADER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(263);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_GEOMETRYSHADER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(264);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_PIXELSHADER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(265);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_INPUTLAYOUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(266);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_SAMPLER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(267);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_BLENDSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(268);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(269);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_RASTERIZERSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(270);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_QUERY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(271);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_PREDICATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(272);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_COUNTER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(273);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_DEVICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(274);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_SWAPCHAIN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(275);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(276);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(277);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(278);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(279);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(280);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(281);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(282);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(283);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(284);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(285);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(286);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(287);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(288);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(289);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(290);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(291);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(292);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(293);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(294);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(295);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(296);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(297);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(298);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(299);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(300);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(301);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(302);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(303);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(304);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(305);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(306);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(307);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(308);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(309);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(310);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(311);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(312);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(313);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(314);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(315);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(316);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(317);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(318);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(319);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(320);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(321);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(322);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(323);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(324);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(325);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(326);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(327);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(328);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(329);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(330);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(331);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(332);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(333);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(334);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(335);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(336);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(337);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(338);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(339);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(340);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(341);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(342);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(343);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(344);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(345);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(346);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(347);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(348);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(349);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(350);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(351);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(352);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(353);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(354);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(355);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(356);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(357);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(358);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(359);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(360);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(361);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(362);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(363);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(364);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(365);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(366);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(367);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(368);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(369);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(370);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(371);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(372);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(373);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(374);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(375);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(376);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(377);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(378);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(379);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(380);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(381);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(382);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(383);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(384);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(385);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(386);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(387);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(388);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(389);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(390);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(391);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(392);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(393);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SHADER_ABORT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(394);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SHADER_MESSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(395);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SHADER_ERROR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(396);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(397);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(398);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(399);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(400);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(401);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(402);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(403);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(404);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(405);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(406);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(407);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(408);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(409);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(410);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(411);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(412);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(413);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(414);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(415);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(416);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(417);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(418);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(419);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(420);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(421);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(422);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(423);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(424);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(425);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(426);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(427);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(428);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(429);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(430);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(431);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(432);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(433);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(434);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(435);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(436);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETDC_INACCESSIBLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(437);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(438);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(439);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(440);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(441);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(442);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(443);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(444);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(445);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(446);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(447);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(448);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(449);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(450);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(451);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(452);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(453);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(454);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(455);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(456);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(457);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SETEVENTONHARDWARECONTENTPROTECTIONTILT_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(458);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(459);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(460);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(461);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(462);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(463);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(464);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(465);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(466);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(467);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(468);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(469);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(470);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(471);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(472);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(473);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(474);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(475);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(476);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(477);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(478);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(479);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(480);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(481);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(482);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(483);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(484);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(485);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(486);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(487);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(488);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(489);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(490);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(491);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(492);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(493);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(494);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTILES_INVALID_PARAMETER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(495);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(496);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(497);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(498);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(499);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(500);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(501);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(502);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(503);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(504);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(505);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(506);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEDEVICE_WARNING: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(507);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(508);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_CRYPTOSESSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(509);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(510);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_CRYPTOSESSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(511);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(512);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_CRYPTOSESSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(513);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(514);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALID_SUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(515);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALID_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(516);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_UNSUPPORTED_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(517);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALID_SUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(518);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(519);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(520);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(521);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(522);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(523);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(524);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(525);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(526);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(527);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(528);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(529);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(530);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(531);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(532);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(533);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(534);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(535);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(536);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(537);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(538);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INEFFICIENT_PRESENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(539);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(540);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(541);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(542);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(543);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_OPEN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(544);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_QUERY_STATE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(545);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_BUNDLE_API: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(546);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(547);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED_WITH_INVALID_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(548);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(549);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_INDIRECT_ARGUMENT_BUFFER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(550);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMPUTE_AND_GRAPHICS_PIPELINE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(551);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(552);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_SYNC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(553);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(554);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_QUEUE_IMAGE_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(555);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_IMAGE_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(556);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(557);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(558);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_PIPELINESTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(559);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_COMMANDLIST12: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(560);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_IMAGECOMMANDLIST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(561);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(562);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(563);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(564);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_LIBRARY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(565);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_HEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(566);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(567);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_QUERYHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(568);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(569);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(570);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(571);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_PIPELINESTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(572);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_COMMANDLIST12: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(573);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_IMAGECOMMANDLIST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(574);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(575);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(576);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(577);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_LIBRARY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(578);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_HEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(579);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(580);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_QUERYHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(581);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(582);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(583);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(584);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(585);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(586);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_IMAGECOMMANDLIST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(587);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(588);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(589);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(590);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_LIBRARY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(591);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_HEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(592);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(593);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_QUERYHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(594);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(595);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDHEAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(596);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(597);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(598);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(599);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_LARGEALLOCATION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(600);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_SMALLALLOCATION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(601);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(602);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(603);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(604);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDINITIALSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(605);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_HAS_PENDING_INITIAL_DATA: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(606);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(607);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(608);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(609);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(610);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(611);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(612);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(613);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(614);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(615);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(616);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_NUMBER_MISMATCH_BUNDLE_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(617);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(618);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(619);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_BUNDLE_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(620);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_BUNDLE_PIPELINE_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(621);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(622);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(623);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(624);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(625);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(626);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(627);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(628);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(629);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(630);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(631);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(632);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(633);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(634);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(635);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(636);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(637);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(638);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(639);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(640);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(641);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(642);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(643);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(644);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(645);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(646);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(647);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(648);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(649);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(650);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_LARGE_OFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(651);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(652);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(653);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(654);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(655);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(656);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(657);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(658);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(659);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(660);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(661);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(662);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(663);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(664);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(665);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(666);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(667);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(668);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(669);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(670);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(671);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(672);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(673);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(674);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(675);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(676);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(677);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(678);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(679);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(680);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(681);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(682);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(683);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(684);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(685);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(686);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(687);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(688);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(689);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(690);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(691);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(692);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(693);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(694);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(695);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(696);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(697);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(698);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(699);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(700);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(701);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(702);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(703);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAKERESIDENT_INVALIDOBJECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(704);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(705);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EVICT_INVALIDOBJECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(706);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_HEAPS_UNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(707);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(708);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(709);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(710);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(711);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(712);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(713);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_LARGE_OFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(714);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(715);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_LARGE_OFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(716);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(717);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(718);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(719);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(720);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(721);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(722);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(723);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(724);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(725);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(726);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(727);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(728);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(729);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_JPEG_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(730);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(731);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(732);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(733);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(734);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(735);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNSTABLE_POWER_STATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(736);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(737);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(738);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(739);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(740);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(741);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(742);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(743);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(744);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(745);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(746);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(747);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(748);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(749);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(750);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(751);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(752);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(753);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(754);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(755);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(756);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(757);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(758);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(759);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(760);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(761);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDCOMPONENTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(762);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(763);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(764);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(765);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(766);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(767);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(768);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(769);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(770);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(771);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(772);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(773);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(774);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(775);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(776);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UPSCALEUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(777);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_TIER4DOWNSCALETOLARGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(778);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_TIER3DOWNSCALEUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(779);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(780);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(781);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(782);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(783);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(784);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(785);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(786);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(787);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(788);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_HAZARD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(789);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(790);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(791);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(792);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(793);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(794);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(795);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(796);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(797);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_SOURCENOT2D: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(798);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(799);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(800);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(801);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(802);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDCOMPONENTS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(803);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(804);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(805);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(806);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(807);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_HAZARD: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(808);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(809);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(810);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(811);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(812);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(813);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(814);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(815);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(816);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(817);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(818);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALIDDEPTH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(819);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(820);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(821);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(822);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(823);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(824);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(825);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(826);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(827);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(828);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(829);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_NULLRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(830);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_NULLRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(831);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(832);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(833);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(834);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(835);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(836);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(837);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(838);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(839);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(840);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(841);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(842);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(843);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(844);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(845);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(846);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(847);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(848);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(849);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(850);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(851);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(852);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(853);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(854);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(855);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(856);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(857);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(858);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(859);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(860);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(861);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(862);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(863);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(864);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(865);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(866);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(867);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(868);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(869);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(870);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(871);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(872);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(873);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(874);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(875);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(876);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(877);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(878);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(879);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(880);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(881);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(882);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(883);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(884);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(885);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(886);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(887);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(888);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(889);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(890);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(891);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(892);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(893);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(894);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(895);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(896);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(897);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(898);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(899);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_INVALID_NODE_INDEX: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(900);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(901);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NODE_MASK_MISMATCH: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(902);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(903);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(904);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(905);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(906);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(907);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(908);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(909);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(910);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(911);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(912);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(913);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(914);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(915);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(916);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(917);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(918);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(919);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(920);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(921);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(922);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(923);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(924);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(925);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(926);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(927);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_NEEDED: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(928);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(929);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(930);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(931);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(932);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(933);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_ID_D3D12_MESSAGES_END: D3D12_MESSAGE_ID = D3D12_MESSAGE_ID(934);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_MESSAGE_SEVERITY(pub u32);


impl fmt::Debug for D3D12_MESSAGE_SEVERITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_MESSAGE_SEVERITY_CORRUPTION => write!(f,"D3D12_MESSAGE_SEVERITY_CORRUPTION"),
      D3D12_MESSAGE_SEVERITY_ERROR => write!(f,"D3D12_MESSAGE_SEVERITY_ERROR"),
      D3D12_MESSAGE_SEVERITY_WARNING => write!(f,"D3D12_MESSAGE_SEVERITY_WARNING"),
      D3D12_MESSAGE_SEVERITY_INFO => write!(f,"D3D12_MESSAGE_SEVERITY_INFO"),
      D3D12_MESSAGE_SEVERITY_MESSAGE => write!(f,"D3D12_MESSAGE_SEVERITY_MESSAGE"),

      _ => write!(f, "D3D12_MESSAGE_SEVERITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_SEVERITY_CORRUPTION: D3D12_MESSAGE_SEVERITY = D3D12_MESSAGE_SEVERITY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_SEVERITY_ERROR: D3D12_MESSAGE_SEVERITY = D3D12_MESSAGE_SEVERITY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_SEVERITY_WARNING: D3D12_MESSAGE_SEVERITY = D3D12_MESSAGE_SEVERITY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_SEVERITY_INFO: D3D12_MESSAGE_SEVERITY = D3D12_MESSAGE_SEVERITY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MESSAGE_SEVERITY_MESSAGE: D3D12_MESSAGE_SEVERITY = D3D12_MESSAGE_SEVERITY(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(pub u32);


impl BitOr for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
  type Output=D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;

  fn bitor(self, rhs: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(a),D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(b)) => D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS", self.0, &[("D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_PIPELINE_STATE_FLAGS(pub u32);


impl BitOr for D3D12_PIPELINE_STATE_FLAGS {
  type Output=D3D12_PIPELINE_STATE_FLAGS;

  fn bitor(self, rhs: D3D12_PIPELINE_STATE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_PIPELINE_STATE_FLAGS(a),D3D12_PIPELINE_STATE_FLAGS(b)) => D3D12_PIPELINE_STATE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_PIPELINE_STATE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_PIPELINE_STATE_FLAGS", self.0, &[("D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PIPELINE_STATE_FLAG_NONE: D3D12_PIPELINE_STATE_FLAGS = D3D12_PIPELINE_STATE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG: D3D12_PIPELINE_STATE_FLAGS = D3D12_PIPELINE_STATE_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_PREDICATION_OP(pub u32);


impl fmt::Debug for D3D12_PREDICATION_OP {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_PREDICATION_OP_EQUAL_ZERO => write!(f,"D3D12_PREDICATION_OP_EQUAL_ZERO"),
      D3D12_PREDICATION_OP_NOT_EQUAL_ZERO => write!(f,"D3D12_PREDICATION_OP_NOT_EQUAL_ZERO"),

      _ => write!(f, "D3D12_PREDICATION_OP({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PREDICATION_OP_EQUAL_ZERO: D3D12_PREDICATION_OP = D3D12_PREDICATION_OP(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PREDICATION_OP_NOT_EQUAL_ZERO: D3D12_PREDICATION_OP = D3D12_PREDICATION_OP(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_PRIMITIVE_TOPOLOGY_TYPE(pub u32);


impl fmt::Debug for D3D12_PRIMITIVE_TOPOLOGY_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED => write!(f,"D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED"),
      D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT => write!(f,"D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT"),
      D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE => write!(f,"D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE"),
      D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE => write!(f,"D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE"),
      D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH => write!(f,"D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH"),

      _ => write!(f, "D3D12_PRIMITIVE_TOPOLOGY_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED: D3D12_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT: D3D12_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE: D3D12_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE: D3D12_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH: D3D12_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_QUERY_HEAP_TYPE(pub u32);


impl fmt::Debug for D3D12_QUERY_HEAP_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_QUERY_HEAP_TYPE_OCCLUSION => write!(f,"D3D12_QUERY_HEAP_TYPE_OCCLUSION"),
      D3D12_QUERY_HEAP_TYPE_TIMESTAMP => write!(f,"D3D12_QUERY_HEAP_TYPE_TIMESTAMP"),
      D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS => write!(f,"D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS"),
      D3D12_QUERY_HEAP_TYPE_SO_STATISTICS => write!(f,"D3D12_QUERY_HEAP_TYPE_SO_STATISTICS"),

      _ => write!(f, "D3D12_QUERY_HEAP_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_HEAP_TYPE_OCCLUSION: D3D12_QUERY_HEAP_TYPE = D3D12_QUERY_HEAP_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_HEAP_TYPE_TIMESTAMP: D3D12_QUERY_HEAP_TYPE = D3D12_QUERY_HEAP_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS: D3D12_QUERY_HEAP_TYPE = D3D12_QUERY_HEAP_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_HEAP_TYPE_SO_STATISTICS: D3D12_QUERY_HEAP_TYPE = D3D12_QUERY_HEAP_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_QUERY_TYPE(pub u32);


impl fmt::Debug for D3D12_QUERY_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_QUERY_TYPE_OCCLUSION => write!(f,"D3D12_QUERY_TYPE_OCCLUSION"),
      D3D12_QUERY_TYPE_BINARY_OCCLUSION => write!(f,"D3D12_QUERY_TYPE_BINARY_OCCLUSION"),
      D3D12_QUERY_TYPE_TIMESTAMP => write!(f,"D3D12_QUERY_TYPE_TIMESTAMP"),
      D3D12_QUERY_TYPE_PIPELINE_STATISTICS => write!(f,"D3D12_QUERY_TYPE_PIPELINE_STATISTICS"),
      D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 => write!(f,"D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0"),
      D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 => write!(f,"D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1"),
      D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 => write!(f,"D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2"),
      D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 => write!(f,"D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3"),

      _ => write!(f, "D3D12_QUERY_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_OCCLUSION: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_BINARY_OCCLUSION: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_TIMESTAMP: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_PIPELINE_STATISTICS: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3: D3D12_QUERY_TYPE = D3D12_QUERY_TYPE(7);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_BARRIER_FLAGS(pub u32);


impl BitOr for D3D12_RESOURCE_BARRIER_FLAGS {
  type Output=D3D12_RESOURCE_BARRIER_FLAGS;

  fn bitor(self, rhs: D3D12_RESOURCE_BARRIER_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_RESOURCE_BARRIER_FLAGS(a),D3D12_RESOURCE_BARRIER_FLAGS(b)) => D3D12_RESOURCE_BARRIER_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_RESOURCE_BARRIER_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_RESOURCE_BARRIER_FLAGS", self.0, &[("D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY",1), ("D3D12_RESOURCE_BARRIER_FLAG_END_ONLY",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_FLAG_NONE: D3D12_RESOURCE_BARRIER_FLAGS = D3D12_RESOURCE_BARRIER_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY: D3D12_RESOURCE_BARRIER_FLAGS = D3D12_RESOURCE_BARRIER_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_FLAG_END_ONLY: D3D12_RESOURCE_BARRIER_FLAGS = D3D12_RESOURCE_BARRIER_FLAGS(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_BARRIER_TYPE(pub u32);


impl fmt::Debug for D3D12_RESOURCE_BARRIER_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RESOURCE_BARRIER_TYPE_TRANSITION => write!(f,"D3D12_RESOURCE_BARRIER_TYPE_TRANSITION"),
      D3D12_RESOURCE_BARRIER_TYPE_ALIASING => write!(f,"D3D12_RESOURCE_BARRIER_TYPE_ALIASING"),
      D3D12_RESOURCE_BARRIER_TYPE_UAV => write!(f,"D3D12_RESOURCE_BARRIER_TYPE_UAV"),

      _ => write!(f, "D3D12_RESOURCE_BARRIER_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_TYPE_TRANSITION: D3D12_RESOURCE_BARRIER_TYPE = D3D12_RESOURCE_BARRIER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_TYPE_ALIASING: D3D12_RESOURCE_BARRIER_TYPE = D3D12_RESOURCE_BARRIER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BARRIER_TYPE_UAV: D3D12_RESOURCE_BARRIER_TYPE = D3D12_RESOURCE_BARRIER_TYPE(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_BINDING_TIER(pub u32);


impl fmt::Debug for D3D12_RESOURCE_BINDING_TIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RESOURCE_BINDING_TIER_1 => write!(f,"D3D12_RESOURCE_BINDING_TIER_1"),
      D3D12_RESOURCE_BINDING_TIER_2 => write!(f,"D3D12_RESOURCE_BINDING_TIER_2"),
      D3D12_RESOURCE_BINDING_TIER_3 => write!(f,"D3D12_RESOURCE_BINDING_TIER_3"),

      _ => write!(f, "D3D12_RESOURCE_BINDING_TIER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BINDING_TIER_1: D3D12_RESOURCE_BINDING_TIER = D3D12_RESOURCE_BINDING_TIER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BINDING_TIER_2: D3D12_RESOURCE_BINDING_TIER = D3D12_RESOURCE_BINDING_TIER(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_BINDING_TIER_3: D3D12_RESOURCE_BINDING_TIER = D3D12_RESOURCE_BINDING_TIER(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_DIMENSION(pub u32);


impl fmt::Debug for D3D12_RESOURCE_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RESOURCE_DIMENSION_UNKNOWN => write!(f,"D3D12_RESOURCE_DIMENSION_UNKNOWN"),
      D3D12_RESOURCE_DIMENSION_BUFFER => write!(f,"D3D12_RESOURCE_DIMENSION_BUFFER"),
      D3D12_RESOURCE_DIMENSION_TEXTURE1D => write!(f,"D3D12_RESOURCE_DIMENSION_TEXTURE1D"),
      D3D12_RESOURCE_DIMENSION_TEXTURE2D => write!(f,"D3D12_RESOURCE_DIMENSION_TEXTURE2D"),
      D3D12_RESOURCE_DIMENSION_TEXTURE3D => write!(f,"D3D12_RESOURCE_DIMENSION_TEXTURE3D"),

      _ => write!(f, "D3D12_RESOURCE_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_DIMENSION_UNKNOWN: D3D12_RESOURCE_DIMENSION = D3D12_RESOURCE_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_DIMENSION_BUFFER: D3D12_RESOURCE_DIMENSION = D3D12_RESOURCE_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_DIMENSION_TEXTURE1D: D3D12_RESOURCE_DIMENSION = D3D12_RESOURCE_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_DIMENSION_TEXTURE2D: D3D12_RESOURCE_DIMENSION = D3D12_RESOURCE_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_DIMENSION_TEXTURE3D: D3D12_RESOURCE_DIMENSION = D3D12_RESOURCE_DIMENSION(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_FLAGS(pub u32);


impl BitOr for D3D12_RESOURCE_FLAGS {
  type Output=D3D12_RESOURCE_FLAGS;

  fn bitor(self, rhs: D3D12_RESOURCE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_RESOURCE_FLAGS(a),D3D12_RESOURCE_FLAGS(b)) => D3D12_RESOURCE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_RESOURCE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_RESOURCE_FLAGS", self.0, &[("D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET",1), ("D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL",2), ("D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS",4), ("D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE",8), ("D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER",16), ("D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS",32)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_NONE: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS: D3D12_RESOURCE_FLAGS = D3D12_RESOURCE_FLAGS(32);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_HEAP_TIER(pub u32);


impl fmt::Debug for D3D12_RESOURCE_HEAP_TIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RESOURCE_HEAP_TIER_1 => write!(f,"D3D12_RESOURCE_HEAP_TIER_1"),
      D3D12_RESOURCE_HEAP_TIER_2 => write!(f,"D3D12_RESOURCE_HEAP_TIER_2"),

      _ => write!(f, "D3D12_RESOURCE_HEAP_TIER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_HEAP_TIER_1: D3D12_RESOURCE_HEAP_TIER = D3D12_RESOURCE_HEAP_TIER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_HEAP_TIER_2: D3D12_RESOURCE_HEAP_TIER = D3D12_RESOURCE_HEAP_TIER(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RESOURCE_STATES(pub u32);


impl fmt::Debug for D3D12_RESOURCE_STATES {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RESOURCE_STATE_COMMON => write!(f,"D3D12_RESOURCE_STATE_COMMON"),
      D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER => write!(f,"D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER"),
      D3D12_RESOURCE_STATE_INDEX_BUFFER => write!(f,"D3D12_RESOURCE_STATE_INDEX_BUFFER"),
      D3D12_RESOURCE_STATE_RENDER_TARGET => write!(f,"D3D12_RESOURCE_STATE_RENDER_TARGET"),
      D3D12_RESOURCE_STATE_UNORDERED_ACCESS => write!(f,"D3D12_RESOURCE_STATE_UNORDERED_ACCESS"),
      D3D12_RESOURCE_STATE_DEPTH_WRITE => write!(f,"D3D12_RESOURCE_STATE_DEPTH_WRITE"),
      D3D12_RESOURCE_STATE_DEPTH_READ => write!(f,"D3D12_RESOURCE_STATE_DEPTH_READ"),
      D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE => write!(f,"D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE"),
      D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE => write!(f,"D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE"),
      D3D12_RESOURCE_STATE_STREAM_OUT => write!(f,"D3D12_RESOURCE_STATE_STREAM_OUT"),
      D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT => write!(f,"D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT"),
      D3D12_RESOURCE_STATE_COPY_DEST => write!(f,"D3D12_RESOURCE_STATE_COPY_DEST"),
      D3D12_RESOURCE_STATE_COPY_SOURCE => write!(f,"D3D12_RESOURCE_STATE_COPY_SOURCE"),
      D3D12_RESOURCE_STATE_RESOLVE_DEST => write!(f,"D3D12_RESOURCE_STATE_RESOLVE_DEST"),
      D3D12_RESOURCE_STATE_RESOLVE_SOURCE => write!(f,"D3D12_RESOURCE_STATE_RESOLVE_SOURCE"),
      D3D12_RESOURCE_STATE_GENERIC_READ => write!(f,"D3D12_RESOURCE_STATE_GENERIC_READ"),

      _ => write!(f, "D3D12_RESOURCE_STATES({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_COMMON: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_INDEX_BUFFER: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_RENDER_TARGET: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_UNORDERED_ACCESS: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_DEPTH_WRITE: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_DEPTH_READ: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_STREAM_OUT: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(512);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_COPY_DEST: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(1024);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_COPY_SOURCE: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(2048);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_RESOLVE_DEST: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(4096);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_RESOLVE_SOURCE: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(8192);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_GENERIC_READ: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(2755);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_PRESENT: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RESOURCE_STATE_PREDICATION: D3D12_RESOURCE_STATES = D3D12_RESOURCE_STATES(512);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RLDO_FLAGS(pub u32);


impl BitOr for D3D12_RLDO_FLAGS {
  type Output=D3D12_RLDO_FLAGS;

  fn bitor(self, rhs: D3D12_RLDO_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_RLDO_FLAGS(a),D3D12_RLDO_FLAGS(b)) => D3D12_RLDO_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_RLDO_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_RLDO_FLAGS", self.0, &[("D3D12_RLDO_SUMMARY",1), ("D3D12_RLDO_DETAIL",2), ("D3D12_RLDO_IGNORE_INTERNAL",4)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RLDO_NONE: D3D12_RLDO_FLAGS = D3D12_RLDO_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RLDO_SUMMARY: D3D12_RLDO_FLAGS = D3D12_RLDO_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RLDO_DETAIL: D3D12_RLDO_FLAGS = D3D12_RLDO_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RLDO_IGNORE_INTERNAL: D3D12_RLDO_FLAGS = D3D12_RLDO_FLAGS(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_ROOT_PARAMETER_TYPE(pub u32);


impl fmt::Debug for D3D12_ROOT_PARAMETER_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE => write!(f,"D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE"),
      D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS => write!(f,"D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS"),
      D3D12_ROOT_PARAMETER_TYPE_CBV => write!(f,"D3D12_ROOT_PARAMETER_TYPE_CBV"),
      D3D12_ROOT_PARAMETER_TYPE_SRV => write!(f,"D3D12_ROOT_PARAMETER_TYPE_SRV"),
      D3D12_ROOT_PARAMETER_TYPE_UAV => write!(f,"D3D12_ROOT_PARAMETER_TYPE_UAV"),

      _ => write!(f, "D3D12_ROOT_PARAMETER_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE: D3D12_ROOT_PARAMETER_TYPE = D3D12_ROOT_PARAMETER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS: D3D12_ROOT_PARAMETER_TYPE = D3D12_ROOT_PARAMETER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_PARAMETER_TYPE_CBV: D3D12_ROOT_PARAMETER_TYPE = D3D12_ROOT_PARAMETER_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_PARAMETER_TYPE_SRV: D3D12_ROOT_PARAMETER_TYPE = D3D12_ROOT_PARAMETER_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_PARAMETER_TYPE_UAV: D3D12_ROOT_PARAMETER_TYPE = D3D12_ROOT_PARAMETER_TYPE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_ROOT_SIGNATURE_FLAGS(pub u32);


impl BitOr for D3D12_ROOT_SIGNATURE_FLAGS {
  type Output=D3D12_ROOT_SIGNATURE_FLAGS;

  fn bitor(self, rhs: D3D12_ROOT_SIGNATURE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_ROOT_SIGNATURE_FLAGS(a),D3D12_ROOT_SIGNATURE_FLAGS(b)) => D3D12_ROOT_SIGNATURE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_ROOT_SIGNATURE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_ROOT_SIGNATURE_FLAGS", self.0, &[("D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT",1), ("D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS",2), ("D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS",4), ("D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS",8), ("D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS",16), ("D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS",32), ("D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT",64)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_NONE: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT: D3D12_ROOT_SIGNATURE_FLAGS = D3D12_ROOT_SIGNATURE_FLAGS(64);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_RTV_DIMENSION(pub u32);


impl fmt::Debug for D3D12_RTV_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_RTV_DIMENSION_UNKNOWN => write!(f,"D3D12_RTV_DIMENSION_UNKNOWN"),
      D3D12_RTV_DIMENSION_BUFFER => write!(f,"D3D12_RTV_DIMENSION_BUFFER"),
      D3D12_RTV_DIMENSION_TEXTURE1D => write!(f,"D3D12_RTV_DIMENSION_TEXTURE1D"),
      D3D12_RTV_DIMENSION_TEXTURE1DARRAY => write!(f,"D3D12_RTV_DIMENSION_TEXTURE1DARRAY"),
      D3D12_RTV_DIMENSION_TEXTURE2D => write!(f,"D3D12_RTV_DIMENSION_TEXTURE2D"),
      D3D12_RTV_DIMENSION_TEXTURE2DARRAY => write!(f,"D3D12_RTV_DIMENSION_TEXTURE2DARRAY"),
      D3D12_RTV_DIMENSION_TEXTURE2DMS => write!(f,"D3D12_RTV_DIMENSION_TEXTURE2DMS"),
      D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY => write!(f,"D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY"),
      D3D12_RTV_DIMENSION_TEXTURE3D => write!(f,"D3D12_RTV_DIMENSION_TEXTURE3D"),

      _ => write!(f, "D3D12_RTV_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_UNKNOWN: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_BUFFER: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE1D: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE1DARRAY: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE2D: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE2DARRAY: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE2DMS: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_RTV_DIMENSION_TEXTURE3D: D3D12_RTV_DIMENSION = D3D12_RTV_DIMENSION(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_SHADER_COMPONENT_MAPPING(pub u32);


impl fmt::Debug for D3D12_SHADER_COMPONENT_MAPPING {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0"),
      D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1"),
      D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2"),
      D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3"),
      D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0"),
      D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 => write!(f,"D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1"),

      _ => write!(f, "D3D12_SHADER_COMPONENT_MAPPING({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1: D3D12_SHADER_COMPONENT_MAPPING = D3D12_SHADER_COMPONENT_MAPPING(5);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_SHADER_MIN_PRECISION_SUPPORT(pub u32);


impl fmt::Debug for D3D12_SHADER_MIN_PRECISION_SUPPORT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE => write!(f,"D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE"),
      D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT => write!(f,"D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT"),
      D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT => write!(f,"D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT"),

      _ => write!(f, "D3D12_SHADER_MIN_PRECISION_SUPPORT({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE: D3D12_SHADER_MIN_PRECISION_SUPPORT = D3D12_SHADER_MIN_PRECISION_SUPPORT(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT: D3D12_SHADER_MIN_PRECISION_SUPPORT = D3D12_SHADER_MIN_PRECISION_SUPPORT(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT: D3D12_SHADER_MIN_PRECISION_SUPPORT = D3D12_SHADER_MIN_PRECISION_SUPPORT(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_SHADER_VISIBILITY(pub u32);


impl fmt::Debug for D3D12_SHADER_VISIBILITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_SHADER_VISIBILITY_ALL => write!(f,"D3D12_SHADER_VISIBILITY_ALL"),
      D3D12_SHADER_VISIBILITY_VERTEX => write!(f,"D3D12_SHADER_VISIBILITY_VERTEX"),
      D3D12_SHADER_VISIBILITY_HULL => write!(f,"D3D12_SHADER_VISIBILITY_HULL"),
      D3D12_SHADER_VISIBILITY_DOMAIN => write!(f,"D3D12_SHADER_VISIBILITY_DOMAIN"),
      D3D12_SHADER_VISIBILITY_GEOMETRY => write!(f,"D3D12_SHADER_VISIBILITY_GEOMETRY"),
      D3D12_SHADER_VISIBILITY_PIXEL => write!(f,"D3D12_SHADER_VISIBILITY_PIXEL"),

      _ => write!(f, "D3D12_SHADER_VISIBILITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_ALL: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_VERTEX: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_HULL: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_DOMAIN: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_GEOMETRY: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SHADER_VISIBILITY_PIXEL: D3D12_SHADER_VISIBILITY = D3D12_SHADER_VISIBILITY(5);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_SRV_DIMENSION(pub u32);


impl fmt::Debug for D3D12_SRV_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_SRV_DIMENSION_UNKNOWN => write!(f,"D3D12_SRV_DIMENSION_UNKNOWN"),
      D3D12_SRV_DIMENSION_BUFFER => write!(f,"D3D12_SRV_DIMENSION_BUFFER"),
      D3D12_SRV_DIMENSION_TEXTURE1D => write!(f,"D3D12_SRV_DIMENSION_TEXTURE1D"),
      D3D12_SRV_DIMENSION_TEXTURE1DARRAY => write!(f,"D3D12_SRV_DIMENSION_TEXTURE1DARRAY"),
      D3D12_SRV_DIMENSION_TEXTURE2D => write!(f,"D3D12_SRV_DIMENSION_TEXTURE2D"),
      D3D12_SRV_DIMENSION_TEXTURE2DARRAY => write!(f,"D3D12_SRV_DIMENSION_TEXTURE2DARRAY"),
      D3D12_SRV_DIMENSION_TEXTURE2DMS => write!(f,"D3D12_SRV_DIMENSION_TEXTURE2DMS"),
      D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY => write!(f,"D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY"),
      D3D12_SRV_DIMENSION_TEXTURE3D => write!(f,"D3D12_SRV_DIMENSION_TEXTURE3D"),
      D3D12_SRV_DIMENSION_TEXTURECUBE => write!(f,"D3D12_SRV_DIMENSION_TEXTURECUBE"),
      D3D12_SRV_DIMENSION_TEXTURECUBEARRAY => write!(f,"D3D12_SRV_DIMENSION_TEXTURECUBEARRAY"),

      _ => write!(f, "D3D12_SRV_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_UNKNOWN: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_BUFFER: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE1D: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE1DARRAY: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE2D: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE2DARRAY: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE2DMS: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURE3D: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURECUBE: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_SRV_DIMENSION_TEXTURECUBEARRAY: D3D12_SRV_DIMENSION = D3D12_SRV_DIMENSION(10);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_STATIC_BORDER_COLOR(pub u32);


impl fmt::Debug for D3D12_STATIC_BORDER_COLOR {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK => write!(f,"D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK"),
      D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK => write!(f,"D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK"),
      D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE => write!(f,"D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE"),

      _ => write!(f, "D3D12_STATIC_BORDER_COLOR({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK: D3D12_STATIC_BORDER_COLOR = D3D12_STATIC_BORDER_COLOR(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK: D3D12_STATIC_BORDER_COLOR = D3D12_STATIC_BORDER_COLOR(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE: D3D12_STATIC_BORDER_COLOR = D3D12_STATIC_BORDER_COLOR(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_STENCIL_OP(pub u32);


impl fmt::Debug for D3D12_STENCIL_OP {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_STENCIL_OP_KEEP => write!(f,"D3D12_STENCIL_OP_KEEP"),
      D3D12_STENCIL_OP_ZERO => write!(f,"D3D12_STENCIL_OP_ZERO"),
      D3D12_STENCIL_OP_REPLACE => write!(f,"D3D12_STENCIL_OP_REPLACE"),
      D3D12_STENCIL_OP_INCR_SAT => write!(f,"D3D12_STENCIL_OP_INCR_SAT"),
      D3D12_STENCIL_OP_DECR_SAT => write!(f,"D3D12_STENCIL_OP_DECR_SAT"),
      D3D12_STENCIL_OP_INVERT => write!(f,"D3D12_STENCIL_OP_INVERT"),
      D3D12_STENCIL_OP_INCR => write!(f,"D3D12_STENCIL_OP_INCR"),
      D3D12_STENCIL_OP_DECR => write!(f,"D3D12_STENCIL_OP_DECR"),

      _ => write!(f, "D3D12_STENCIL_OP({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_KEEP: D3D12_STENCIL_OP = D3D12_STENCIL_OP(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_ZERO: D3D12_STENCIL_OP = D3D12_STENCIL_OP(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_REPLACE: D3D12_STENCIL_OP = D3D12_STENCIL_OP(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_INCR_SAT: D3D12_STENCIL_OP = D3D12_STENCIL_OP(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_DECR_SAT: D3D12_STENCIL_OP = D3D12_STENCIL_OP(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_INVERT: D3D12_STENCIL_OP = D3D12_STENCIL_OP(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_INCR: D3D12_STENCIL_OP = D3D12_STENCIL_OP(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_STENCIL_OP_DECR: D3D12_STENCIL_OP = D3D12_STENCIL_OP(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TEXTURE_ADDRESS_MODE(pub u32);


impl fmt::Debug for D3D12_TEXTURE_ADDRESS_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_TEXTURE_ADDRESS_MODE_WRAP => write!(f,"D3D12_TEXTURE_ADDRESS_MODE_WRAP"),
      D3D12_TEXTURE_ADDRESS_MODE_MIRROR => write!(f,"D3D12_TEXTURE_ADDRESS_MODE_MIRROR"),
      D3D12_TEXTURE_ADDRESS_MODE_CLAMP => write!(f,"D3D12_TEXTURE_ADDRESS_MODE_CLAMP"),
      D3D12_TEXTURE_ADDRESS_MODE_BORDER => write!(f,"D3D12_TEXTURE_ADDRESS_MODE_BORDER"),
      D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE => write!(f,"D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE"),

      _ => write!(f, "D3D12_TEXTURE_ADDRESS_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_ADDRESS_MODE_WRAP: D3D12_TEXTURE_ADDRESS_MODE = D3D12_TEXTURE_ADDRESS_MODE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_ADDRESS_MODE_MIRROR: D3D12_TEXTURE_ADDRESS_MODE = D3D12_TEXTURE_ADDRESS_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_ADDRESS_MODE_CLAMP: D3D12_TEXTURE_ADDRESS_MODE = D3D12_TEXTURE_ADDRESS_MODE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_ADDRESS_MODE_BORDER: D3D12_TEXTURE_ADDRESS_MODE = D3D12_TEXTURE_ADDRESS_MODE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE: D3D12_TEXTURE_ADDRESS_MODE = D3D12_TEXTURE_ADDRESS_MODE(5);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TEXTURE_COPY_TYPE(pub u32);


impl fmt::Debug for D3D12_TEXTURE_COPY_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX => write!(f,"D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX"),
      D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT => write!(f,"D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT"),

      _ => write!(f, "D3D12_TEXTURE_COPY_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX: D3D12_TEXTURE_COPY_TYPE = D3D12_TEXTURE_COPY_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT: D3D12_TEXTURE_COPY_TYPE = D3D12_TEXTURE_COPY_TYPE(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TEXTURE_LAYOUT(pub u32);


impl fmt::Debug for D3D12_TEXTURE_LAYOUT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_TEXTURE_LAYOUT_UNKNOWN => write!(f,"D3D12_TEXTURE_LAYOUT_UNKNOWN"),
      D3D12_TEXTURE_LAYOUT_ROW_MAJOR => write!(f,"D3D12_TEXTURE_LAYOUT_ROW_MAJOR"),
      D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE => write!(f,"D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE"),
      D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE => write!(f,"D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE"),

      _ => write!(f, "D3D12_TEXTURE_LAYOUT({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_LAYOUT_UNKNOWN: D3D12_TEXTURE_LAYOUT = D3D12_TEXTURE_LAYOUT(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_LAYOUT_ROW_MAJOR: D3D12_TEXTURE_LAYOUT = D3D12_TEXTURE_LAYOUT(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE: D3D12_TEXTURE_LAYOUT = D3D12_TEXTURE_LAYOUT(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE: D3D12_TEXTURE_LAYOUT = D3D12_TEXTURE_LAYOUT(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TILED_RESOURCES_TIER(pub u32);


impl fmt::Debug for D3D12_TILED_RESOURCES_TIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED => write!(f,"D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED"),
      D3D12_TILED_RESOURCES_TIER_1 => write!(f,"D3D12_TILED_RESOURCES_TIER_1"),
      D3D12_TILED_RESOURCES_TIER_2 => write!(f,"D3D12_TILED_RESOURCES_TIER_2"),
      D3D12_TILED_RESOURCES_TIER_3 => write!(f,"D3D12_TILED_RESOURCES_TIER_3"),

      _ => write!(f, "D3D12_TILED_RESOURCES_TIER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED: D3D12_TILED_RESOURCES_TIER = D3D12_TILED_RESOURCES_TIER(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILED_RESOURCES_TIER_1: D3D12_TILED_RESOURCES_TIER = D3D12_TILED_RESOURCES_TIER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILED_RESOURCES_TIER_2: D3D12_TILED_RESOURCES_TIER = D3D12_TILED_RESOURCES_TIER(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILED_RESOURCES_TIER_3: D3D12_TILED_RESOURCES_TIER = D3D12_TILED_RESOURCES_TIER(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TILE_COPY_FLAGS(pub u32);


impl BitOr for D3D12_TILE_COPY_FLAGS {
  type Output=D3D12_TILE_COPY_FLAGS;

  fn bitor(self, rhs: D3D12_TILE_COPY_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_TILE_COPY_FLAGS(a),D3D12_TILE_COPY_FLAGS(b)) => D3D12_TILE_COPY_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_TILE_COPY_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_TILE_COPY_FLAGS", self.0, &[("D3D12_TILE_COPY_FLAG_NO_HAZARD",1), ("D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE",2), ("D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER",4)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_COPY_FLAG_NONE: D3D12_TILE_COPY_FLAGS = D3D12_TILE_COPY_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_COPY_FLAG_NO_HAZARD: D3D12_TILE_COPY_FLAGS = D3D12_TILE_COPY_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE: D3D12_TILE_COPY_FLAGS = D3D12_TILE_COPY_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER: D3D12_TILE_COPY_FLAGS = D3D12_TILE_COPY_FLAGS(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TILE_MAPPING_FLAGS(pub u32);


impl BitOr for D3D12_TILE_MAPPING_FLAGS {
  type Output=D3D12_TILE_MAPPING_FLAGS;

  fn bitor(self, rhs: D3D12_TILE_MAPPING_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_TILE_MAPPING_FLAGS(a),D3D12_TILE_MAPPING_FLAGS(b)) => D3D12_TILE_MAPPING_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_TILE_MAPPING_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_TILE_MAPPING_FLAGS", self.0, &[("D3D12_TILE_MAPPING_FLAG_NO_HAZARD",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_MAPPING_FLAG_NONE: D3D12_TILE_MAPPING_FLAGS = D3D12_TILE_MAPPING_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_MAPPING_FLAG_NO_HAZARD: D3D12_TILE_MAPPING_FLAGS = D3D12_TILE_MAPPING_FLAGS(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_TILE_RANGE_FLAGS(pub u32);


impl BitOr for D3D12_TILE_RANGE_FLAGS {
  type Output=D3D12_TILE_RANGE_FLAGS;

  fn bitor(self, rhs: D3D12_TILE_RANGE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (D3D12_TILE_RANGE_FLAGS(a),D3D12_TILE_RANGE_FLAGS(b)) => D3D12_TILE_RANGE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for D3D12_TILE_RANGE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("D3D12_TILE_RANGE_FLAGS", self.0, &[("D3D12_TILE_RANGE_FLAG_NULL",1), ("D3D12_TILE_RANGE_FLAG_SKIP",2), ("D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE",4)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_RANGE_FLAG_NONE: D3D12_TILE_RANGE_FLAGS = D3D12_TILE_RANGE_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_RANGE_FLAG_NULL: D3D12_TILE_RANGE_FLAGS = D3D12_TILE_RANGE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_RANGE_FLAG_SKIP: D3D12_TILE_RANGE_FLAGS = D3D12_TILE_RANGE_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE: D3D12_TILE_RANGE_FLAGS = D3D12_TILE_RANGE_FLAGS(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D12_UAV_DIMENSION(pub u32);


impl fmt::Debug for D3D12_UAV_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D12_UAV_DIMENSION_UNKNOWN => write!(f,"D3D12_UAV_DIMENSION_UNKNOWN"),
      D3D12_UAV_DIMENSION_BUFFER => write!(f,"D3D12_UAV_DIMENSION_BUFFER"),
      D3D12_UAV_DIMENSION_TEXTURE1D => write!(f,"D3D12_UAV_DIMENSION_TEXTURE1D"),
      D3D12_UAV_DIMENSION_TEXTURE1DARRAY => write!(f,"D3D12_UAV_DIMENSION_TEXTURE1DARRAY"),
      D3D12_UAV_DIMENSION_TEXTURE2D => write!(f,"D3D12_UAV_DIMENSION_TEXTURE2D"),
      D3D12_UAV_DIMENSION_TEXTURE2DARRAY => write!(f,"D3D12_UAV_DIMENSION_TEXTURE2DARRAY"),
      D3D12_UAV_DIMENSION_TEXTURE3D => write!(f,"D3D12_UAV_DIMENSION_TEXTURE3D"),

      _ => write!(f, "D3D12_UAV_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_UNKNOWN: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_BUFFER: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_TEXTURE1D: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_TEXTURE1DARRAY: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_TEXTURE2D: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_TEXTURE2DARRAY: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D12_UAV_DIMENSION_TEXTURE3D: D3D12_UAV_DIMENSION = D3D12_UAV_DIMENSION(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_DRIVER_TYPE(pub u32);


impl fmt::Debug for D3D_DRIVER_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_DRIVER_TYPE_UNKNOWN => write!(f,"D3D_DRIVER_TYPE_UNKNOWN"),
      D3D_DRIVER_TYPE_HARDWARE => write!(f,"D3D_DRIVER_TYPE_HARDWARE"),
      D3D_DRIVER_TYPE_REFERENCE => write!(f,"D3D_DRIVER_TYPE_REFERENCE"),
      D3D_DRIVER_TYPE_NULL => write!(f,"D3D_DRIVER_TYPE_NULL"),
      D3D_DRIVER_TYPE_SOFTWARE => write!(f,"D3D_DRIVER_TYPE_SOFTWARE"),
      D3D_DRIVER_TYPE_WARP => write!(f,"D3D_DRIVER_TYPE_WARP"),

      _ => write!(f, "D3D_DRIVER_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_UNKNOWN: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_HARDWARE: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_REFERENCE: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_NULL: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_SOFTWARE: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_DRIVER_TYPE_WARP: D3D_DRIVER_TYPE = D3D_DRIVER_TYPE(5);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_FEATURE_LEVEL(pub u32);


impl fmt::Debug for D3D_FEATURE_LEVEL {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_FEATURE_LEVEL_9_1 => write!(f,"D3D_FEATURE_LEVEL_9_1"),
      D3D_FEATURE_LEVEL_9_2 => write!(f,"D3D_FEATURE_LEVEL_9_2"),
      D3D_FEATURE_LEVEL_9_3 => write!(f,"D3D_FEATURE_LEVEL_9_3"),
      D3D_FEATURE_LEVEL_10_0 => write!(f,"D3D_FEATURE_LEVEL_10_0"),
      D3D_FEATURE_LEVEL_10_1 => write!(f,"D3D_FEATURE_LEVEL_10_1"),
      D3D_FEATURE_LEVEL_11_0 => write!(f,"D3D_FEATURE_LEVEL_11_0"),
      D3D_FEATURE_LEVEL_11_1 => write!(f,"D3D_FEATURE_LEVEL_11_1"),
      D3D_FEATURE_LEVEL_12_0 => write!(f,"D3D_FEATURE_LEVEL_12_0"),
      D3D_FEATURE_LEVEL_12_1 => write!(f,"D3D_FEATURE_LEVEL_12_1"),

      _ => write!(f, "D3D_FEATURE_LEVEL({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_9_1: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(37120);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_9_2: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(37376);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_9_3: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(37632);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_10_0: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(40960);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_10_1: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(41216);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_11_0: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(45056);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_11_1: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(45312);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_12_0: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(49152);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_FEATURE_LEVEL_12_1: D3D_FEATURE_LEVEL = D3D_FEATURE_LEVEL(49408);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_INTERPOLATION_MODE(pub u32);


impl fmt::Debug for D3D_INTERPOLATION_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_INTERPOLATION_UNDEFINED => write!(f,"D3D_INTERPOLATION_UNDEFINED"),
      D3D_INTERPOLATION_CONSTANT => write!(f,"D3D_INTERPOLATION_CONSTANT"),
      D3D_INTERPOLATION_LINEAR => write!(f,"D3D_INTERPOLATION_LINEAR"),
      D3D_INTERPOLATION_LINEAR_CENTROID => write!(f,"D3D_INTERPOLATION_LINEAR_CENTROID"),
      D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE => write!(f,"D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE"),
      D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID => write!(f,"D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID"),
      D3D_INTERPOLATION_LINEAR_SAMPLE => write!(f,"D3D_INTERPOLATION_LINEAR_SAMPLE"),
      D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE => write!(f,"D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE"),

      _ => write!(f, "D3D_INTERPOLATION_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_UNDEFINED: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_CONSTANT: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR_CENTROID: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR_SAMPLE: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE: D3D_INTERPOLATION_MODE = D3D_INTERPOLATION_MODE(7);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_MIN_PRECISION(pub u32);


impl fmt::Debug for D3D_MIN_PRECISION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_MIN_PRECISION_DEFAULT => write!(f,"D3D_MIN_PRECISION_DEFAULT"),
      D3D_MIN_PRECISION_FLOAT_16 => write!(f,"D3D_MIN_PRECISION_FLOAT_16"),
      D3D_MIN_PRECISION_FLOAT_2_8 => write!(f,"D3D_MIN_PRECISION_FLOAT_2_8"),
      D3D_MIN_PRECISION_RESERVED => write!(f,"D3D_MIN_PRECISION_RESERVED"),
      D3D_MIN_PRECISION_SINT_16 => write!(f,"D3D_MIN_PRECISION_SINT_16"),
      D3D_MIN_PRECISION_UINT_16 => write!(f,"D3D_MIN_PRECISION_UINT_16"),
      D3D_MIN_PRECISION_ANY_16 => write!(f,"D3D_MIN_PRECISION_ANY_16"),
      D3D_MIN_PRECISION_ANY_10 => write!(f,"D3D_MIN_PRECISION_ANY_10"),

      _ => write!(f, "D3D_MIN_PRECISION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_DEFAULT: D3D_MIN_PRECISION = D3D_MIN_PRECISION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_FLOAT_16: D3D_MIN_PRECISION = D3D_MIN_PRECISION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_FLOAT_2_8: D3D_MIN_PRECISION = D3D_MIN_PRECISION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_RESERVED: D3D_MIN_PRECISION = D3D_MIN_PRECISION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_SINT_16: D3D_MIN_PRECISION = D3D_MIN_PRECISION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_UINT_16: D3D_MIN_PRECISION = D3D_MIN_PRECISION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_ANY_16: D3D_MIN_PRECISION = D3D_MIN_PRECISION(240);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_MIN_PRECISION_ANY_10: D3D_MIN_PRECISION = D3D_MIN_PRECISION(241);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_NAME(pub u32);


impl fmt::Debug for D3D_NAME {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_NAME_UNDEFINED => write!(f,"D3D_NAME_UNDEFINED"),
      D3D_NAME_POSITION => write!(f,"D3D_NAME_POSITION"),
      D3D_NAME_CLIP_DISTANCE => write!(f,"D3D_NAME_CLIP_DISTANCE"),
      D3D_NAME_CULL_DISTANCE => write!(f,"D3D_NAME_CULL_DISTANCE"),
      D3D_NAME_RENDER_TARGET_ARRAY_INDEX => write!(f,"D3D_NAME_RENDER_TARGET_ARRAY_INDEX"),
      D3D_NAME_VIEWPORT_ARRAY_INDEX => write!(f,"D3D_NAME_VIEWPORT_ARRAY_INDEX"),
      D3D_NAME_VERTEX_ID => write!(f,"D3D_NAME_VERTEX_ID"),
      D3D_NAME_PRIMITIVE_ID => write!(f,"D3D_NAME_PRIMITIVE_ID"),
      D3D_NAME_INSTANCE_ID => write!(f,"D3D_NAME_INSTANCE_ID"),
      D3D_NAME_IS_FRONT_FACE => write!(f,"D3D_NAME_IS_FRONT_FACE"),
      D3D_NAME_SAMPLE_INDEX => write!(f,"D3D_NAME_SAMPLE_INDEX"),
      D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR => write!(f,"D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR"),
      D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR => write!(f,"D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR"),
      D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR => write!(f,"D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR"),
      D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR => write!(f,"D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR"),
      D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR => write!(f,"D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR"),
      D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR => write!(f,"D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR"),
      D3D_NAME_TARGET => write!(f,"D3D_NAME_TARGET"),
      D3D_NAME_DEPTH => write!(f,"D3D_NAME_DEPTH"),
      D3D_NAME_COVERAGE => write!(f,"D3D_NAME_COVERAGE"),
      D3D_NAME_DEPTH_GREATER_EQUAL => write!(f,"D3D_NAME_DEPTH_GREATER_EQUAL"),
      D3D_NAME_DEPTH_LESS_EQUAL => write!(f,"D3D_NAME_DEPTH_LESS_EQUAL"),
      D3D_NAME_STENCIL_REF => write!(f,"D3D_NAME_STENCIL_REF"),
      D3D_NAME_INNER_COVERAGE => write!(f,"D3D_NAME_INNER_COVERAGE"),

      _ => write!(f, "D3D_NAME({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_UNDEFINED: D3D_NAME = D3D_NAME(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_POSITION: D3D_NAME = D3D_NAME(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_CLIP_DISTANCE: D3D_NAME = D3D_NAME(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_CULL_DISTANCE: D3D_NAME = D3D_NAME(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_RENDER_TARGET_ARRAY_INDEX: D3D_NAME = D3D_NAME(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_VIEWPORT_ARRAY_INDEX: D3D_NAME = D3D_NAME(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_VERTEX_ID: D3D_NAME = D3D_NAME(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_PRIMITIVE_ID: D3D_NAME = D3D_NAME(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_INSTANCE_ID: D3D_NAME = D3D_NAME(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_IS_FRONT_FACE: D3D_NAME = D3D_NAME(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_SAMPLE_INDEX: D3D_NAME = D3D_NAME(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR: D3D_NAME = D3D_NAME(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR: D3D_NAME = D3D_NAME(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR: D3D_NAME = D3D_NAME(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR: D3D_NAME = D3D_NAME(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR: D3D_NAME = D3D_NAME(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR: D3D_NAME = D3D_NAME(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_TARGET: D3D_NAME = D3D_NAME(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_DEPTH: D3D_NAME = D3D_NAME(65);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_COVERAGE: D3D_NAME = D3D_NAME(66);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_DEPTH_GREATER_EQUAL: D3D_NAME = D3D_NAME(67);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_DEPTH_LESS_EQUAL: D3D_NAME = D3D_NAME(68);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_STENCIL_REF: D3D_NAME = D3D_NAME(69);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_NAME_INNER_COVERAGE: D3D_NAME = D3D_NAME(70);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_UNDEFINED: D3D_NAME = D3D_NAME(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_POSITION: D3D_NAME = D3D_NAME(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_CLIP_DISTANCE: D3D_NAME = D3D_NAME(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_CULL_DISTANCE: D3D_NAME = D3D_NAME(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_RENDER_TARGET_ARRAY_INDEX: D3D_NAME = D3D_NAME(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_VIEWPORT_ARRAY_INDEX: D3D_NAME = D3D_NAME(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_VERTEX_ID: D3D_NAME = D3D_NAME(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_PRIMITIVE_ID: D3D_NAME = D3D_NAME(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_INSTANCE_ID: D3D_NAME = D3D_NAME(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_IS_FRONT_FACE: D3D_NAME = D3D_NAME(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_SAMPLE_INDEX: D3D_NAME = D3D_NAME(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_TARGET: D3D_NAME = D3D_NAME(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_DEPTH: D3D_NAME = D3D_NAME(65);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_NAME_COVERAGE: D3D_NAME = D3D_NAME(66);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR: D3D_NAME = D3D_NAME(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR: D3D_NAME = D3D_NAME(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR: D3D_NAME = D3D_NAME(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR: D3D_NAME = D3D_NAME(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR: D3D_NAME = D3D_NAME(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR: D3D_NAME = D3D_NAME(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_DEPTH_GREATER_EQUAL: D3D_NAME = D3D_NAME(67);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_DEPTH_LESS_EQUAL: D3D_NAME = D3D_NAME(68);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_STENCIL_REF: D3D_NAME = D3D_NAME(69);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_NAME_INNER_COVERAGE: D3D_NAME = D3D_NAME(70);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_PRIMITIVE(pub u32);


impl fmt::Debug for D3D_PRIMITIVE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_PRIMITIVE_UNDEFINED => write!(f,"D3D_PRIMITIVE_UNDEFINED"),
      D3D_PRIMITIVE_POINT => write!(f,"D3D_PRIMITIVE_POINT"),
      D3D_PRIMITIVE_LINE => write!(f,"D3D_PRIMITIVE_LINE"),
      D3D_PRIMITIVE_TRIANGLE => write!(f,"D3D_PRIMITIVE_TRIANGLE"),
      D3D_PRIMITIVE_LINE_ADJ => write!(f,"D3D_PRIMITIVE_LINE_ADJ"),
      D3D_PRIMITIVE_TRIANGLE_ADJ => write!(f,"D3D_PRIMITIVE_TRIANGLE_ADJ"),
      D3D_PRIMITIVE_1_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_1_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_2_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_2_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_3_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_3_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_4_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_4_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_5_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_5_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_6_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_6_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_7_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_7_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_8_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_8_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_9_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_9_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_10_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_10_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_11_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_11_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_12_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_12_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_13_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_13_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_14_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_14_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_15_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_15_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_16_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_16_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_17_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_17_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_18_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_18_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_19_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_19_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_20_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_20_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_21_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_21_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_22_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_22_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_23_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_23_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_24_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_24_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_25_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_25_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_26_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_26_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_27_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_27_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_28_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_28_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_29_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_29_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_30_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_30_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_31_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_31_CONTROL_POINT_PATCH"),
      D3D_PRIMITIVE_32_CONTROL_POINT_PATCH => write!(f,"D3D_PRIMITIVE_32_CONTROL_POINT_PATCH"),

      _ => write!(f, "D3D_PRIMITIVE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_UNDEFINED: D3D_PRIMITIVE = D3D_PRIMITIVE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_POINT: D3D_PRIMITIVE = D3D_PRIMITIVE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_LINE: D3D_PRIMITIVE = D3D_PRIMITIVE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TRIANGLE: D3D_PRIMITIVE = D3D_PRIMITIVE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_LINE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TRIANGLE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_1_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_2_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_3_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_4_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_5_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_6_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_7_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_8_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_9_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_10_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_11_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_12_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_13_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_14_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_15_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_16_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_17_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_18_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_19_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_20_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_21_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_22_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_23_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_24_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_25_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_26_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_27_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_28_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_29_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_30_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_31_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_32_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_UNDEFINED: D3D_PRIMITIVE = D3D_PRIMITIVE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_POINT: D3D_PRIMITIVE = D3D_PRIMITIVE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_LINE: D3D_PRIMITIVE = D3D_PRIMITIVE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TRIANGLE: D3D_PRIMITIVE = D3D_PRIMITIVE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_LINE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TRIANGLE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_UNDEFINED: D3D_PRIMITIVE = D3D_PRIMITIVE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_POINT: D3D_PRIMITIVE = D3D_PRIMITIVE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_LINE: D3D_PRIMITIVE = D3D_PRIMITIVE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TRIANGLE: D3D_PRIMITIVE = D3D_PRIMITIVE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_LINE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TRIANGLE_ADJ: D3D_PRIMITIVE = D3D_PRIMITIVE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH: D3D_PRIMITIVE = D3D_PRIMITIVE(39);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_PRIMITIVE_TOPOLOGY(pub u32);


impl fmt::Debug for D3D_PRIMITIVE_TOPOLOGY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_PRIMITIVE_TOPOLOGY_UNDEFINED => write!(f,"D3D_PRIMITIVE_TOPOLOGY_UNDEFINED"),
      D3D_PRIMITIVE_TOPOLOGY_POINTLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_POINTLIST"),
      D3D_PRIMITIVE_TOPOLOGY_LINELIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_LINELIST"),
      D3D_PRIMITIVE_TOPOLOGY_LINESTRIP => write!(f,"D3D_PRIMITIVE_TOPOLOGY_LINESTRIP"),
      D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST"),
      D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP => write!(f,"D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP"),
      D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ => write!(f,"D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ"),
      D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ => write!(f,"D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ"),
      D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ => write!(f,"D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ"),
      D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ => write!(f,"D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ"),
      D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST"),
      D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST => write!(f,"D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST"),

      _ => write!(f, "D3D_PRIMITIVE_TOPOLOGY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_UNDEFINED: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_POINTLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_LINELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(52);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(53);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(54);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(55);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(56);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(57);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(58);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(59);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(60);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(61);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(62);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(63);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_POINTLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_LINELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_POINTLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_LINELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(52);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(53);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(54);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(55);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(56);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(57);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(58);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(59);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(60);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(61);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(62);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(63);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST: D3D_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY(64);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_REGISTER_COMPONENT_TYPE(pub u32);


impl fmt::Debug for D3D_REGISTER_COMPONENT_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_REGISTER_COMPONENT_UNKNOWN => write!(f,"D3D_REGISTER_COMPONENT_UNKNOWN"),
      D3D_REGISTER_COMPONENT_UINT32 => write!(f,"D3D_REGISTER_COMPONENT_UINT32"),
      D3D_REGISTER_COMPONENT_SINT32 => write!(f,"D3D_REGISTER_COMPONENT_SINT32"),
      D3D_REGISTER_COMPONENT_FLOAT32 => write!(f,"D3D_REGISTER_COMPONENT_FLOAT32"),

      _ => write!(f, "D3D_REGISTER_COMPONENT_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_REGISTER_COMPONENT_UNKNOWN: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_REGISTER_COMPONENT_UINT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_REGISTER_COMPONENT_SINT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_REGISTER_COMPONENT_FLOAT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_REGISTER_COMPONENT_UNKNOWN: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_REGISTER_COMPONENT_UINT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_REGISTER_COMPONENT_SINT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_REGISTER_COMPONENT_FLOAT32: D3D_REGISTER_COMPONENT_TYPE = D3D_REGISTER_COMPONENT_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_RESOURCE_RETURN_TYPE(pub u32);


impl fmt::Debug for D3D_RESOURCE_RETURN_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_RETURN_TYPE_UNORM => write!(f,"D3D_RETURN_TYPE_UNORM"),
      D3D_RETURN_TYPE_SNORM => write!(f,"D3D_RETURN_TYPE_SNORM"),
      D3D_RETURN_TYPE_SINT => write!(f,"D3D_RETURN_TYPE_SINT"),
      D3D_RETURN_TYPE_UINT => write!(f,"D3D_RETURN_TYPE_UINT"),
      D3D_RETURN_TYPE_FLOAT => write!(f,"D3D_RETURN_TYPE_FLOAT"),
      D3D_RETURN_TYPE_MIXED => write!(f,"D3D_RETURN_TYPE_MIXED"),
      D3D_RETURN_TYPE_DOUBLE => write!(f,"D3D_RETURN_TYPE_DOUBLE"),
      D3D_RETURN_TYPE_CONTINUED => write!(f,"D3D_RETURN_TYPE_CONTINUED"),

      _ => write!(f, "D3D_RESOURCE_RETURN_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_UNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_SNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_SINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_UINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_FLOAT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_MIXED: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_DOUBLE: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_RETURN_TYPE_CONTINUED: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_UNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_SNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_SINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_UINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_FLOAT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_RETURN_TYPE_MIXED: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_UNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_SNORM: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_SINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_UINT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_FLOAT: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_MIXED: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_DOUBLE: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_RETURN_TYPE_CONTINUED: D3D_RESOURCE_RETURN_TYPE = D3D_RESOURCE_RETURN_TYPE(8);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_ROOT_SIGNATURE_VERSION(pub u32);


impl fmt::Debug for D3D_ROOT_SIGNATURE_VERSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_ROOT_SIGNATURE_VERSION_1 => write!(f,"D3D_ROOT_SIGNATURE_VERSION_1"),

      _ => write!(f, "D3D_ROOT_SIGNATURE_VERSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_ROOT_SIGNATURE_VERSION_1: D3D_ROOT_SIGNATURE_VERSION = D3D_ROOT_SIGNATURE_VERSION(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_SRV_DIMENSION(pub u32);


impl fmt::Debug for D3D_SRV_DIMENSION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_SRV_DIMENSION_UNKNOWN => write!(f,"D3D_SRV_DIMENSION_UNKNOWN"),
      D3D_SRV_DIMENSION_BUFFER => write!(f,"D3D_SRV_DIMENSION_BUFFER"),
      D3D_SRV_DIMENSION_TEXTURE1D => write!(f,"D3D_SRV_DIMENSION_TEXTURE1D"),
      D3D_SRV_DIMENSION_TEXTURE1DARRAY => write!(f,"D3D_SRV_DIMENSION_TEXTURE1DARRAY"),
      D3D_SRV_DIMENSION_TEXTURE2D => write!(f,"D3D_SRV_DIMENSION_TEXTURE2D"),
      D3D_SRV_DIMENSION_TEXTURE2DARRAY => write!(f,"D3D_SRV_DIMENSION_TEXTURE2DARRAY"),
      D3D_SRV_DIMENSION_TEXTURE2DMS => write!(f,"D3D_SRV_DIMENSION_TEXTURE2DMS"),
      D3D_SRV_DIMENSION_TEXTURE2DMSARRAY => write!(f,"D3D_SRV_DIMENSION_TEXTURE2DMSARRAY"),
      D3D_SRV_DIMENSION_TEXTURE3D => write!(f,"D3D_SRV_DIMENSION_TEXTURE3D"),
      D3D_SRV_DIMENSION_TEXTURECUBE => write!(f,"D3D_SRV_DIMENSION_TEXTURECUBE"),
      D3D_SRV_DIMENSION_TEXTURECUBEARRAY => write!(f,"D3D_SRV_DIMENSION_TEXTURECUBEARRAY"),
      D3D_SRV_DIMENSION_BUFFEREX => write!(f,"D3D_SRV_DIMENSION_BUFFEREX"),

      _ => write!(f, "D3D_SRV_DIMENSION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_UNKNOWN: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_BUFFER: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE1D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE1DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE2D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE2DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE2DMS: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE2DMSARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURE3D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURECUBE: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_TEXTURECUBEARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SRV_DIMENSION_BUFFEREX: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_UNKNOWN: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_BUFFER: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE1D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE1DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE2D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE2DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE2DMS: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURE3D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SRV_DIMENSION_TEXTURECUBE: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_UNKNOWN: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_BUFFER: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE1D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE2D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE2DMS: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURE3D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURECUBE: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_UNKNOWN: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_BUFFER: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE1D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE1DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE2D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE2DARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE2DMS: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURE3D: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURECUBE: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_TEXTURECUBEARRAY: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SRV_DIMENSION_BUFFEREX: D3D_SRV_DIMENSION = D3D_SRV_DIMENSION(11);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_TESSELLATOR_DOMAIN(pub u32);


impl fmt::Debug for D3D_TESSELLATOR_DOMAIN {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_TESSELLATOR_DOMAIN_UNDEFINED => write!(f,"D3D_TESSELLATOR_DOMAIN_UNDEFINED"),
      D3D_TESSELLATOR_DOMAIN_ISOLINE => write!(f,"D3D_TESSELLATOR_DOMAIN_ISOLINE"),
      D3D_TESSELLATOR_DOMAIN_TRI => write!(f,"D3D_TESSELLATOR_DOMAIN_TRI"),
      D3D_TESSELLATOR_DOMAIN_QUAD => write!(f,"D3D_TESSELLATOR_DOMAIN_QUAD"),

      _ => write!(f, "D3D_TESSELLATOR_DOMAIN({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_DOMAIN_UNDEFINED: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_DOMAIN_ISOLINE: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_DOMAIN_TRI: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_DOMAIN_QUAD: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_DOMAIN_UNDEFINED: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_DOMAIN_ISOLINE: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_DOMAIN_TRI: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_DOMAIN_QUAD: D3D_TESSELLATOR_DOMAIN = D3D_TESSELLATOR_DOMAIN(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_TESSELLATOR_OUTPUT_PRIMITIVE(pub u32);


impl fmt::Debug for D3D_TESSELLATOR_OUTPUT_PRIMITIVE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_TESSELLATOR_OUTPUT_UNDEFINED => write!(f,"D3D_TESSELLATOR_OUTPUT_UNDEFINED"),
      D3D_TESSELLATOR_OUTPUT_POINT => write!(f,"D3D_TESSELLATOR_OUTPUT_POINT"),
      D3D_TESSELLATOR_OUTPUT_LINE => write!(f,"D3D_TESSELLATOR_OUTPUT_LINE"),
      D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW => write!(f,"D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW"),
      D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW => write!(f,"D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW"),

      _ => write!(f, "D3D_TESSELLATOR_OUTPUT_PRIMITIVE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_OUTPUT_UNDEFINED: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_OUTPUT_POINT: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_OUTPUT_LINE: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_OUTPUT_UNDEFINED: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_OUTPUT_POINT: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_OUTPUT_LINE: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW: D3D_TESSELLATOR_OUTPUT_PRIMITIVE = D3D_TESSELLATOR_OUTPUT_PRIMITIVE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct D3D_TESSELLATOR_PARTITIONING(pub u32);


impl fmt::Debug for D3D_TESSELLATOR_PARTITIONING {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_TESSELLATOR_PARTITIONING_UNDEFINED => write!(f,"D3D_TESSELLATOR_PARTITIONING_UNDEFINED"),
      D3D_TESSELLATOR_PARTITIONING_INTEGER => write!(f,"D3D_TESSELLATOR_PARTITIONING_INTEGER"),
      D3D_TESSELLATOR_PARTITIONING_POW2 => write!(f,"D3D_TESSELLATOR_PARTITIONING_POW2"),
      D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD => write!(f,"D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD"),
      D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN => write!(f,"D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN"),

      _ => write!(f, "D3D_TESSELLATOR_PARTITIONING({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_PARTITIONING_UNDEFINED: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_PARTITIONING_INTEGER: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_PARTITIONING_POW2: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_PARTITIONING_UNDEFINED: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_PARTITIONING_INTEGER: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_PARTITIONING_POW2: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN: D3D_TESSELLATOR_PARTITIONING = D3D_TESSELLATOR_PARTITIONING(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_ADAPTER_FLAG(pub u32);


impl BitOr for DXGI_ADAPTER_FLAG {
  type Output=DXGI_ADAPTER_FLAG;

  fn bitor(self, rhs: DXGI_ADAPTER_FLAG) -> Self::Output {
    match (self,rhs) {
      (DXGI_ADAPTER_FLAG(a),DXGI_ADAPTER_FLAG(b)) => DXGI_ADAPTER_FLAG(a|b)
    }
  }
}

impl fmt::Debug for DXGI_ADAPTER_FLAG {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_ADAPTER_FLAG", self.0, &[("DXGI_ADAPTER_FLAG_REMOTE",1), ("DXGI_ADAPTER_FLAG_SOFTWARE",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ADAPTER_FLAG_NONE: DXGI_ADAPTER_FLAG = DXGI_ADAPTER_FLAG(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ADAPTER_FLAG_REMOTE: DXGI_ADAPTER_FLAG = DXGI_ADAPTER_FLAG(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ADAPTER_FLAG_SOFTWARE: DXGI_ADAPTER_FLAG = DXGI_ADAPTER_FLAG(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ADAPTER_FLAG_FORCE_DWORD: DXGI_ADAPTER_FLAG = DXGI_ADAPTER_FLAG(4294967295);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_ALPHA_MODE(pub u32);


impl fmt::Debug for DXGI_ALPHA_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_ALPHA_MODE_UNSPECIFIED => write!(f,"DXGI_ALPHA_MODE_UNSPECIFIED"),
      DXGI_ALPHA_MODE_PREMULTIPLIED => write!(f,"DXGI_ALPHA_MODE_PREMULTIPLIED"),
      DXGI_ALPHA_MODE_STRAIGHT => write!(f,"DXGI_ALPHA_MODE_STRAIGHT"),
      DXGI_ALPHA_MODE_IGNORE => write!(f,"DXGI_ALPHA_MODE_IGNORE"),
      DXGI_ALPHA_MODE_FORCE_DWORD => write!(f,"DXGI_ALPHA_MODE_FORCE_DWORD"),

      _ => write!(f, "DXGI_ALPHA_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ALPHA_MODE_UNSPECIFIED: DXGI_ALPHA_MODE = DXGI_ALPHA_MODE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ALPHA_MODE_PREMULTIPLIED: DXGI_ALPHA_MODE = DXGI_ALPHA_MODE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ALPHA_MODE_STRAIGHT: DXGI_ALPHA_MODE = DXGI_ALPHA_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ALPHA_MODE_IGNORE: DXGI_ALPHA_MODE = DXGI_ALPHA_MODE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_ALPHA_MODE_FORCE_DWORD: DXGI_ALPHA_MODE = DXGI_ALPHA_MODE(4294967295);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_COLOR_SPACE_TYPE(pub u32);


impl fmt::Debug for DXGI_COLOR_SPACE_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 => write!(f,"DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709"),
      DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 => write!(f,"DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709"),
      DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 => write!(f,"DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709"),
      DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 => write!(f,"DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020"),
      DXGI_COLOR_SPACE_RESERVED => write!(f,"DXGI_COLOR_SPACE_RESERVED"),
      DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 => write!(f,"DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601"),
      DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 => write!(f,"DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601"),
      DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 => write!(f,"DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601"),
      DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 => write!(f,"DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709"),
      DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 => write!(f,"DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709"),
      DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 => write!(f,"DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020"),
      DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 => write!(f,"DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020"),
      DXGI_COLOR_SPACE_CUSTOM => write!(f,"DXGI_COLOR_SPACE_CUSTOM"),

      _ => write!(f, "DXGI_COLOR_SPACE_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_RESERVED: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COLOR_SPACE_CUSTOM: DXGI_COLOR_SPACE_TYPE = DXGI_COLOR_SPACE_TYPE(4294967295);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_COMPUTE_PREEMPTION_GRANULARITY(pub u32);


impl fmt::Debug for DXGI_COMPUTE_PREEMPTION_GRANULARITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY => write!(f,"DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY"),
      DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY => write!(f,"DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY"),
      DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY => write!(f,"DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY"),
      DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY => write!(f,"DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY"),
      DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY => write!(f,"DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY"),

      _ => write!(f, "DXGI_COMPUTE_PREEMPTION_GRANULARITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY: DXGI_COMPUTE_PREEMPTION_GRANULARITY = DXGI_COMPUTE_PREEMPTION_GRANULARITY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY: DXGI_COMPUTE_PREEMPTION_GRANULARITY = DXGI_COMPUTE_PREEMPTION_GRANULARITY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY: DXGI_COMPUTE_PREEMPTION_GRANULARITY = DXGI_COMPUTE_PREEMPTION_GRANULARITY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY: DXGI_COMPUTE_PREEMPTION_GRANULARITY = DXGI_COMPUTE_PREEMPTION_GRANULARITY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY: DXGI_COMPUTE_PREEMPTION_GRANULARITY = DXGI_COMPUTE_PREEMPTION_GRANULARITY(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_FORMAT(pub u32);


impl fmt::Debug for DXGI_FORMAT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_FORMAT_UNKNOWN => write!(f,"DXGI_FORMAT_UNKNOWN"),
      DXGI_FORMAT_R32G32B32A32_TYPELESS => write!(f,"DXGI_FORMAT_R32G32B32A32_TYPELESS"),
      DXGI_FORMAT_R32G32B32A32_FLOAT => write!(f,"DXGI_FORMAT_R32G32B32A32_FLOAT"),
      DXGI_FORMAT_R32G32B32A32_UINT => write!(f,"DXGI_FORMAT_R32G32B32A32_UINT"),
      DXGI_FORMAT_R32G32B32A32_SINT => write!(f,"DXGI_FORMAT_R32G32B32A32_SINT"),
      DXGI_FORMAT_R32G32B32_TYPELESS => write!(f,"DXGI_FORMAT_R32G32B32_TYPELESS"),
      DXGI_FORMAT_R32G32B32_FLOAT => write!(f,"DXGI_FORMAT_R32G32B32_FLOAT"),
      DXGI_FORMAT_R32G32B32_UINT => write!(f,"DXGI_FORMAT_R32G32B32_UINT"),
      DXGI_FORMAT_R32G32B32_SINT => write!(f,"DXGI_FORMAT_R32G32B32_SINT"),
      DXGI_FORMAT_R16G16B16A16_TYPELESS => write!(f,"DXGI_FORMAT_R16G16B16A16_TYPELESS"),
      DXGI_FORMAT_R16G16B16A16_FLOAT => write!(f,"DXGI_FORMAT_R16G16B16A16_FLOAT"),
      DXGI_FORMAT_R16G16B16A16_UNORM => write!(f,"DXGI_FORMAT_R16G16B16A16_UNORM"),
      DXGI_FORMAT_R16G16B16A16_UINT => write!(f,"DXGI_FORMAT_R16G16B16A16_UINT"),
      DXGI_FORMAT_R16G16B16A16_SNORM => write!(f,"DXGI_FORMAT_R16G16B16A16_SNORM"),
      DXGI_FORMAT_R16G16B16A16_SINT => write!(f,"DXGI_FORMAT_R16G16B16A16_SINT"),
      DXGI_FORMAT_R32G32_TYPELESS => write!(f,"DXGI_FORMAT_R32G32_TYPELESS"),
      DXGI_FORMAT_R32G32_FLOAT => write!(f,"DXGI_FORMAT_R32G32_FLOAT"),
      DXGI_FORMAT_R32G32_UINT => write!(f,"DXGI_FORMAT_R32G32_UINT"),
      DXGI_FORMAT_R32G32_SINT => write!(f,"DXGI_FORMAT_R32G32_SINT"),
      DXGI_FORMAT_R32G8X24_TYPELESS => write!(f,"DXGI_FORMAT_R32G8X24_TYPELESS"),
      DXGI_FORMAT_D32_FLOAT_S8X24_UINT => write!(f,"DXGI_FORMAT_D32_FLOAT_S8X24_UINT"),
      DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS => write!(f,"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS"),
      DXGI_FORMAT_X32_TYPELESS_G8X24_UINT => write!(f,"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT"),
      DXGI_FORMAT_R10G10B10A2_TYPELESS => write!(f,"DXGI_FORMAT_R10G10B10A2_TYPELESS"),
      DXGI_FORMAT_R10G10B10A2_UNORM => write!(f,"DXGI_FORMAT_R10G10B10A2_UNORM"),
      DXGI_FORMAT_R10G10B10A2_UINT => write!(f,"DXGI_FORMAT_R10G10B10A2_UINT"),
      DXGI_FORMAT_R11G11B10_FLOAT => write!(f,"DXGI_FORMAT_R11G11B10_FLOAT"),
      DXGI_FORMAT_R8G8B8A8_TYPELESS => write!(f,"DXGI_FORMAT_R8G8B8A8_TYPELESS"),
      DXGI_FORMAT_R8G8B8A8_UNORM => write!(f,"DXGI_FORMAT_R8G8B8A8_UNORM"),
      DXGI_FORMAT_R8G8B8A8_UNORM_SRGB => write!(f,"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB"),
      DXGI_FORMAT_R8G8B8A8_UINT => write!(f,"DXGI_FORMAT_R8G8B8A8_UINT"),
      DXGI_FORMAT_R8G8B8A8_SNORM => write!(f,"DXGI_FORMAT_R8G8B8A8_SNORM"),
      DXGI_FORMAT_R8G8B8A8_SINT => write!(f,"DXGI_FORMAT_R8G8B8A8_SINT"),
      DXGI_FORMAT_R16G16_TYPELESS => write!(f,"DXGI_FORMAT_R16G16_TYPELESS"),
      DXGI_FORMAT_R16G16_FLOAT => write!(f,"DXGI_FORMAT_R16G16_FLOAT"),
      DXGI_FORMAT_R16G16_UNORM => write!(f,"DXGI_FORMAT_R16G16_UNORM"),
      DXGI_FORMAT_R16G16_UINT => write!(f,"DXGI_FORMAT_R16G16_UINT"),
      DXGI_FORMAT_R16G16_SNORM => write!(f,"DXGI_FORMAT_R16G16_SNORM"),
      DXGI_FORMAT_R16G16_SINT => write!(f,"DXGI_FORMAT_R16G16_SINT"),
      DXGI_FORMAT_R32_TYPELESS => write!(f,"DXGI_FORMAT_R32_TYPELESS"),
      DXGI_FORMAT_D32_FLOAT => write!(f,"DXGI_FORMAT_D32_FLOAT"),
      DXGI_FORMAT_R32_FLOAT => write!(f,"DXGI_FORMAT_R32_FLOAT"),
      DXGI_FORMAT_R32_UINT => write!(f,"DXGI_FORMAT_R32_UINT"),
      DXGI_FORMAT_R32_SINT => write!(f,"DXGI_FORMAT_R32_SINT"),
      DXGI_FORMAT_R24G8_TYPELESS => write!(f,"DXGI_FORMAT_R24G8_TYPELESS"),
      DXGI_FORMAT_D24_UNORM_S8_UINT => write!(f,"DXGI_FORMAT_D24_UNORM_S8_UINT"),
      DXGI_FORMAT_R24_UNORM_X8_TYPELESS => write!(f,"DXGI_FORMAT_R24_UNORM_X8_TYPELESS"),
      DXGI_FORMAT_X24_TYPELESS_G8_UINT => write!(f,"DXGI_FORMAT_X24_TYPELESS_G8_UINT"),
      DXGI_FORMAT_R8G8_TYPELESS => write!(f,"DXGI_FORMAT_R8G8_TYPELESS"),
      DXGI_FORMAT_R8G8_UNORM => write!(f,"DXGI_FORMAT_R8G8_UNORM"),
      DXGI_FORMAT_R8G8_UINT => write!(f,"DXGI_FORMAT_R8G8_UINT"),
      DXGI_FORMAT_R8G8_SNORM => write!(f,"DXGI_FORMAT_R8G8_SNORM"),
      DXGI_FORMAT_R8G8_SINT => write!(f,"DXGI_FORMAT_R8G8_SINT"),
      DXGI_FORMAT_R16_TYPELESS => write!(f,"DXGI_FORMAT_R16_TYPELESS"),
      DXGI_FORMAT_R16_FLOAT => write!(f,"DXGI_FORMAT_R16_FLOAT"),
      DXGI_FORMAT_D16_UNORM => write!(f,"DXGI_FORMAT_D16_UNORM"),
      DXGI_FORMAT_R16_UNORM => write!(f,"DXGI_FORMAT_R16_UNORM"),
      DXGI_FORMAT_R16_UINT => write!(f,"DXGI_FORMAT_R16_UINT"),
      DXGI_FORMAT_R16_SNORM => write!(f,"DXGI_FORMAT_R16_SNORM"),
      DXGI_FORMAT_R16_SINT => write!(f,"DXGI_FORMAT_R16_SINT"),
      DXGI_FORMAT_R8_TYPELESS => write!(f,"DXGI_FORMAT_R8_TYPELESS"),
      DXGI_FORMAT_R8_UNORM => write!(f,"DXGI_FORMAT_R8_UNORM"),
      DXGI_FORMAT_R8_UINT => write!(f,"DXGI_FORMAT_R8_UINT"),
      DXGI_FORMAT_R8_SNORM => write!(f,"DXGI_FORMAT_R8_SNORM"),
      DXGI_FORMAT_R8_SINT => write!(f,"DXGI_FORMAT_R8_SINT"),
      DXGI_FORMAT_A8_UNORM => write!(f,"DXGI_FORMAT_A8_UNORM"),
      DXGI_FORMAT_R1_UNORM => write!(f,"DXGI_FORMAT_R1_UNORM"),
      DXGI_FORMAT_R9G9B9E5_SHAREDEXP => write!(f,"DXGI_FORMAT_R9G9B9E5_SHAREDEXP"),
      DXGI_FORMAT_R8G8_B8G8_UNORM => write!(f,"DXGI_FORMAT_R8G8_B8G8_UNORM"),
      DXGI_FORMAT_G8R8_G8B8_UNORM => write!(f,"DXGI_FORMAT_G8R8_G8B8_UNORM"),
      DXGI_FORMAT_BC1_TYPELESS => write!(f,"DXGI_FORMAT_BC1_TYPELESS"),
      DXGI_FORMAT_BC1_UNORM => write!(f,"DXGI_FORMAT_BC1_UNORM"),
      DXGI_FORMAT_BC1_UNORM_SRGB => write!(f,"DXGI_FORMAT_BC1_UNORM_SRGB"),
      DXGI_FORMAT_BC2_TYPELESS => write!(f,"DXGI_FORMAT_BC2_TYPELESS"),
      DXGI_FORMAT_BC2_UNORM => write!(f,"DXGI_FORMAT_BC2_UNORM"),
      DXGI_FORMAT_BC2_UNORM_SRGB => write!(f,"DXGI_FORMAT_BC2_UNORM_SRGB"),
      DXGI_FORMAT_BC3_TYPELESS => write!(f,"DXGI_FORMAT_BC3_TYPELESS"),
      DXGI_FORMAT_BC3_UNORM => write!(f,"DXGI_FORMAT_BC3_UNORM"),
      DXGI_FORMAT_BC3_UNORM_SRGB => write!(f,"DXGI_FORMAT_BC3_UNORM_SRGB"),
      DXGI_FORMAT_BC4_TYPELESS => write!(f,"DXGI_FORMAT_BC4_TYPELESS"),
      DXGI_FORMAT_BC4_UNORM => write!(f,"DXGI_FORMAT_BC4_UNORM"),
      DXGI_FORMAT_BC4_SNORM => write!(f,"DXGI_FORMAT_BC4_SNORM"),
      DXGI_FORMAT_BC5_TYPELESS => write!(f,"DXGI_FORMAT_BC5_TYPELESS"),
      DXGI_FORMAT_BC5_UNORM => write!(f,"DXGI_FORMAT_BC5_UNORM"),
      DXGI_FORMAT_BC5_SNORM => write!(f,"DXGI_FORMAT_BC5_SNORM"),
      DXGI_FORMAT_B5G6R5_UNORM => write!(f,"DXGI_FORMAT_B5G6R5_UNORM"),
      DXGI_FORMAT_B5G5R5A1_UNORM => write!(f,"DXGI_FORMAT_B5G5R5A1_UNORM"),
      DXGI_FORMAT_B8G8R8A8_UNORM => write!(f,"DXGI_FORMAT_B8G8R8A8_UNORM"),
      DXGI_FORMAT_B8G8R8X8_UNORM => write!(f,"DXGI_FORMAT_B8G8R8X8_UNORM"),
      DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM => write!(f,"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM"),
      DXGI_FORMAT_B8G8R8A8_TYPELESS => write!(f,"DXGI_FORMAT_B8G8R8A8_TYPELESS"),
      DXGI_FORMAT_B8G8R8A8_UNORM_SRGB => write!(f,"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB"),
      DXGI_FORMAT_B8G8R8X8_TYPELESS => write!(f,"DXGI_FORMAT_B8G8R8X8_TYPELESS"),
      DXGI_FORMAT_B8G8R8X8_UNORM_SRGB => write!(f,"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB"),
      DXGI_FORMAT_BC6H_TYPELESS => write!(f,"DXGI_FORMAT_BC6H_TYPELESS"),
      DXGI_FORMAT_BC6H_UF16 => write!(f,"DXGI_FORMAT_BC6H_UF16"),
      DXGI_FORMAT_BC6H_SF16 => write!(f,"DXGI_FORMAT_BC6H_SF16"),
      DXGI_FORMAT_BC7_TYPELESS => write!(f,"DXGI_FORMAT_BC7_TYPELESS"),
      DXGI_FORMAT_BC7_UNORM => write!(f,"DXGI_FORMAT_BC7_UNORM"),
      DXGI_FORMAT_BC7_UNORM_SRGB => write!(f,"DXGI_FORMAT_BC7_UNORM_SRGB"),
      DXGI_FORMAT_AYUV => write!(f,"DXGI_FORMAT_AYUV"),
      DXGI_FORMAT_Y410 => write!(f,"DXGI_FORMAT_Y410"),
      DXGI_FORMAT_Y416 => write!(f,"DXGI_FORMAT_Y416"),
      DXGI_FORMAT_NV12 => write!(f,"DXGI_FORMAT_NV12"),
      DXGI_FORMAT_P010 => write!(f,"DXGI_FORMAT_P010"),
      DXGI_FORMAT_P016 => write!(f,"DXGI_FORMAT_P016"),
      DXGI_FORMAT_420_OPAQUE => write!(f,"DXGI_FORMAT_420_OPAQUE"),
      DXGI_FORMAT_YUY2 => write!(f,"DXGI_FORMAT_YUY2"),
      DXGI_FORMAT_Y210 => write!(f,"DXGI_FORMAT_Y210"),
      DXGI_FORMAT_Y216 => write!(f,"DXGI_FORMAT_Y216"),
      DXGI_FORMAT_NV11 => write!(f,"DXGI_FORMAT_NV11"),
      DXGI_FORMAT_AI44 => write!(f,"DXGI_FORMAT_AI44"),
      DXGI_FORMAT_IA44 => write!(f,"DXGI_FORMAT_IA44"),
      DXGI_FORMAT_P8 => write!(f,"DXGI_FORMAT_P8"),
      DXGI_FORMAT_A8P8 => write!(f,"DXGI_FORMAT_A8P8"),
      DXGI_FORMAT_B4G4R4A4_UNORM => write!(f,"DXGI_FORMAT_B4G4R4A4_UNORM"),
      DXGI_FORMAT_P208 => write!(f,"DXGI_FORMAT_P208"),
      DXGI_FORMAT_V208 => write!(f,"DXGI_FORMAT_V208"),
      DXGI_FORMAT_V408 => write!(f,"DXGI_FORMAT_V408"),
      DXGI_FORMAT_FORCE_UINT => write!(f,"DXGI_FORMAT_FORCE_UINT"),

      _ => write!(f, "DXGI_FORMAT({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_UNKNOWN: DXGI_FORMAT = DXGI_FORMAT(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32A32_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32A32_FLOAT: DXGI_FORMAT = DXGI_FORMAT(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32A32_UINT: DXGI_FORMAT = DXGI_FORMAT(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32A32_SINT: DXGI_FORMAT = DXGI_FORMAT(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32_FLOAT: DXGI_FORMAT = DXGI_FORMAT(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32_UINT: DXGI_FORMAT = DXGI_FORMAT(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32B32_SINT: DXGI_FORMAT = DXGI_FORMAT(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_FLOAT: DXGI_FORMAT = DXGI_FORMAT(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_UNORM: DXGI_FORMAT = DXGI_FORMAT(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_UINT: DXGI_FORMAT = DXGI_FORMAT(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_SNORM: DXGI_FORMAT = DXGI_FORMAT(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16B16A16_SINT: DXGI_FORMAT = DXGI_FORMAT(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32_FLOAT: DXGI_FORMAT = DXGI_FORMAT(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32_UINT: DXGI_FORMAT = DXGI_FORMAT(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G32_SINT: DXGI_FORMAT = DXGI_FORMAT(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32G8X24_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_D32_FLOAT_S8X24_UINT: DXGI_FORMAT = DXGI_FORMAT(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT: DXGI_FORMAT = DXGI_FORMAT(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R10G10B10A2_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R10G10B10A2_UNORM: DXGI_FORMAT = DXGI_FORMAT(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R10G10B10A2_UINT: DXGI_FORMAT = DXGI_FORMAT(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R11G11B10_FLOAT: DXGI_FORMAT = DXGI_FORMAT(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_UNORM: DXGI_FORMAT = DXGI_FORMAT(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_UINT: DXGI_FORMAT = DXGI_FORMAT(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_SNORM: DXGI_FORMAT = DXGI_FORMAT(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8B8A8_SINT: DXGI_FORMAT = DXGI_FORMAT(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_FLOAT: DXGI_FORMAT = DXGI_FORMAT(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_UNORM: DXGI_FORMAT = DXGI_FORMAT(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_UINT: DXGI_FORMAT = DXGI_FORMAT(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_SNORM: DXGI_FORMAT = DXGI_FORMAT(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16G16_SINT: DXGI_FORMAT = DXGI_FORMAT(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_D32_FLOAT: DXGI_FORMAT = DXGI_FORMAT(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32_FLOAT: DXGI_FORMAT = DXGI_FORMAT(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32_UINT: DXGI_FORMAT = DXGI_FORMAT(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R32_SINT: DXGI_FORMAT = DXGI_FORMAT(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R24G8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_D24_UNORM_S8_UINT: DXGI_FORMAT = DXGI_FORMAT(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R24_UNORM_X8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_X24_TYPELESS_G8_UINT: DXGI_FORMAT = DXGI_FORMAT(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_UNORM: DXGI_FORMAT = DXGI_FORMAT(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_UINT: DXGI_FORMAT = DXGI_FORMAT(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_SNORM: DXGI_FORMAT = DXGI_FORMAT(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_SINT: DXGI_FORMAT = DXGI_FORMAT(52);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(53);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_FLOAT: DXGI_FORMAT = DXGI_FORMAT(54);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_D16_UNORM: DXGI_FORMAT = DXGI_FORMAT(55);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_UNORM: DXGI_FORMAT = DXGI_FORMAT(56);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_UINT: DXGI_FORMAT = DXGI_FORMAT(57);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_SNORM: DXGI_FORMAT = DXGI_FORMAT(58);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R16_SINT: DXGI_FORMAT = DXGI_FORMAT(59);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(60);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8_UNORM: DXGI_FORMAT = DXGI_FORMAT(61);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8_UINT: DXGI_FORMAT = DXGI_FORMAT(62);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8_SNORM: DXGI_FORMAT = DXGI_FORMAT(63);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8_SINT: DXGI_FORMAT = DXGI_FORMAT(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_A8_UNORM: DXGI_FORMAT = DXGI_FORMAT(65);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R1_UNORM: DXGI_FORMAT = DXGI_FORMAT(66);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R9G9B9E5_SHAREDEXP: DXGI_FORMAT = DXGI_FORMAT(67);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R8G8_B8G8_UNORM: DXGI_FORMAT = DXGI_FORMAT(68);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_G8R8_G8B8_UNORM: DXGI_FORMAT = DXGI_FORMAT(69);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC1_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(70);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC1_UNORM: DXGI_FORMAT = DXGI_FORMAT(71);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC1_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(72);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC2_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(73);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC2_UNORM: DXGI_FORMAT = DXGI_FORMAT(74);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC2_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(75);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC3_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(76);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC3_UNORM: DXGI_FORMAT = DXGI_FORMAT(77);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC3_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(78);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC4_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(79);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC4_UNORM: DXGI_FORMAT = DXGI_FORMAT(80);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC4_SNORM: DXGI_FORMAT = DXGI_FORMAT(81);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC5_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(82);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC5_UNORM: DXGI_FORMAT = DXGI_FORMAT(83);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC5_SNORM: DXGI_FORMAT = DXGI_FORMAT(84);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B5G6R5_UNORM: DXGI_FORMAT = DXGI_FORMAT(85);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B5G5R5A1_UNORM: DXGI_FORMAT = DXGI_FORMAT(86);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8A8_UNORM: DXGI_FORMAT = DXGI_FORMAT(87);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8X8_UNORM: DXGI_FORMAT = DXGI_FORMAT(88);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: DXGI_FORMAT = DXGI_FORMAT(89);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8A8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(90);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(91);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8X8_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(92);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(93);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC6H_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(94);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC6H_UF16: DXGI_FORMAT = DXGI_FORMAT(95);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC6H_SF16: DXGI_FORMAT = DXGI_FORMAT(96);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC7_TYPELESS: DXGI_FORMAT = DXGI_FORMAT(97);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC7_UNORM: DXGI_FORMAT = DXGI_FORMAT(98);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_BC7_UNORM_SRGB: DXGI_FORMAT = DXGI_FORMAT(99);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_AYUV: DXGI_FORMAT = DXGI_FORMAT(100);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_Y410: DXGI_FORMAT = DXGI_FORMAT(101);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_Y416: DXGI_FORMAT = DXGI_FORMAT(102);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_NV12: DXGI_FORMAT = DXGI_FORMAT(103);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_P010: DXGI_FORMAT = DXGI_FORMAT(104);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_P016: DXGI_FORMAT = DXGI_FORMAT(105);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_420_OPAQUE: DXGI_FORMAT = DXGI_FORMAT(106);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_YUY2: DXGI_FORMAT = DXGI_FORMAT(107);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_Y210: DXGI_FORMAT = DXGI_FORMAT(108);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_Y216: DXGI_FORMAT = DXGI_FORMAT(109);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_NV11: DXGI_FORMAT = DXGI_FORMAT(110);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_AI44: DXGI_FORMAT = DXGI_FORMAT(111);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_IA44: DXGI_FORMAT = DXGI_FORMAT(112);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_P8: DXGI_FORMAT = DXGI_FORMAT(113);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_A8P8: DXGI_FORMAT = DXGI_FORMAT(114);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_B4G4R4A4_UNORM: DXGI_FORMAT = DXGI_FORMAT(115);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_P208: DXGI_FORMAT = DXGI_FORMAT(130);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_V208: DXGI_FORMAT = DXGI_FORMAT(131);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_V408: DXGI_FORMAT = DXGI_FORMAT(132);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FORMAT_FORCE_UINT: DXGI_FORMAT = DXGI_FORMAT(4294967295);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_FRAME_PRESENTATION_MODE(pub u32);


impl fmt::Debug for DXGI_FRAME_PRESENTATION_MODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_FRAME_PRESENTATION_MODE_COMPOSED => write!(f,"DXGI_FRAME_PRESENTATION_MODE_COMPOSED"),
      DXGI_FRAME_PRESENTATION_MODE_OVERLAY => write!(f,"DXGI_FRAME_PRESENTATION_MODE_OVERLAY"),
      DXGI_FRAME_PRESENTATION_MODE_NONE => write!(f,"DXGI_FRAME_PRESENTATION_MODE_NONE"),
      DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE => write!(f,"DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE"),

      _ => write!(f, "DXGI_FRAME_PRESENTATION_MODE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FRAME_PRESENTATION_MODE_COMPOSED: DXGI_FRAME_PRESENTATION_MODE = DXGI_FRAME_PRESENTATION_MODE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FRAME_PRESENTATION_MODE_OVERLAY: DXGI_FRAME_PRESENTATION_MODE = DXGI_FRAME_PRESENTATION_MODE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FRAME_PRESENTATION_MODE_NONE: DXGI_FRAME_PRESENTATION_MODE = DXGI_FRAME_PRESENTATION_MODE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE: DXGI_FRAME_PRESENTATION_MODE = DXGI_FRAME_PRESENTATION_MODE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_GRAPHICS_PREEMPTION_GRANULARITY(pub u32);


impl fmt::Debug for DXGI_GRAPHICS_PREEMPTION_GRANULARITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY => write!(f,"DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY"),
      DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY => write!(f,"DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY"),
      DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY => write!(f,"DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY"),
      DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY => write!(f,"DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY"),
      DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY => write!(f,"DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY"),

      _ => write!(f, "DXGI_GRAPHICS_PREEMPTION_GRANULARITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY: DXGI_GRAPHICS_PREEMPTION_GRANULARITY = DXGI_GRAPHICS_PREEMPTION_GRANULARITY(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY: DXGI_GRAPHICS_PREEMPTION_GRANULARITY = DXGI_GRAPHICS_PREEMPTION_GRANULARITY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY: DXGI_GRAPHICS_PREEMPTION_GRANULARITY = DXGI_GRAPHICS_PREEMPTION_GRANULARITY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY: DXGI_GRAPHICS_PREEMPTION_GRANULARITY = DXGI_GRAPHICS_PREEMPTION_GRANULARITY(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY: DXGI_GRAPHICS_PREEMPTION_GRANULARITY = DXGI_GRAPHICS_PREEMPTION_GRANULARITY(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_MEMORY_SEGMENT_GROUP(pub u32);


impl fmt::Debug for DXGI_MEMORY_SEGMENT_GROUP {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_MEMORY_SEGMENT_GROUP_LOCAL => write!(f,"DXGI_MEMORY_SEGMENT_GROUP_LOCAL"),
      DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL => write!(f,"DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL"),

      _ => write!(f, "DXGI_MEMORY_SEGMENT_GROUP({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MEMORY_SEGMENT_GROUP_LOCAL: DXGI_MEMORY_SEGMENT_GROUP = DXGI_MEMORY_SEGMENT_GROUP(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL: DXGI_MEMORY_SEGMENT_GROUP = DXGI_MEMORY_SEGMENT_GROUP(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_MODE_ROTATION(pub u32);


impl fmt::Debug for DXGI_MODE_ROTATION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_MODE_ROTATION_UNSPECIFIED => write!(f,"DXGI_MODE_ROTATION_UNSPECIFIED"),
      DXGI_MODE_ROTATION_IDENTITY => write!(f,"DXGI_MODE_ROTATION_IDENTITY"),
      DXGI_MODE_ROTATION_ROTATE90 => write!(f,"DXGI_MODE_ROTATION_ROTATE90"),
      DXGI_MODE_ROTATION_ROTATE180 => write!(f,"DXGI_MODE_ROTATION_ROTATE180"),
      DXGI_MODE_ROTATION_ROTATE270 => write!(f,"DXGI_MODE_ROTATION_ROTATE270"),

      _ => write!(f, "DXGI_MODE_ROTATION({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_ROTATION_UNSPECIFIED: DXGI_MODE_ROTATION = DXGI_MODE_ROTATION(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_ROTATION_IDENTITY: DXGI_MODE_ROTATION = DXGI_MODE_ROTATION(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_ROTATION_ROTATE90: DXGI_MODE_ROTATION = DXGI_MODE_ROTATION(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_ROTATION_ROTATE180: DXGI_MODE_ROTATION = DXGI_MODE_ROTATION(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_ROTATION_ROTATE270: DXGI_MODE_ROTATION = DXGI_MODE_ROTATION(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_MODE_SCALING(pub u32);


impl fmt::Debug for DXGI_MODE_SCALING {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_MODE_SCALING_UNSPECIFIED => write!(f,"DXGI_MODE_SCALING_UNSPECIFIED"),
      DXGI_MODE_SCALING_CENTERED => write!(f,"DXGI_MODE_SCALING_CENTERED"),
      DXGI_MODE_SCALING_STRETCHED => write!(f,"DXGI_MODE_SCALING_STRETCHED"),

      _ => write!(f, "DXGI_MODE_SCALING({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCALING_UNSPECIFIED: DXGI_MODE_SCALING = DXGI_MODE_SCALING(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCALING_CENTERED: DXGI_MODE_SCALING = DXGI_MODE_SCALING(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCALING_STRETCHED: DXGI_MODE_SCALING = DXGI_MODE_SCALING(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_MODE_SCANLINE_ORDER(pub u32);


impl fmt::Debug for DXGI_MODE_SCANLINE_ORDER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED => write!(f,"DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED"),
      DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE => write!(f,"DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE"),
      DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST => write!(f,"DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST"),
      DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST => write!(f,"DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST"),

      _ => write!(f, "DXGI_MODE_SCANLINE_ORDER({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED: DXGI_MODE_SCANLINE_ORDER = DXGI_MODE_SCANLINE_ORDER(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE: DXGI_MODE_SCANLINE_ORDER = DXGI_MODE_SCANLINE_ORDER(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST: DXGI_MODE_SCANLINE_ORDER = DXGI_MODE_SCANLINE_ORDER(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST: DXGI_MODE_SCANLINE_ORDER = DXGI_MODE_SCANLINE_ORDER(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(pub u32);


impl BitOr for DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS {
  type Output=DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS;

  fn bitor(self, rhs: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS) -> Self::Output {
    match (self,rhs) {
      (DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(a),DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(b)) => DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS", self.0, &[("DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE",1), ("DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709",2), ("DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC",4)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS = DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS = DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS = DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_OUTDUPL_POINTER_SHAPE_TYPE(pub u32);


impl fmt::Debug for DXGI_OUTDUPL_POINTER_SHAPE_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME => write!(f,"DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME"),
      DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR => write!(f,"DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR"),
      DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR => write!(f,"DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR"),

      _ => write!(f, "DXGI_OUTDUPL_POINTER_SHAPE_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME: DXGI_OUTDUPL_POINTER_SHAPE_TYPE = DXGI_OUTDUPL_POINTER_SHAPE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR: DXGI_OUTDUPL_POINTER_SHAPE_TYPE = DXGI_OUTDUPL_POINTER_SHAPE_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR: DXGI_OUTDUPL_POINTER_SHAPE_TYPE = DXGI_OUTDUPL_POINTER_SHAPE_TYPE(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG(pub u32);


impl BitOr for DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG {
  type Output=DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG;

  fn bitor(self, rhs: DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG) -> Self::Output {
    match (self,rhs) {
      (DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG(a),DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG(b)) => DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG(a|b)
    }
  }
}

impl fmt::Debug for DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG", self.0, &[("DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT",1)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT: DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG = DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG(1);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_OVERLAY_SUPPORT_FLAG(pub u32);


impl BitOr for DXGI_OVERLAY_SUPPORT_FLAG {
  type Output=DXGI_OVERLAY_SUPPORT_FLAG;

  fn bitor(self, rhs: DXGI_OVERLAY_SUPPORT_FLAG) -> Self::Output {
    match (self,rhs) {
      (DXGI_OVERLAY_SUPPORT_FLAG(a),DXGI_OVERLAY_SUPPORT_FLAG(b)) => DXGI_OVERLAY_SUPPORT_FLAG(a|b)
    }
  }
}

impl fmt::Debug for DXGI_OVERLAY_SUPPORT_FLAG {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_OVERLAY_SUPPORT_FLAG", self.0, &[("DXGI_OVERLAY_SUPPORT_FLAG_DIRECT",1), ("DXGI_OVERLAY_SUPPORT_FLAG_SCALING",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OVERLAY_SUPPORT_FLAG_DIRECT: DXGI_OVERLAY_SUPPORT_FLAG = DXGI_OVERLAY_SUPPORT_FLAG(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OVERLAY_SUPPORT_FLAG_SCALING: DXGI_OVERLAY_SUPPORT_FLAG = DXGI_OVERLAY_SUPPORT_FLAG(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_RESIDENCY(pub u32);


impl fmt::Debug for DXGI_RESIDENCY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_RESIDENCY_FULLY_RESIDENT => write!(f,"DXGI_RESIDENCY_FULLY_RESIDENT"),
      DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY => write!(f,"DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY"),
      DXGI_RESIDENCY_EVICTED_TO_DISK => write!(f,"DXGI_RESIDENCY_EVICTED_TO_DISK"),

      _ => write!(f, "DXGI_RESIDENCY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_RESIDENCY_FULLY_RESIDENT: DXGI_RESIDENCY = DXGI_RESIDENCY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY: DXGI_RESIDENCY = DXGI_RESIDENCY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_RESIDENCY_EVICTED_TO_DISK: DXGI_RESIDENCY = DXGI_RESIDENCY(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_SCALING(pub u32);


impl fmt::Debug for DXGI_SCALING {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_SCALING_STRETCH => write!(f,"DXGI_SCALING_STRETCH"),
      DXGI_SCALING_NONE => write!(f,"DXGI_SCALING_NONE"),
      DXGI_SCALING_ASPECT_RATIO_STRETCH => write!(f,"DXGI_SCALING_ASPECT_RATIO_STRETCH"),

      _ => write!(f, "DXGI_SCALING({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SCALING_STRETCH: DXGI_SCALING = DXGI_SCALING(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SCALING_NONE: DXGI_SCALING = DXGI_SCALING(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SCALING_ASPECT_RATIO_STRETCH: DXGI_SCALING = DXGI_SCALING(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(pub u32);


impl BitOr for DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG {
  type Output=DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG;

  fn bitor(self, rhs: DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG) -> Self::Output {
    match (self,rhs) {
      (DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(a),DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(b)) => DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(a|b)
    }
  }
}

impl fmt::Debug for DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG", self.0, &[("DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT",1), ("DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT",2)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT: DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG = DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT: DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG = DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG(2);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_SWAP_CHAIN_FLAG(pub u32);


impl BitOr for DXGI_SWAP_CHAIN_FLAG {
  type Output=DXGI_SWAP_CHAIN_FLAG;

  fn bitor(self, rhs: DXGI_SWAP_CHAIN_FLAG) -> Self::Output {
    match (self,rhs) {
      (DXGI_SWAP_CHAIN_FLAG(a),DXGI_SWAP_CHAIN_FLAG(b)) => DXGI_SWAP_CHAIN_FLAG(a|b)
    }
  }
}

impl fmt::Debug for DXGI_SWAP_CHAIN_FLAG {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("DXGI_SWAP_CHAIN_FLAG", self.0, &[("DXGI_SWAP_CHAIN_FLAG_NONPREROTATED",1), ("DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH",2), ("DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE",4), ("DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT",8), ("DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER",16), ("DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY",32), ("DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT",64), ("DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER",128), ("DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO",256), ("DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO",512), ("DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED",1024)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_NONPREROTATED: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(64);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(128);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(256);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(512);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED: DXGI_SWAP_CHAIN_FLAG = DXGI_SWAP_CHAIN_FLAG(1024);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct DXGI_SWAP_EFFECT(pub u32);


impl fmt::Debug for DXGI_SWAP_EFFECT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_SWAP_EFFECT_DISCARD => write!(f,"DXGI_SWAP_EFFECT_DISCARD"),
      DXGI_SWAP_EFFECT_SEQUENTIAL => write!(f,"DXGI_SWAP_EFFECT_SEQUENTIAL"),
      DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL => write!(f,"DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL"),
      DXGI_SWAP_EFFECT_FLIP_DISCARD => write!(f,"DXGI_SWAP_EFFECT_FLIP_DISCARD"),

      _ => write!(f, "DXGI_SWAP_EFFECT({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_EFFECT_DISCARD: DXGI_SWAP_EFFECT = DXGI_SWAP_EFFECT(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_EFFECT_SEQUENTIAL: DXGI_SWAP_EFFECT = DXGI_SWAP_EFFECT(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL: DXGI_SWAP_EFFECT = DXGI_SWAP_EFFECT(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_SWAP_EFFECT_FLIP_DISCARD: DXGI_SWAP_EFFECT = DXGI_SWAP_EFFECT(4);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_CBUFFER_TYPE(pub u32);


impl fmt::Debug for _D3D_CBUFFER_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_CT_CBUFFER => write!(f,"D3D_CT_CBUFFER"),
      D3D_CT_TBUFFER => write!(f,"D3D_CT_TBUFFER"),
      D3D_CT_INTERFACE_POINTERS => write!(f,"D3D_CT_INTERFACE_POINTERS"),
      D3D_CT_RESOURCE_BIND_INFO => write!(f,"D3D_CT_RESOURCE_BIND_INFO"),

      _ => write!(f, "_D3D_CBUFFER_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CT_CBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CT_TBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CT_INTERFACE_POINTERS: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CT_RESOURCE_BIND_INFO: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_CT_CBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_CT_TBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_CT_CBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_CT_TBUFFER: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_CT_INTERFACE_POINTERS: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_CT_RESOURCE_BIND_INFO: _D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE(3);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_INCLUDE_TYPE(pub u32);


impl fmt::Debug for _D3D_INCLUDE_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_INCLUDE_LOCAL => write!(f,"D3D_INCLUDE_LOCAL"),
      D3D_INCLUDE_SYSTEM => write!(f,"D3D_INCLUDE_SYSTEM"),
      D3D_INCLUDE_FORCE_DWORD => write!(f,"D3D_INCLUDE_FORCE_DWORD"),

      _ => write!(f, "_D3D_INCLUDE_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INCLUDE_LOCAL: _D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INCLUDE_SYSTEM: _D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_INCLUDE_LOCAL: _D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_INCLUDE_SYSTEM: _D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_INCLUDE_FORCE_DWORD: _D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_PARAMETER_FLAGS(pub u32);


impl fmt::Debug for _D3D_PARAMETER_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_PF_NONE => write!(f,"D3D_PF_NONE"),
      D3D_PF_IN => write!(f,"D3D_PF_IN"),
      D3D_PF_OUT => write!(f,"D3D_PF_OUT"),
      D3D_PF_FORCE_DWORD => write!(f,"D3D_PF_FORCE_DWORD"),

      _ => write!(f, "_D3D_PARAMETER_FLAGS({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PF_NONE: _D3D_PARAMETER_FLAGS = _D3D_PARAMETER_FLAGS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PF_IN: _D3D_PARAMETER_FLAGS = _D3D_PARAMETER_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PF_OUT: _D3D_PARAMETER_FLAGS = _D3D_PARAMETER_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_PF_FORCE_DWORD: _D3D_PARAMETER_FLAGS = _D3D_PARAMETER_FLAGS(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_CBUFFER_FLAGS(pub u32);


impl fmt::Debug for _D3D_SHADER_CBUFFER_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_CBF_USERPACKED => write!(f,"D3D_CBF_USERPACKED"),
      D3D_CBF_FORCE_DWORD => write!(f,"D3D_CBF_FORCE_DWORD"),

      _ => write!(f, "_D3D_SHADER_CBUFFER_FLAGS({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CBF_USERPACKED: _D3D_SHADER_CBUFFER_FLAGS = _D3D_SHADER_CBUFFER_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_CBF_USERPACKED: _D3D_SHADER_CBUFFER_FLAGS = _D3D_SHADER_CBUFFER_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_CBF_FORCE_DWORD: _D3D_SHADER_CBUFFER_FLAGS = _D3D_SHADER_CBUFFER_FLAGS(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_INPUT_FLAGS(pub u32);


impl BitOr for _D3D_SHADER_INPUT_FLAGS {
  type Output=_D3D_SHADER_INPUT_FLAGS;

  fn bitor(self, rhs: _D3D_SHADER_INPUT_FLAGS) -> Self::Output {
    match (self,rhs) {
      (_D3D_SHADER_INPUT_FLAGS(a),_D3D_SHADER_INPUT_FLAGS(b)) => _D3D_SHADER_INPUT_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for _D3D_SHADER_INPUT_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("_D3D_SHADER_INPUT_FLAGS", self.0, &[("D3D_SIF_USERPACKED",1), ("D3D_SIF_COMPARISON_SAMPLER",2), ("D3D_SIF_TEXTURE_COMPONENT_0",4), ("D3D_SIF_TEXTURE_COMPONENT_1",8), ("D3D_SIF_UNUSED",16), ("D3D10_SIF_USERPACKED",1), ("D3D10_SIF_COMPARISON_SAMPLER",2), ("D3D10_SIF_TEXTURE_COMPONENT_0",4), ("D3D10_SIF_TEXTURE_COMPONENT_1",8)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_USERPACKED: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_COMPARISON_SAMPLER: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_TEXTURE_COMPONENT_0: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_TEXTURE_COMPONENT_1: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_TEXTURE_COMPONENTS: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_UNUSED: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIF_USERPACKED: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIF_COMPARISON_SAMPLER: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIF_TEXTURE_COMPONENT_0: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIF_TEXTURE_COMPONENT_1: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIF_TEXTURE_COMPONENTS: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIF_FORCE_DWORD: _D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_INPUT_TYPE(pub u32);


impl fmt::Debug for _D3D_SHADER_INPUT_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_SIT_CBUFFER => write!(f,"D3D_SIT_CBUFFER"),
      D3D_SIT_TBUFFER => write!(f,"D3D_SIT_TBUFFER"),
      D3D_SIT_TEXTURE => write!(f,"D3D_SIT_TEXTURE"),
      D3D_SIT_SAMPLER => write!(f,"D3D_SIT_SAMPLER"),
      D3D_SIT_UAV_RWTYPED => write!(f,"D3D_SIT_UAV_RWTYPED"),
      D3D_SIT_STRUCTURED => write!(f,"D3D_SIT_STRUCTURED"),
      D3D_SIT_UAV_RWSTRUCTURED => write!(f,"D3D_SIT_UAV_RWSTRUCTURED"),
      D3D_SIT_BYTEADDRESS => write!(f,"D3D_SIT_BYTEADDRESS"),
      D3D_SIT_UAV_RWBYTEADDRESS => write!(f,"D3D_SIT_UAV_RWBYTEADDRESS"),
      D3D_SIT_UAV_APPEND_STRUCTURED => write!(f,"D3D_SIT_UAV_APPEND_STRUCTURED"),
      D3D_SIT_UAV_CONSUME_STRUCTURED => write!(f,"D3D_SIT_UAV_CONSUME_STRUCTURED"),
      D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER => write!(f,"D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER"),

      _ => write!(f, "_D3D_SHADER_INPUT_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_CBUFFER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_TBUFFER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_TEXTURE: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_SAMPLER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_RWTYPED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_RWSTRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_BYTEADDRESS: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_RWBYTEADDRESS: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_APPEND_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_CONSUME_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIT_CBUFFER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIT_TBUFFER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIT_TEXTURE: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SIT_SAMPLER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_RWTYPED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_RWSTRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_BYTEADDRESS: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_RWBYTEADDRESS: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_APPEND_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_CONSUME_STRUCTURED: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER: _D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE(11);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_VARIABLE_CLASS(pub u32);


impl fmt::Debug for _D3D_SHADER_VARIABLE_CLASS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_SVC_SCALAR => write!(f,"D3D_SVC_SCALAR"),
      D3D_SVC_VECTOR => write!(f,"D3D_SVC_VECTOR"),
      D3D_SVC_MATRIX_ROWS => write!(f,"D3D_SVC_MATRIX_ROWS"),
      D3D_SVC_MATRIX_COLUMNS => write!(f,"D3D_SVC_MATRIX_COLUMNS"),
      D3D_SVC_OBJECT => write!(f,"D3D_SVC_OBJECT"),
      D3D_SVC_STRUCT => write!(f,"D3D_SVC_STRUCT"),
      D3D_SVC_INTERFACE_CLASS => write!(f,"D3D_SVC_INTERFACE_CLASS"),
      D3D_SVC_INTERFACE_POINTER => write!(f,"D3D_SVC_INTERFACE_POINTER"),
      D3D_SVC_FORCE_DWORD => write!(f,"D3D_SVC_FORCE_DWORD"),

      _ => write!(f, "_D3D_SHADER_VARIABLE_CLASS({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_SCALAR: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_VECTOR: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_MATRIX_ROWS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_MATRIX_COLUMNS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_OBJECT: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_STRUCT: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_INTERFACE_CLASS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_SCALAR: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_VECTOR: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_MATRIX_ROWS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_MATRIX_COLUMNS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_OBJECT: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVC_STRUCT: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVC_INTERFACE_CLASS: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVC_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVC_FORCE_DWORD: _D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_VARIABLE_FLAGS(pub u32);


impl BitOr for _D3D_SHADER_VARIABLE_FLAGS {
  type Output=_D3D_SHADER_VARIABLE_FLAGS;

  fn bitor(self, rhs: _D3D_SHADER_VARIABLE_FLAGS) -> Self::Output {
    match (self,rhs) {
      (_D3D_SHADER_VARIABLE_FLAGS(a),_D3D_SHADER_VARIABLE_FLAGS(b)) => _D3D_SHADER_VARIABLE_FLAGS(a|b)
    }
  }
}

impl fmt::Debug for _D3D_SHADER_VARIABLE_FLAGS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    debug_fmt_enum("_D3D_SHADER_VARIABLE_FLAGS", self.0, &[("D3D_SVF_USERPACKED",1), ("D3D_SVF_USED",2), ("D3D_SVF_INTERFACE_POINTER",4), ("D3D_SVF_INTERFACE_PARAMETER",8), ("D3D10_SVF_USERPACKED",1), ("D3D10_SVF_USED",2), ("D3D11_SVF_INTERFACE_POINTER",4), ("D3D11_SVF_INTERFACE_PARAMETER",8)], f)
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVF_USERPACKED: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVF_USED: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVF_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVF_INTERFACE_PARAMETER: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVF_USERPACKED: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVF_USED: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVF_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVF_INTERFACE_PARAMETER: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVF_FORCE_DWORD: _D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _D3D_SHADER_VARIABLE_TYPE(pub u32);


impl fmt::Debug for _D3D_SHADER_VARIABLE_TYPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      D3D_SVT_VOID => write!(f,"D3D_SVT_VOID"),
      D3D_SVT_BOOL => write!(f,"D3D_SVT_BOOL"),
      D3D_SVT_INT => write!(f,"D3D_SVT_INT"),
      D3D_SVT_FLOAT => write!(f,"D3D_SVT_FLOAT"),
      D3D_SVT_STRING => write!(f,"D3D_SVT_STRING"),
      D3D_SVT_TEXTURE => write!(f,"D3D_SVT_TEXTURE"),
      D3D_SVT_TEXTURE1D => write!(f,"D3D_SVT_TEXTURE1D"),
      D3D_SVT_TEXTURE2D => write!(f,"D3D_SVT_TEXTURE2D"),
      D3D_SVT_TEXTURE3D => write!(f,"D3D_SVT_TEXTURE3D"),
      D3D_SVT_TEXTURECUBE => write!(f,"D3D_SVT_TEXTURECUBE"),
      D3D_SVT_SAMPLER => write!(f,"D3D_SVT_SAMPLER"),
      D3D_SVT_SAMPLER1D => write!(f,"D3D_SVT_SAMPLER1D"),
      D3D_SVT_SAMPLER2D => write!(f,"D3D_SVT_SAMPLER2D"),
      D3D_SVT_SAMPLER3D => write!(f,"D3D_SVT_SAMPLER3D"),
      D3D_SVT_SAMPLERCUBE => write!(f,"D3D_SVT_SAMPLERCUBE"),
      D3D_SVT_PIXELSHADER => write!(f,"D3D_SVT_PIXELSHADER"),
      D3D_SVT_VERTEXSHADER => write!(f,"D3D_SVT_VERTEXSHADER"),
      D3D_SVT_PIXELFRAGMENT => write!(f,"D3D_SVT_PIXELFRAGMENT"),
      D3D_SVT_VERTEXFRAGMENT => write!(f,"D3D_SVT_VERTEXFRAGMENT"),
      D3D_SVT_UINT => write!(f,"D3D_SVT_UINT"),
      D3D_SVT_UINT8 => write!(f,"D3D_SVT_UINT8"),
      D3D_SVT_GEOMETRYSHADER => write!(f,"D3D_SVT_GEOMETRYSHADER"),
      D3D_SVT_RASTERIZER => write!(f,"D3D_SVT_RASTERIZER"),
      D3D_SVT_DEPTHSTENCIL => write!(f,"D3D_SVT_DEPTHSTENCIL"),
      D3D_SVT_BLEND => write!(f,"D3D_SVT_BLEND"),
      D3D_SVT_BUFFER => write!(f,"D3D_SVT_BUFFER"),
      D3D_SVT_CBUFFER => write!(f,"D3D_SVT_CBUFFER"),
      D3D_SVT_TBUFFER => write!(f,"D3D_SVT_TBUFFER"),
      D3D_SVT_TEXTURE1DARRAY => write!(f,"D3D_SVT_TEXTURE1DARRAY"),
      D3D_SVT_TEXTURE2DARRAY => write!(f,"D3D_SVT_TEXTURE2DARRAY"),
      D3D_SVT_RENDERTARGETVIEW => write!(f,"D3D_SVT_RENDERTARGETVIEW"),
      D3D_SVT_DEPTHSTENCILVIEW => write!(f,"D3D_SVT_DEPTHSTENCILVIEW"),
      D3D_SVT_TEXTURE2DMS => write!(f,"D3D_SVT_TEXTURE2DMS"),
      D3D_SVT_TEXTURE2DMSARRAY => write!(f,"D3D_SVT_TEXTURE2DMSARRAY"),
      D3D_SVT_TEXTURECUBEARRAY => write!(f,"D3D_SVT_TEXTURECUBEARRAY"),
      D3D_SVT_HULLSHADER => write!(f,"D3D_SVT_HULLSHADER"),
      D3D_SVT_DOMAINSHADER => write!(f,"D3D_SVT_DOMAINSHADER"),
      D3D_SVT_INTERFACE_POINTER => write!(f,"D3D_SVT_INTERFACE_POINTER"),
      D3D_SVT_COMPUTESHADER => write!(f,"D3D_SVT_COMPUTESHADER"),
      D3D_SVT_DOUBLE => write!(f,"D3D_SVT_DOUBLE"),
      D3D_SVT_RWTEXTURE1D => write!(f,"D3D_SVT_RWTEXTURE1D"),
      D3D_SVT_RWTEXTURE1DARRAY => write!(f,"D3D_SVT_RWTEXTURE1DARRAY"),
      D3D_SVT_RWTEXTURE2D => write!(f,"D3D_SVT_RWTEXTURE2D"),
      D3D_SVT_RWTEXTURE2DARRAY => write!(f,"D3D_SVT_RWTEXTURE2DARRAY"),
      D3D_SVT_RWTEXTURE3D => write!(f,"D3D_SVT_RWTEXTURE3D"),
      D3D_SVT_RWBUFFER => write!(f,"D3D_SVT_RWBUFFER"),
      D3D_SVT_BYTEADDRESS_BUFFER => write!(f,"D3D_SVT_BYTEADDRESS_BUFFER"),
      D3D_SVT_RWBYTEADDRESS_BUFFER => write!(f,"D3D_SVT_RWBYTEADDRESS_BUFFER"),
      D3D_SVT_STRUCTURED_BUFFER => write!(f,"D3D_SVT_STRUCTURED_BUFFER"),
      D3D_SVT_RWSTRUCTURED_BUFFER => write!(f,"D3D_SVT_RWSTRUCTURED_BUFFER"),
      D3D_SVT_APPEND_STRUCTURED_BUFFER => write!(f,"D3D_SVT_APPEND_STRUCTURED_BUFFER"),
      D3D_SVT_CONSUME_STRUCTURED_BUFFER => write!(f,"D3D_SVT_CONSUME_STRUCTURED_BUFFER"),
      D3D_SVT_MIN8FLOAT => write!(f,"D3D_SVT_MIN8FLOAT"),
      D3D_SVT_MIN10FLOAT => write!(f,"D3D_SVT_MIN10FLOAT"),
      D3D_SVT_MIN16FLOAT => write!(f,"D3D_SVT_MIN16FLOAT"),
      D3D_SVT_MIN12INT => write!(f,"D3D_SVT_MIN12INT"),
      D3D_SVT_MIN16INT => write!(f,"D3D_SVT_MIN16INT"),
      D3D_SVT_MIN16UINT => write!(f,"D3D_SVT_MIN16UINT"),
      D3D_SVT_FORCE_DWORD => write!(f,"D3D_SVT_FORCE_DWORD"),

      _ => write!(f, "_D3D_SHADER_VARIABLE_TYPE({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_VOID: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_BOOL: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_INT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_FLOAT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_STRING: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURECUBE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_SAMPLER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_SAMPLER1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_SAMPLER2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_SAMPLER3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_SAMPLERCUBE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_PIXELSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_VERTEXSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_PIXELFRAGMENT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_VERTEXFRAGMENT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_UINT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_UINT8: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_GEOMETRYSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RASTERIZER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_DEPTHSTENCIL: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_BLEND: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_CBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE1DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE2DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RENDERTARGETVIEW: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_DEPTHSTENCILVIEW: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE2DMS: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURE2DMSARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_TEXTURECUBEARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_HULLSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_DOMAINSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_COMPUTESHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_DOUBLE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWTEXTURE1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWTEXTURE1DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWTEXTURE2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWTEXTURE2DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWTEXTURE3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_BYTEADDRESS_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWBYTEADDRESS_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_RWSTRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_APPEND_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_CONSUME_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN8FLOAT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(52);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN10FLOAT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(53);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN16FLOAT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(54);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN12INT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(55);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN16INT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(56);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_MIN16UINT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(57);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_VOID: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(0);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_BOOL: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_INT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_FLOAT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(3);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_STRING: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(4);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(5);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(6);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(7);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(8);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURECUBE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(9);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_SAMPLER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(10);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_SAMPLER1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(11);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_SAMPLER2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(12);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_SAMPLER3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(13);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_SAMPLERCUBE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(14);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_PIXELSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(15);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_VERTEXSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(16);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_PIXELFRAGMENT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(17);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_VERTEXFRAGMENT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(18);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_UINT: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(19);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_UINT8: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(20);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_GEOMETRYSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(21);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_RASTERIZER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(22);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_DEPTHSTENCIL: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(23);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_BLEND: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(24);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(25);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_CBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(26);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(27);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE1DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(28);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE2DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(29);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_RENDERTARGETVIEW: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(30);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_DEPTHSTENCILVIEW: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(31);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE2DMS: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(32);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURE2DMSARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(33);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D10_SVT_TEXTURECUBEARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(34);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_HULLSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(35);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_DOMAINSHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(36);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_INTERFACE_POINTER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(37);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_COMPUTESHADER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(38);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_DOUBLE: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(39);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWTEXTURE1D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(40);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWTEXTURE1DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(41);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWTEXTURE2D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(42);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWTEXTURE2DARRAY: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(43);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWTEXTURE3D: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(44);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWBUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(45);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_BYTEADDRESS_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(46);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWBYTEADDRESS_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(47);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(48);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_RWSTRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(49);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_APPEND_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(50);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D11_SVT_CONSUME_STRUCTURED_BUFFER: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(51);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const D3D_SVT_FORCE_DWORD: _D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE(2147483647);



#[repr(C)]
#[derive(Clone,Copy,PartialEq,Eq,Default)]
pub struct _DXGI_OFFER_RESOURCE_PRIORITY(pub u32);


impl fmt::Debug for _DXGI_OFFER_RESOURCE_PRIORITY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      DXGI_OFFER_RESOURCE_PRIORITY_LOW => write!(f,"DXGI_OFFER_RESOURCE_PRIORITY_LOW"),
      DXGI_OFFER_RESOURCE_PRIORITY_NORMAL => write!(f,"DXGI_OFFER_RESOURCE_PRIORITY_NORMAL"),
      DXGI_OFFER_RESOURCE_PRIORITY_HIGH => write!(f,"DXGI_OFFER_RESOURCE_PRIORITY_HIGH"),

      _ => write!(f, "_DXGI_OFFER_RESOURCE_PRIORITY({})", self.0),
    }
  }
}
      
#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OFFER_RESOURCE_PRIORITY_LOW: _DXGI_OFFER_RESOURCE_PRIORITY = _DXGI_OFFER_RESOURCE_PRIORITY(1);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OFFER_RESOURCE_PRIORITY_NORMAL: _DXGI_OFFER_RESOURCE_PRIORITY = _DXGI_OFFER_RESOURCE_PRIORITY(2);

#[allow(dead_code)]
#[allow(non_upper_case_globals)]
pub const DXGI_OFFER_RESOURCE_PRIORITY_HIGH: _DXGI_OFFER_RESOURCE_PRIORITY = _DXGI_OFFER_RESOURCE_PRIORITY(3);



#[allow(non_camel_case_types)]
pub type D3D12_GPU_VIRTUAL_ADDRESS = UINT64;
#[allow(non_camel_case_types)]
pub type D3D12_PRIMITIVE = D3D_PRIMITIVE;
#[allow(non_camel_case_types)]
pub type D3D12_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
#[allow(non_camel_case_types)]
pub type D3D12_RECT = RECT;
#[allow(non_camel_case_types)]
pub type D3D_CBUFFER_TYPE = _D3D_CBUFFER_TYPE;
#[allow(non_camel_case_types)]
pub type D3D_INCLUDE_TYPE = _D3D_INCLUDE_TYPE;
#[allow(non_camel_case_types)]
pub type D3D_PARAMETER_FLAGS = _D3D_PARAMETER_FLAGS;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_CBUFFER_FLAGS = _D3D_SHADER_CBUFFER_FLAGS;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_INPUT_FLAGS = _D3D_SHADER_INPUT_FLAGS;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_INPUT_TYPE = _D3D_SHADER_INPUT_TYPE;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_VARIABLE_CLASS = _D3D_SHADER_VARIABLE_CLASS;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_VARIABLE_FLAGS = _D3D_SHADER_VARIABLE_FLAGS;
#[allow(non_camel_case_types)]
pub type D3D_SHADER_VARIABLE_TYPE = _D3D_SHADER_VARIABLE_TYPE;
#[allow(non_camel_case_types)]
pub type DXGI_OFFER_RESOURCE_PRIORITY = _DXGI_OFFER_RESOURCE_PRIORITY;
#[allow(non_camel_case_types)]
pub type DXGI_RGBA = D3DCOLORVALUE;
#[allow(non_camel_case_types)]
pub type DXGI_USAGE = UINT;
#[allow(non_camel_case_types)]
pub type FLOAT = f32;
#[allow(non_camel_case_types)]
pub type HDC = *mut c_void;
#[allow(non_camel_case_types)]
pub type HMONITOR = *mut c_void;
#[allow(non_camel_case_types)]
pub type HRESULT = u32;
#[allow(non_camel_case_types)]
pub type HWND = *mut c_void;
#[allow(non_camel_case_types)]
pub type ID3DBlob = ID3D10Blob;
#[allow(non_camel_case_types)]
pub type IID = GUID;
#[allow(non_camel_case_types)]
pub type INT = i32;
#[allow(non_camel_case_types)]
pub type LPD3D10BLOB = *mut ID3D10Blob;
#[allow(non_camel_case_types)]
pub type LPD3DBLOB = *mut ID3DBlob;
#[allow(non_camel_case_types)]
pub type LPD3DINCLUDE = *mut ID3DInclude;
#[allow(non_camel_case_types)]
pub type LPD3D_SHADER_MACRO = *mut D3D_SHADER_MACRO;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_CREATE_DEVICE = extern "system" fn (_ : *mut IUnknown, _ : D3D_FEATURE_LEVEL, _ : REFGUID, _ : *mut *mut c_void) -> HRESULT;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = extern "system" fn (pSrcData: LPCVOID, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: REFGUID, ppRootSignatureDeserializer: *mut *mut c_void) -> HRESULT;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_GET_DEBUG_INTERFACE = extern "system" fn (_ : REFGUID, _ : *mut *mut c_void) -> HRESULT;
#[allow(non_camel_case_types)]
pub type PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = extern "system" fn (pRootSignature: *const D3D12_ROOT_SIGNATURE_DESC, Version: D3D_ROOT_SIGNATURE_VERSION, ppBlob: *mut *mut ID3DBlob, ppErrorBlob: *mut *mut ID3DBlob) -> HRESULT;
pub type REFGUID=&'static GUID;
#[allow(non_camel_case_types)]
pub type RPC_IF_HANDLE = *mut c_void;
#[allow(non_camel_case_types)]
pub type SHORT = i16;
#[allow(non_camel_case_types)]
pub type UINT = u32;
#[allow(non_camel_case_types)]
pub type UINT16 = u16;
#[allow(non_camel_case_types)]
pub type UINT64 = u64;
#[allow(non_camel_case_types)]
pub type UINT8 = u8;
#[allow(non_camel_case_types)]
pub type ULONG = u32;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
#[derive(Clone,Copy)]
pub struct D3D12_BLEND_DESC {
  pub AlphaToCoverageEnable : BOOL,
  pub IndependentBlendEnable : BOOL,
  pub RenderTarget : [D3D12_RENDER_TARGET_BLEND_DESC;8],
}


impl fmt::Debug for D3D12_BLEND_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_BLEND_DESC ")};
    try!{writeln!(f,"  AlphaToCoverageEnable: {:?}", self.AlphaToCoverageEnable)};
    try!{writeln!(f,"  IndependentBlendEnable: {:?}", self.IndependentBlendEnable)};
    try!{write!(f,"  RenderTarget: [")};
    for i in (0..8) {try!{write!(f,"{:?}; ", self.RenderTarget[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_BOX {
  pub left : UINT,
  pub top : UINT,
  pub front : UINT,
  pub right : UINT,
  pub bottom : UINT,
  pub back : UINT,
}


impl fmt::Debug for D3D12_BOX {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_BOX ")};
    try!{writeln!(f,"  left: {:?}", self.left)};
    try!{writeln!(f,"  top: {:?}", self.top)};
    try!{writeln!(f,"  front: {:?}", self.front)};
    try!{writeln!(f,"  right: {:?}", self.right)};
    try!{writeln!(f,"  bottom: {:?}", self.bottom)};
    try!{writeln!(f,"  back: {:?}", self.back)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_BUFFER_RTV {
  pub FirstElement : UINT64,
  pub NumElements : UINT,
}


impl fmt::Debug for D3D12_BUFFER_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_BUFFER_RTV ")};
    try!{writeln!(f,"  FirstElement: {:?}", self.FirstElement)};
    try!{writeln!(f,"  NumElements: {:?}", self.NumElements)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_BUFFER_SRV {
  pub FirstElement : UINT64,
  pub NumElements : UINT,
  pub StructureByteStride : UINT,
  pub Flags : D3D12_BUFFER_SRV_FLAGS,
}


impl fmt::Debug for D3D12_BUFFER_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_BUFFER_SRV ")};
    try!{writeln!(f,"  FirstElement: {:?}", self.FirstElement)};
    try!{writeln!(f,"  NumElements: {:?}", self.NumElements)};
    try!{writeln!(f,"  StructureByteStride: {:?}", self.StructureByteStride)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_BUFFER_UAV {
  pub FirstElement : UINT64,
  pub NumElements : UINT,
  pub StructureByteStride : UINT,
  pub CounterOffsetInBytes : UINT64,
  pub Flags : D3D12_BUFFER_UAV_FLAGS,
}


impl fmt::Debug for D3D12_BUFFER_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_BUFFER_UAV ")};
    try!{writeln!(f,"  FirstElement: {:?}", self.FirstElement)};
    try!{writeln!(f,"  NumElements: {:?}", self.NumElements)};
    try!{writeln!(f,"  StructureByteStride: {:?}", self.StructureByteStride)};
    try!{writeln!(f,"  CounterOffsetInBytes: {:?}", self.CounterOffsetInBytes)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_CACHED_PIPELINE_STATE {
  pub pCachedBlob : *const c_void,
  pub CachedBlobSizeInBytes : SIZE_T,
}


impl fmt::Debug for D3D12_CACHED_PIPELINE_STATE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_CACHED_PIPELINE_STATE ")};
    try!{writeln!(f,"  pCachedBlob: {:?}", self.pCachedBlob)};
    try!{writeln!(f,"  CachedBlobSizeInBytes: {:?}", self.CachedBlobSizeInBytes)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_CLEAR_VALUE {
  pub Format : DXGI_FORMAT,
}


impl fmt::Debug for D3D12_CLEAR_VALUE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_CLEAR_VALUE ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
pub struct D3D12_COMMAND_QUEUE_DESC {
  pub Type : D3D12_COMMAND_LIST_TYPE,
  pub Priority : INT,
  pub Flags : D3D12_COMMAND_QUEUE_FLAGS,
  pub NodeMask : UINT,
}


impl fmt::Debug for D3D12_COMMAND_QUEUE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_COMMAND_QUEUE_DESC ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  Priority: {:?}", self.Priority)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_COMMAND_SIGNATURE_DESC {
  pub ByteStride : UINT,
  pub NumArgumentDescs : UINT,
  pub pArgumentDescs : *const D3D12_INDIRECT_ARGUMENT_DESC,
  pub NodeMask : UINT,
}


impl fmt::Debug for D3D12_COMMAND_SIGNATURE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_COMMAND_SIGNATURE_DESC ")};
    try!{writeln!(f,"  ByteStride: {:?}", self.ByteStride)};
    try!{writeln!(f,"  NumArgumentDescs: {:?}", self.NumArgumentDescs)};
    try!{writeln!(f,"  pArgumentDescs: {:?}", self.pArgumentDescs)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_COMPUTE_PIPELINE_STATE_DESC {
  pub pRootSignature : *mut ID3D12RootSignature,
  pub CS : D3D12_SHADER_BYTECODE,
  pub NodeMask : UINT,
  pub CachedPSO : D3D12_CACHED_PIPELINE_STATE,
  pub Flags : D3D12_PIPELINE_STATE_FLAGS,
}


impl fmt::Debug for D3D12_COMPUTE_PIPELINE_STATE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_COMPUTE_PIPELINE_STATE_DESC ")};
    try!{writeln!(f,"  pRootSignature: {:?}", self.pRootSignature)};
    try!{writeln!(f,"  CS: {:?}", self.CS)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    try!{writeln!(f,"  CachedPSO: {:?}", self.CachedPSO)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
  pub BufferLocation : D3D12_GPU_VIRTUAL_ADDRESS,
  pub SizeInBytes : UINT,
}


impl fmt::Debug for D3D12_CONSTANT_BUFFER_VIEW_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_CONSTANT_BUFFER_VIEW_DESC ")};
    try!{writeln!(f,"  BufferLocation: {:?}", self.BufferLocation)};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Clone,Copy)]
pub struct D3D12_CPU_DESCRIPTOR_HANDLE {
  pub ptr : SIZE_T,
}


impl fmt::Debug for D3D12_CPU_DESCRIPTOR_HANDLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_CPU_DESCRIPTOR_HANDLE ")};
    try!{writeln!(f,"  ptr: {:?}", self.ptr)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
#[derive(Clone,Copy)]
pub struct D3D12_DEPTH_STENCILOP_DESC {
  pub StencilFailOp : D3D12_STENCIL_OP,
  pub StencilDepthFailOp : D3D12_STENCIL_OP,
  pub StencilPassOp : D3D12_STENCIL_OP,
  pub StencilFunc : D3D12_COMPARISON_FUNC,
}


impl fmt::Debug for D3D12_DEPTH_STENCILOP_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DEPTH_STENCILOP_DESC ")};
    try!{writeln!(f,"  StencilFailOp: {:?}", self.StencilFailOp)};
    try!{writeln!(f,"  StencilDepthFailOp: {:?}", self.StencilDepthFailOp)};
    try!{writeln!(f,"  StencilPassOp: {:?}", self.StencilPassOp)};
    try!{writeln!(f,"  StencilFunc: {:?}", self.StencilFunc)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DEPTH_STENCIL_DESC {
  pub DepthEnable : BOOL,
  pub DepthWriteMask : D3D12_DEPTH_WRITE_MASK,
  pub DepthFunc : D3D12_COMPARISON_FUNC,
  pub StencilEnable : BOOL,
  pub StencilReadMask : UINT8,
  pub StencilWriteMask : UINT8,
  pub FrontFace : D3D12_DEPTH_STENCILOP_DESC,
  pub BackFace : D3D12_DEPTH_STENCILOP_DESC,
}


impl fmt::Debug for D3D12_DEPTH_STENCIL_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DEPTH_STENCIL_DESC ")};
    try!{writeln!(f,"  DepthEnable: {:?}", self.DepthEnable)};
    try!{writeln!(f,"  DepthWriteMask: {:?}", self.DepthWriteMask)};
    try!{writeln!(f,"  DepthFunc: {:?}", self.DepthFunc)};
    try!{writeln!(f,"  StencilEnable: {:?}", self.StencilEnable)};
    try!{writeln!(f,"  StencilReadMask: {:?}", self.StencilReadMask)};
    try!{writeln!(f,"  StencilWriteMask: {:?}", self.StencilWriteMask)};
    try!{writeln!(f,"  FrontFace: {:?}", self.FrontFace)};
    try!{writeln!(f,"  BackFace: {:?}", self.BackFace)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DEPTH_STENCIL_VALUE {
  pub Depth : FLOAT,
  pub Stencil : UINT8,
}


impl fmt::Debug for D3D12_DEPTH_STENCIL_VALUE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DEPTH_STENCIL_VALUE ")};
    try!{writeln!(f,"  Depth: {:?}", self.Depth)};
    try!{writeln!(f,"  Stencil: {:?}", self.Stencil)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DEPTH_STENCIL_VIEW_DESC {
  pub Format : DXGI_FORMAT,
  pub ViewDimension : D3D12_DSV_DIMENSION,
  pub Flags : D3D12_DSV_FLAGS,
}


impl fmt::Debug for D3D12_DEPTH_STENCIL_VIEW_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DEPTH_STENCIL_VIEW_DESC ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ViewDimension: {:?}", self.ViewDimension)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DESCRIPTOR_HEAP_DESC {
  pub Type : D3D12_DESCRIPTOR_HEAP_TYPE,
  pub NumDescriptors : UINT,
  pub Flags : D3D12_DESCRIPTOR_HEAP_FLAGS,
  pub NodeMask : UINT,
}


impl fmt::Debug for D3D12_DESCRIPTOR_HEAP_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DESCRIPTOR_HEAP_DESC ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  NumDescriptors: {:?}", self.NumDescriptors)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DESCRIPTOR_RANGE {
  pub RangeType : D3D12_DESCRIPTOR_RANGE_TYPE,
  pub NumDescriptors : UINT,
  pub BaseShaderRegister : UINT,
  pub RegisterSpace : UINT,
  pub OffsetInDescriptorsFromTableStart : UINT,
}


impl fmt::Debug for D3D12_DESCRIPTOR_RANGE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DESCRIPTOR_RANGE ")};
    try!{writeln!(f,"  RangeType: {:?}", self.RangeType)};
    try!{writeln!(f,"  NumDescriptors: {:?}", self.NumDescriptors)};
    try!{writeln!(f,"  BaseShaderRegister: {:?}", self.BaseShaderRegister)};
    try!{writeln!(f,"  RegisterSpace: {:?}", self.RegisterSpace)};
    try!{writeln!(f,"  OffsetInDescriptorsFromTableStart: {:?}", self.OffsetInDescriptorsFromTableStart)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DISCARD_REGION {
  pub NumRects : UINT,
  pub pRects : *const D3D12_RECT,
  pub FirstSubresource : UINT,
  pub NumSubresources : UINT,
}


impl fmt::Debug for D3D12_DISCARD_REGION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DISCARD_REGION ")};
    try!{writeln!(f,"  NumRects: {:?}", self.NumRects)};
    try!{writeln!(f,"  pRects: {:?}", self.pRects)};
    try!{writeln!(f,"  FirstSubresource: {:?}", self.FirstSubresource)};
    try!{writeln!(f,"  NumSubresources: {:?}", self.NumSubresources)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DISPATCH_ARGUMENTS {
  pub ThreadGroupCountX : UINT,
  pub ThreadGroupCountY : UINT,
  pub ThreadGroupCountZ : UINT,
}


impl fmt::Debug for D3D12_DISPATCH_ARGUMENTS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DISPATCH_ARGUMENTS ")};
    try!{writeln!(f,"  ThreadGroupCountX: {:?}", self.ThreadGroupCountX)};
    try!{writeln!(f,"  ThreadGroupCountY: {:?}", self.ThreadGroupCountY)};
    try!{writeln!(f,"  ThreadGroupCountZ: {:?}", self.ThreadGroupCountZ)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DRAW_ARGUMENTS {
  pub VertexCountPerInstance : UINT,
  pub InstanceCount : UINT,
  pub StartVertexLocation : UINT,
  pub StartInstanceLocation : UINT,
}


impl fmt::Debug for D3D12_DRAW_ARGUMENTS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DRAW_ARGUMENTS ")};
    try!{writeln!(f,"  VertexCountPerInstance: {:?}", self.VertexCountPerInstance)};
    try!{writeln!(f,"  InstanceCount: {:?}", self.InstanceCount)};
    try!{writeln!(f,"  StartVertexLocation: {:?}", self.StartVertexLocation)};
    try!{writeln!(f,"  StartInstanceLocation: {:?}", self.StartInstanceLocation)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_DRAW_INDEXED_ARGUMENTS {
  pub IndexCountPerInstance : UINT,
  pub InstanceCount : UINT,
  pub StartIndexLocation : UINT,
  pub BaseVertexLocation : INT,
  pub StartInstanceLocation : UINT,
}


impl fmt::Debug for D3D12_DRAW_INDEXED_ARGUMENTS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_DRAW_INDEXED_ARGUMENTS ")};
    try!{writeln!(f,"  IndexCountPerInstance: {:?}", self.IndexCountPerInstance)};
    try!{writeln!(f,"  InstanceCount: {:?}", self.InstanceCount)};
    try!{writeln!(f,"  StartIndexLocation: {:?}", self.StartIndexLocation)};
    try!{writeln!(f,"  BaseVertexLocation: {:?}", self.BaseVertexLocation)};
    try!{writeln!(f,"  StartInstanceLocation: {:?}", self.StartInstanceLocation)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_ARCHITECTURE {
  pub NodeIndex : UINT,
  pub TileBasedRenderer : BOOL,
  pub UMA : BOOL,
  pub CacheCoherentUMA : BOOL,
}


impl fmt::Debug for D3D12_FEATURE_DATA_ARCHITECTURE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_ARCHITECTURE ")};
    try!{writeln!(f,"  NodeIndex: {:?}", self.NodeIndex)};
    try!{writeln!(f,"  TileBasedRenderer: {:?}", self.TileBasedRenderer)};
    try!{writeln!(f,"  UMA: {:?}", self.UMA)};
    try!{writeln!(f,"  CacheCoherentUMA: {:?}", self.CacheCoherentUMA)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
pub struct D3D12_FEATURE_DATA_D3D12_OPTIONS {
  pub DoublePrecisionFloatShaderOps : BOOL,
  pub OutputMergerLogicOp : BOOL,
  pub MinPrecisionSupport : D3D12_SHADER_MIN_PRECISION_SUPPORT,
  pub TiledResourcesTier : D3D12_TILED_RESOURCES_TIER,
  pub ResourceBindingTier : D3D12_RESOURCE_BINDING_TIER,
  pub PSSpecifiedStencilRefSupported : BOOL,
  pub TypedUAVLoadAdditionalFormats : BOOL,
  pub ROVsSupported : BOOL,
  pub ConservativeRasterizationTier : D3D12_CONSERVATIVE_RASTERIZATION_TIER,
  pub MaxGPUVirtualAddressBitsPerResource : UINT,
  pub StandardSwizzle64KBSupported : BOOL,
  pub CrossNodeSharingTier : D3D12_CROSS_NODE_SHARING_TIER,
  pub CrossAdapterRowMajorTextureSupported : BOOL,
  pub VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation : BOOL,
  pub ResourceHeapTier : D3D12_RESOURCE_HEAP_TIER,
}


impl fmt::Debug for D3D12_FEATURE_DATA_D3D12_OPTIONS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_D3D12_OPTIONS ")};
    try!{writeln!(f,"  DoublePrecisionFloatShaderOps: {:?}", self.DoublePrecisionFloatShaderOps)};
    try!{writeln!(f,"  OutputMergerLogicOp: {:?}", self.OutputMergerLogicOp)};
    try!{writeln!(f,"  MinPrecisionSupport: {:?}", self.MinPrecisionSupport)};
    try!{writeln!(f,"  TiledResourcesTier: {:?}", self.TiledResourcesTier)};
    try!{writeln!(f,"  ResourceBindingTier: {:?}", self.ResourceBindingTier)};
    try!{writeln!(f,"  PSSpecifiedStencilRefSupported: {:?}", self.PSSpecifiedStencilRefSupported)};
    try!{writeln!(f,"  TypedUAVLoadAdditionalFormats: {:?}", self.TypedUAVLoadAdditionalFormats)};
    try!{writeln!(f,"  ROVsSupported: {:?}", self.ROVsSupported)};
    try!{writeln!(f,"  ConservativeRasterizationTier: {:?}", self.ConservativeRasterizationTier)};
    try!{writeln!(f,"  MaxGPUVirtualAddressBitsPerResource: {:?}", self.MaxGPUVirtualAddressBitsPerResource)};
    try!{writeln!(f,"  StandardSwizzle64KBSupported: {:?}", self.StandardSwizzle64KBSupported)};
    try!{writeln!(f,"  CrossNodeSharingTier: {:?}", self.CrossNodeSharingTier)};
    try!{writeln!(f,"  CrossAdapterRowMajorTextureSupported: {:?}", self.CrossAdapterRowMajorTextureSupported)};
    try!{writeln!(f,"  VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: {:?}", self.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation)};
    try!{writeln!(f,"  ResourceHeapTier: {:?}", self.ResourceHeapTier)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_FEATURE_LEVELS {
  pub NumFeatureLevels : UINT,
  pub pFeatureLevelsRequested : *const D3D_FEATURE_LEVEL,
  pub MaxSupportedFeatureLevel : D3D_FEATURE_LEVEL,
}


impl fmt::Debug for D3D12_FEATURE_DATA_FEATURE_LEVELS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_FEATURE_LEVELS ")};
    try!{writeln!(f,"  NumFeatureLevels: {:?}", self.NumFeatureLevels)};
    try!{writeln!(f,"  pFeatureLevelsRequested: {:?}", self.pFeatureLevelsRequested)};
    try!{writeln!(f,"  MaxSupportedFeatureLevel: {:?}", self.MaxSupportedFeatureLevel)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_FORMAT_INFO {
  pub Format : DXGI_FORMAT,
  pub PlaneCount : UINT8,
}


impl fmt::Debug for D3D12_FEATURE_DATA_FORMAT_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_FORMAT_INFO ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  PlaneCount: {:?}", self.PlaneCount)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_FORMAT_SUPPORT {
  pub Format : DXGI_FORMAT,
  pub Support1 : D3D12_FORMAT_SUPPORT1,
  pub Support2 : D3D12_FORMAT_SUPPORT2,
}


impl fmt::Debug for D3D12_FEATURE_DATA_FORMAT_SUPPORT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_FORMAT_SUPPORT ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  Support1: {:?}", self.Support1)};
    try!{writeln!(f,"  Support2: {:?}", self.Support2)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  pub MaxGPUVirtualAddressBitsPerResource : UINT,
  pub MaxGPUVirtualAddressBitsPerProcess : UINT,
}


impl fmt::Debug for D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT ")};
    try!{writeln!(f,"  MaxGPUVirtualAddressBitsPerResource: {:?}", self.MaxGPUVirtualAddressBitsPerResource)};
    try!{writeln!(f,"  MaxGPUVirtualAddressBitsPerProcess: {:?}", self.MaxGPUVirtualAddressBitsPerProcess)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
  pub Format : DXGI_FORMAT,
  pub SampleCount : UINT,
  pub Flags : D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS,
  pub NumQualityLevels : UINT,
}


impl fmt::Debug for D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  SampleCount: {:?}", self.SampleCount)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    try!{writeln!(f,"  NumQualityLevels: {:?}", self.NumQualityLevels)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_GPU_DESCRIPTOR_HANDLE {
  pub ptr : UINT64,
}


impl fmt::Debug for D3D12_GPU_DESCRIPTOR_HANDLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_GPU_DESCRIPTOR_HANDLE ")};
    try!{writeln!(f,"  ptr: {:?}", self.ptr)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_GRAPHICS_PIPELINE_STATE_DESC {
  pub pRootSignature : *mut ID3D12RootSignature,
  pub VS : D3D12_SHADER_BYTECODE,
  pub PS : D3D12_SHADER_BYTECODE,
  pub DS : D3D12_SHADER_BYTECODE,
  pub HS : D3D12_SHADER_BYTECODE,
  pub GS : D3D12_SHADER_BYTECODE,
  pub StreamOutput : D3D12_STREAM_OUTPUT_DESC,
  pub BlendState : D3D12_BLEND_DESC,
  pub SampleMask : UINT,
  pub RasterizerState : D3D12_RASTERIZER_DESC,
  pub DepthStencilState : D3D12_DEPTH_STENCIL_DESC,
  pub InputLayout : D3D12_INPUT_LAYOUT_DESC,
  pub IBStripCutValue : D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,
  pub PrimitiveTopologyType : D3D12_PRIMITIVE_TOPOLOGY_TYPE,
  pub NumRenderTargets : UINT,
  pub RTVFormats : [DXGI_FORMAT;8],
  pub DSVFormat : DXGI_FORMAT,
  pub SampleDesc : DXGI_SAMPLE_DESC,
  pub NodeMask : UINT,
  pub CachedPSO : D3D12_CACHED_PIPELINE_STATE,
  pub Flags : D3D12_PIPELINE_STATE_FLAGS,
}


impl fmt::Debug for D3D12_GRAPHICS_PIPELINE_STATE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_GRAPHICS_PIPELINE_STATE_DESC ")};
    try!{writeln!(f,"  pRootSignature: {:?}", self.pRootSignature)};
    try!{writeln!(f,"  VS: {:?}", self.VS)};
    try!{writeln!(f,"  PS: {:?}", self.PS)};
    try!{writeln!(f,"  DS: {:?}", self.DS)};
    try!{writeln!(f,"  HS: {:?}", self.HS)};
    try!{writeln!(f,"  GS: {:?}", self.GS)};
    try!{writeln!(f,"  StreamOutput: {:?}", self.StreamOutput)};
    try!{writeln!(f,"  BlendState: {:?}", self.BlendState)};
    try!{writeln!(f,"  SampleMask: {:?}", self.SampleMask)};
    try!{writeln!(f,"  RasterizerState: {:?}", self.RasterizerState)};
    try!{writeln!(f,"  DepthStencilState: {:?}", self.DepthStencilState)};
    try!{writeln!(f,"  InputLayout: {:?}", self.InputLayout)};
    try!{writeln!(f,"  IBStripCutValue: {:?}", self.IBStripCutValue)};
    try!{writeln!(f,"  PrimitiveTopologyType: {:?}", self.PrimitiveTopologyType)};
    try!{writeln!(f,"  NumRenderTargets: {:?}", self.NumRenderTargets)};
    try!{write!(f,"  RTVFormats: [")};
    for i in (0..8) {try!{write!(f,"{:?}; ", self.RTVFormats[i])};}
    try!{writeln!(f,"]")};
    try!{writeln!(f,"  DSVFormat: {:?}", self.DSVFormat)};
    try!{writeln!(f,"  SampleDesc: {:?}", self.SampleDesc)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    try!{writeln!(f,"  CachedPSO: {:?}", self.CachedPSO)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_HEAP_DESC {
  pub SizeInBytes : UINT64,
  pub Properties : D3D12_HEAP_PROPERTIES,
  pub Alignment : UINT64,
  pub Flags : D3D12_HEAP_FLAGS,
}


impl fmt::Debug for D3D12_HEAP_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_HEAP_DESC ")};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    try!{writeln!(f,"  Properties: {:?}", self.Properties)};
    try!{writeln!(f,"  Alignment: {:?}", self.Alignment)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_HEAP_PROPERTIES {
  pub Type : D3D12_HEAP_TYPE,
  pub CPUPageProperty : D3D12_CPU_PAGE_PROPERTY,
  pub MemoryPoolPreference : D3D12_MEMORY_POOL,
  pub CreationNodeMask : UINT,
  pub VisibleNodeMask : UINT,
}


impl fmt::Debug for D3D12_HEAP_PROPERTIES {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_HEAP_PROPERTIES ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  CPUPageProperty: {:?}", self.CPUPageProperty)};
    try!{writeln!(f,"  MemoryPoolPreference: {:?}", self.MemoryPoolPreference)};
    try!{writeln!(f,"  CreationNodeMask: {:?}", self.CreationNodeMask)};
    try!{writeln!(f,"  VisibleNodeMask: {:?}", self.VisibleNodeMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INDEX_BUFFER_VIEW {
  pub BufferLocation : D3D12_GPU_VIRTUAL_ADDRESS,
  pub SizeInBytes : UINT,
  pub Format : DXGI_FORMAT,
}


impl fmt::Debug for D3D12_INDEX_BUFFER_VIEW {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INDEX_BUFFER_VIEW ")};
    try!{writeln!(f,"  BufferLocation: {:?}", self.BufferLocation)};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INDIRECT_ARGUMENT_DESC {
  pub Type : D3D12_INDIRECT_ARGUMENT_TYPE,
}


impl fmt::Debug for D3D12_INDIRECT_ARGUMENT_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INDIRECT_ARGUMENT_DESC ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INFO_QUEUE_FILTER {
  pub AllowList : D3D12_INFO_QUEUE_FILTER_DESC,
  pub DenyList : D3D12_INFO_QUEUE_FILTER_DESC,
}


impl fmt::Debug for D3D12_INFO_QUEUE_FILTER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INFO_QUEUE_FILTER ")};
    try!{writeln!(f,"  AllowList: {:?}", self.AllowList)};
    try!{writeln!(f,"  DenyList: {:?}", self.DenyList)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INFO_QUEUE_FILTER_DESC {
  pub NumCategories : UINT,
  pub pCategoryList : *mut D3D12_MESSAGE_CATEGORY,
  pub NumSeverities : UINT,
  pub pSeverityList : *mut D3D12_MESSAGE_SEVERITY,
  pub NumIDs : UINT,
  pub pIDList : *mut D3D12_MESSAGE_ID,
}


impl fmt::Debug for D3D12_INFO_QUEUE_FILTER_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INFO_QUEUE_FILTER_DESC ")};
    try!{writeln!(f,"  NumCategories: {:?}", self.NumCategories)};
    try!{writeln!(f,"  pCategoryList: {:?}", self.pCategoryList)};
    try!{writeln!(f,"  NumSeverities: {:?}", self.NumSeverities)};
    try!{writeln!(f,"  pSeverityList: {:?}", self.pSeverityList)};
    try!{writeln!(f,"  NumIDs: {:?}", self.NumIDs)};
    try!{writeln!(f,"  pIDList: {:?}", self.pIDList)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INPUT_ELEMENT_DESC {
  pub SemanticName : LPCSTR,
  pub SemanticIndex : UINT,
  pub Format : DXGI_FORMAT,
  pub InputSlot : UINT,
  pub AlignedByteOffset : UINT,
  pub InputSlotClass : D3D12_INPUT_CLASSIFICATION,
  pub InstanceDataStepRate : UINT,
}


impl fmt::Debug for D3D12_INPUT_ELEMENT_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INPUT_ELEMENT_DESC ")};
    try!{writeln!(f,"  SemanticName: {:?}", self.SemanticName)};
    try!{writeln!(f,"  SemanticIndex: {:?}", self.SemanticIndex)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  InputSlot: {:?}", self.InputSlot)};
    try!{writeln!(f,"  AlignedByteOffset: {:?}", self.AlignedByteOffset)};
    try!{writeln!(f,"  InputSlotClass: {:?}", self.InputSlotClass)};
    try!{writeln!(f,"  InstanceDataStepRate: {:?}", self.InstanceDataStepRate)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_INPUT_LAYOUT_DESC {
  pub pInputElementDescs : *const D3D12_INPUT_ELEMENT_DESC,
  pub NumElements : UINT,
}


impl fmt::Debug for D3D12_INPUT_LAYOUT_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_INPUT_LAYOUT_DESC ")};
    try!{writeln!(f,"  pInputElementDescs: {:?}", self.pInputElementDescs)};
    try!{writeln!(f,"  NumElements: {:?}", self.NumElements)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_MEMCPY_DEST {
  pub pData : *mut c_void,
  pub RowPitch : SIZE_T,
  pub SlicePitch : SIZE_T,
}


impl fmt::Debug for D3D12_MEMCPY_DEST {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_MEMCPY_DEST ")};
    try!{writeln!(f,"  pData: {:?}", self.pData)};
    try!{writeln!(f,"  RowPitch: {:?}", self.RowPitch)};
    try!{writeln!(f,"  SlicePitch: {:?}", self.SlicePitch)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_MESSAGE {
  pub Category : D3D12_MESSAGE_CATEGORY,
  pub Severity : D3D12_MESSAGE_SEVERITY,
  pub ID : D3D12_MESSAGE_ID,
  pub pDescription : *mut u8,
  pub DescriptionByteLength : SIZE_T,
}


impl fmt::Debug for D3D12_MESSAGE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_MESSAGE ")};
    try!{writeln!(f,"  Category: {:?}", self.Category)};
    try!{writeln!(f,"  Severity: {:?}", self.Severity)};
    try!{writeln!(f,"  ID: {:?}", self.ID)};
    try!{writeln!(f,"  pDescription: {:?}", self.pDescription)};
    try!{writeln!(f,"  DescriptionByteLength: {:?}", self.DescriptionByteLength)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_PACKED_MIP_INFO {
  pub NumStandardMips : UINT8,
  pub NumPackedMips : UINT8,
  pub NumTilesForPackedMips : UINT,
  pub StartTileIndexInOverallResource : UINT,
}


impl fmt::Debug for D3D12_PACKED_MIP_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_PACKED_MIP_INFO ")};
    try!{writeln!(f,"  NumStandardMips: {:?}", self.NumStandardMips)};
    try!{writeln!(f,"  NumPackedMips: {:?}", self.NumPackedMips)};
    try!{writeln!(f,"  NumTilesForPackedMips: {:?}", self.NumTilesForPackedMips)};
    try!{writeln!(f,"  StartTileIndexInOverallResource: {:?}", self.StartTileIndexInOverallResource)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
  pub Offset : UINT64,
  pub Footprint : D3D12_SUBRESOURCE_FOOTPRINT,
}


impl fmt::Debug for D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT ")};
    try!{writeln!(f,"  Offset: {:?}", self.Offset)};
    try!{writeln!(f,"  Footprint: {:?}", self.Footprint)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_QUERY_DATA_PIPELINE_STATISTICS {
  pub IAVertices : UINT64,
  pub IAPrimitives : UINT64,
  pub VSInvocations : UINT64,
  pub GSInvocations : UINT64,
  pub GSPrimitives : UINT64,
  pub CInvocations : UINT64,
  pub CPrimitives : UINT64,
  pub PSInvocations : UINT64,
  pub HSInvocations : UINT64,
  pub DSInvocations : UINT64,
  pub CSInvocations : UINT64,
}


impl fmt::Debug for D3D12_QUERY_DATA_PIPELINE_STATISTICS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_QUERY_DATA_PIPELINE_STATISTICS ")};
    try!{writeln!(f,"  IAVertices: {:?}", self.IAVertices)};
    try!{writeln!(f,"  IAPrimitives: {:?}", self.IAPrimitives)};
    try!{writeln!(f,"  VSInvocations: {:?}", self.VSInvocations)};
    try!{writeln!(f,"  GSInvocations: {:?}", self.GSInvocations)};
    try!{writeln!(f,"  GSPrimitives: {:?}", self.GSPrimitives)};
    try!{writeln!(f,"  CInvocations: {:?}", self.CInvocations)};
    try!{writeln!(f,"  CPrimitives: {:?}", self.CPrimitives)};
    try!{writeln!(f,"  PSInvocations: {:?}", self.PSInvocations)};
    try!{writeln!(f,"  HSInvocations: {:?}", self.HSInvocations)};
    try!{writeln!(f,"  DSInvocations: {:?}", self.DSInvocations)};
    try!{writeln!(f,"  CSInvocations: {:?}", self.CSInvocations)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_QUERY_DATA_SO_STATISTICS {
  pub NumPrimitivesWritten : UINT64,
  pub PrimitivesStorageNeeded : UINT64,
}


impl fmt::Debug for D3D12_QUERY_DATA_SO_STATISTICS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_QUERY_DATA_SO_STATISTICS ")};
    try!{writeln!(f,"  NumPrimitivesWritten: {:?}", self.NumPrimitivesWritten)};
    try!{writeln!(f,"  PrimitivesStorageNeeded: {:?}", self.PrimitivesStorageNeeded)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_QUERY_HEAP_DESC {
  pub Type : D3D12_QUERY_HEAP_TYPE,
  pub Count : UINT,
  pub NodeMask : UINT,
}


impl fmt::Debug for D3D12_QUERY_HEAP_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_QUERY_HEAP_DESC ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  Count: {:?}", self.Count)};
    try!{writeln!(f,"  NodeMask: {:?}", self.NodeMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RANGE {
  pub Begin : SIZE_T,
  pub End : SIZE_T,
}


impl fmt::Debug for D3D12_RANGE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RANGE ")};
    try!{writeln!(f,"  Begin: {:?}", self.Begin)};
    try!{writeln!(f,"  End: {:?}", self.End)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RASTERIZER_DESC {
  pub FillMode : D3D12_FILL_MODE,
  pub CullMode : D3D12_CULL_MODE,
  pub FrontCounterClockwise : BOOL,
  pub DepthBias : INT,
  pub DepthBiasClamp : FLOAT,
  pub SlopeScaledDepthBias : FLOAT,
  pub DepthClipEnable : BOOL,
  pub MultisampleEnable : BOOL,
  pub AntialiasedLineEnable : BOOL,
  pub ForcedSampleCount : UINT,
  pub ConservativeRaster : D3D12_CONSERVATIVE_RASTERIZATION_MODE,
}


impl fmt::Debug for D3D12_RASTERIZER_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RASTERIZER_DESC ")};
    try!{writeln!(f,"  FillMode: {:?}", self.FillMode)};
    try!{writeln!(f,"  CullMode: {:?}", self.CullMode)};
    try!{writeln!(f,"  FrontCounterClockwise: {:?}", self.FrontCounterClockwise)};
    try!{writeln!(f,"  DepthBias: {:?}", self.DepthBias)};
    try!{writeln!(f,"  DepthBiasClamp: {:?}", self.DepthBiasClamp)};
    try!{writeln!(f,"  SlopeScaledDepthBias: {:?}", self.SlopeScaledDepthBias)};
    try!{writeln!(f,"  DepthClipEnable: {:?}", self.DepthClipEnable)};
    try!{writeln!(f,"  MultisampleEnable: {:?}", self.MultisampleEnable)};
    try!{writeln!(f,"  AntialiasedLineEnable: {:?}", self.AntialiasedLineEnable)};
    try!{writeln!(f,"  ForcedSampleCount: {:?}", self.ForcedSampleCount)};
    try!{writeln!(f,"  ConservativeRaster: {:?}", self.ConservativeRaster)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
#[derive(Clone,Copy)]
pub struct D3D12_RENDER_TARGET_BLEND_DESC {
  pub BlendEnable : BOOL,
  pub LogicOpEnable : BOOL,
  pub SrcBlend : D3D12_BLEND,
  pub DestBlend : D3D12_BLEND,
  pub BlendOp : D3D12_BLEND_OP,
  pub SrcBlendAlpha : D3D12_BLEND,
  pub DestBlendAlpha : D3D12_BLEND,
  pub BlendOpAlpha : D3D12_BLEND_OP,
  pub LogicOp : D3D12_LOGIC_OP,
  pub RenderTargetWriteMask : UINT8,
}


impl fmt::Debug for D3D12_RENDER_TARGET_BLEND_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RENDER_TARGET_BLEND_DESC ")};
    try!{writeln!(f,"  BlendEnable: {:?}", self.BlendEnable)};
    try!{writeln!(f,"  LogicOpEnable: {:?}", self.LogicOpEnable)};
    try!{writeln!(f,"  SrcBlend: {:?}", self.SrcBlend)};
    try!{writeln!(f,"  DestBlend: {:?}", self.DestBlend)};
    try!{writeln!(f,"  BlendOp: {:?}", self.BlendOp)};
    try!{writeln!(f,"  SrcBlendAlpha: {:?}", self.SrcBlendAlpha)};
    try!{writeln!(f,"  DestBlendAlpha: {:?}", self.DestBlendAlpha)};
    try!{writeln!(f,"  BlendOpAlpha: {:?}", self.BlendOpAlpha)};
    try!{writeln!(f,"  LogicOp: {:?}", self.LogicOp)};
    try!{writeln!(f,"  RenderTargetWriteMask: {:?}", self.RenderTargetWriteMask)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RENDER_TARGET_VIEW_DESC {
  pub Format : DXGI_FORMAT,
  pub ViewDimension : D3D12_RTV_DIMENSION,
}


impl fmt::Debug for D3D12_RENDER_TARGET_VIEW_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RENDER_TARGET_VIEW_DESC ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ViewDimension: {:?}", self.ViewDimension)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_ALIASING_BARRIER {
  pub pResourceBefore : *mut ID3D12Resource,
  pub pResourceAfter : *mut ID3D12Resource,
}


impl fmt::Debug for D3D12_RESOURCE_ALIASING_BARRIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_ALIASING_BARRIER ")};
    try!{writeln!(f,"  pResourceBefore: {:?}", self.pResourceBefore)};
    try!{writeln!(f,"  pResourceAfter: {:?}", self.pResourceAfter)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_ALLOCATION_INFO {
  pub SizeInBytes : UINT64,
  pub Alignment : UINT64,
}


impl fmt::Debug for D3D12_RESOURCE_ALLOCATION_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_ALLOCATION_INFO ")};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    try!{writeln!(f,"  Alignment: {:?}", self.Alignment)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_BARRIER {
  pub Type : D3D12_RESOURCE_BARRIER_TYPE,
  pub Flags : D3D12_RESOURCE_BARRIER_FLAGS,
}


impl fmt::Debug for D3D12_RESOURCE_BARRIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_BARRIER ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_DESC {
  pub Dimension : D3D12_RESOURCE_DIMENSION,
  pub Alignment : UINT64,
  pub Width : UINT64,
  pub Height : UINT,
  pub DepthOrArraySize : UINT16,
  pub MipLevels : UINT16,
  pub Format : DXGI_FORMAT,
  pub SampleDesc : DXGI_SAMPLE_DESC,
  pub Layout : D3D12_TEXTURE_LAYOUT,
  pub Flags : D3D12_RESOURCE_FLAGS,
}


impl fmt::Debug for D3D12_RESOURCE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_DESC ")};
    try!{writeln!(f,"  Dimension: {:?}", self.Dimension)};
    try!{writeln!(f,"  Alignment: {:?}", self.Alignment)};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  DepthOrArraySize: {:?}", self.DepthOrArraySize)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  SampleDesc: {:?}", self.SampleDesc)};
    try!{writeln!(f,"  Layout: {:?}", self.Layout)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_TRANSITION_BARRIER {
  pub pResource : *mut ID3D12Resource,
  pub Subresource : UINT,
  pub StateBefore : D3D12_RESOURCE_STATES,
  pub StateAfter : D3D12_RESOURCE_STATES,
}


impl fmt::Debug for D3D12_RESOURCE_TRANSITION_BARRIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_TRANSITION_BARRIER ")};
    try!{writeln!(f,"  pResource: {:?}", self.pResource)};
    try!{writeln!(f,"  Subresource: {:?}", self.Subresource)};
    try!{writeln!(f,"  StateBefore: {:?}", self.StateBefore)};
    try!{writeln!(f,"  StateAfter: {:?}", self.StateAfter)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_RESOURCE_UAV_BARRIER {
  pub pResource : *mut ID3D12Resource,
}


impl fmt::Debug for D3D12_RESOURCE_UAV_BARRIER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_RESOURCE_UAV_BARRIER ")};
    try!{writeln!(f,"  pResource: {:?}", self.pResource)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_ROOT_CONSTANTS {
  pub ShaderRegister : UINT,
  pub RegisterSpace : UINT,
  pub Num32BitValues : UINT,
}


impl fmt::Debug for D3D12_ROOT_CONSTANTS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_ROOT_CONSTANTS ")};
    try!{writeln!(f,"  ShaderRegister: {:?}", self.ShaderRegister)};
    try!{writeln!(f,"  RegisterSpace: {:?}", self.RegisterSpace)};
    try!{writeln!(f,"  Num32BitValues: {:?}", self.Num32BitValues)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_ROOT_DESCRIPTOR {
  pub ShaderRegister : UINT,
  pub RegisterSpace : UINT,
}


impl fmt::Debug for D3D12_ROOT_DESCRIPTOR {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_ROOT_DESCRIPTOR ")};
    try!{writeln!(f,"  ShaderRegister: {:?}", self.ShaderRegister)};
    try!{writeln!(f,"  RegisterSpace: {:?}", self.RegisterSpace)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_ROOT_DESCRIPTOR_TABLE {
  pub NumDescriptorRanges : UINT,
  pub pDescriptorRanges : *const D3D12_DESCRIPTOR_RANGE,
}


impl fmt::Debug for D3D12_ROOT_DESCRIPTOR_TABLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_ROOT_DESCRIPTOR_TABLE ")};
    try!{writeln!(f,"  NumDescriptorRanges: {:?}", self.NumDescriptorRanges)};
    try!{writeln!(f,"  pDescriptorRanges: {:?}", self.pDescriptorRanges)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_ROOT_PARAMETER {
  pub ParameterType : D3D12_ROOT_PARAMETER_TYPE,
  pub ShaderVisibility : D3D12_SHADER_VISIBILITY,
}


impl fmt::Debug for D3D12_ROOT_PARAMETER {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_ROOT_PARAMETER ")};
    try!{writeln!(f,"  ParameterType: {:?}", self.ParameterType)};
    try!{writeln!(f,"  ShaderVisibility: {:?}", self.ShaderVisibility)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_ROOT_SIGNATURE_DESC {
  pub NumParameters : UINT,
  pub pParameters : *const D3D12_ROOT_PARAMETER,
  pub NumStaticSamplers : UINT,
  pub pStaticSamplers : *const D3D12_STATIC_SAMPLER_DESC,
  pub Flags : D3D12_ROOT_SIGNATURE_FLAGS,
}


impl fmt::Debug for D3D12_ROOT_SIGNATURE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_ROOT_SIGNATURE_DESC ")};
    try!{writeln!(f,"  NumParameters: {:?}", self.NumParameters)};
    try!{writeln!(f,"  pParameters: {:?}", self.pParameters)};
    try!{writeln!(f,"  NumStaticSamplers: {:?}", self.NumStaticSamplers)};
    try!{writeln!(f,"  pStaticSamplers: {:?}", self.pStaticSamplers)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SAMPLER_DESC {
  pub Filter : D3D12_FILTER,
  pub AddressU : D3D12_TEXTURE_ADDRESS_MODE,
  pub AddressV : D3D12_TEXTURE_ADDRESS_MODE,
  pub AddressW : D3D12_TEXTURE_ADDRESS_MODE,
  pub MipLODBias : FLOAT,
  pub MaxAnisotropy : UINT,
  pub ComparisonFunc : D3D12_COMPARISON_FUNC,
  pub BorderColor : [FLOAT;4],
  pub MinLOD : FLOAT,
  pub MaxLOD : FLOAT,
}


impl fmt::Debug for D3D12_SAMPLER_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SAMPLER_DESC ")};
    try!{writeln!(f,"  Filter: {:?}", self.Filter)};
    try!{writeln!(f,"  AddressU: {:?}", self.AddressU)};
    try!{writeln!(f,"  AddressV: {:?}", self.AddressV)};
    try!{writeln!(f,"  AddressW: {:?}", self.AddressW)};
    try!{writeln!(f,"  MipLODBias: {:?}", self.MipLODBias)};
    try!{writeln!(f,"  MaxAnisotropy: {:?}", self.MaxAnisotropy)};
    try!{writeln!(f,"  ComparisonFunc: {:?}", self.ComparisonFunc)};
    try!{write!(f,"  BorderColor: [")};
    for i in (0..4) {try!{write!(f,"{:?}; ", self.BorderColor[i])};}
    try!{writeln!(f,"]")};
    try!{writeln!(f,"  MinLOD: {:?}", self.MinLOD)};
    try!{writeln!(f,"  MaxLOD: {:?}", self.MaxLOD)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SHADER_BYTECODE {
  pub pShaderBytecode : *const c_void,
  pub BytecodeLength : SIZE_T,
}


impl fmt::Debug for D3D12_SHADER_BYTECODE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SHADER_BYTECODE ")};
    try!{writeln!(f,"  pShaderBytecode: {:?}", self.pShaderBytecode)};
    try!{writeln!(f,"  BytecodeLength: {:?}", self.BytecodeLength)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SHADER_RESOURCE_VIEW_DESC {
  pub Format : DXGI_FORMAT,
  pub ViewDimension : D3D12_SRV_DIMENSION,
  pub Shader4ComponentMapping : UINT,
}


impl fmt::Debug for D3D12_SHADER_RESOURCE_VIEW_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SHADER_RESOURCE_VIEW_DESC ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ViewDimension: {:?}", self.ViewDimension)};
    try!{writeln!(f,"  Shader4ComponentMapping: {:?}", self.Shader4ComponentMapping)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SO_DECLARATION_ENTRY {
  pub Stream : UINT,
  pub SemanticName : LPCSTR,
  pub SemanticIndex : UINT,
  pub StartComponent : BYTE,
  pub ComponentCount : BYTE,
  pub OutputSlot : BYTE,
}


impl fmt::Debug for D3D12_SO_DECLARATION_ENTRY {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SO_DECLARATION_ENTRY ")};
    try!{writeln!(f,"  Stream: {:?}", self.Stream)};
    try!{writeln!(f,"  SemanticName: {:?}", self.SemanticName)};
    try!{writeln!(f,"  SemanticIndex: {:?}", self.SemanticIndex)};
    try!{writeln!(f,"  StartComponent: {:?}", self.StartComponent)};
    try!{writeln!(f,"  ComponentCount: {:?}", self.ComponentCount)};
    try!{writeln!(f,"  OutputSlot: {:?}", self.OutputSlot)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_STATIC_SAMPLER_DESC {
  pub Filter : D3D12_FILTER,
  pub AddressU : D3D12_TEXTURE_ADDRESS_MODE,
  pub AddressV : D3D12_TEXTURE_ADDRESS_MODE,
  pub AddressW : D3D12_TEXTURE_ADDRESS_MODE,
  pub MipLODBias : FLOAT,
  pub MaxAnisotropy : UINT,
  pub ComparisonFunc : D3D12_COMPARISON_FUNC,
  pub BorderColor : D3D12_STATIC_BORDER_COLOR,
  pub MinLOD : FLOAT,
  pub MaxLOD : FLOAT,
  pub ShaderRegister : UINT,
  pub RegisterSpace : UINT,
  pub ShaderVisibility : D3D12_SHADER_VISIBILITY,
}


impl fmt::Debug for D3D12_STATIC_SAMPLER_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_STATIC_SAMPLER_DESC ")};
    try!{writeln!(f,"  Filter: {:?}", self.Filter)};
    try!{writeln!(f,"  AddressU: {:?}", self.AddressU)};
    try!{writeln!(f,"  AddressV: {:?}", self.AddressV)};
    try!{writeln!(f,"  AddressW: {:?}", self.AddressW)};
    try!{writeln!(f,"  MipLODBias: {:?}", self.MipLODBias)};
    try!{writeln!(f,"  MaxAnisotropy: {:?}", self.MaxAnisotropy)};
    try!{writeln!(f,"  ComparisonFunc: {:?}", self.ComparisonFunc)};
    try!{writeln!(f,"  BorderColor: {:?}", self.BorderColor)};
    try!{writeln!(f,"  MinLOD: {:?}", self.MinLOD)};
    try!{writeln!(f,"  MaxLOD: {:?}", self.MaxLOD)};
    try!{writeln!(f,"  ShaderRegister: {:?}", self.ShaderRegister)};
    try!{writeln!(f,"  RegisterSpace: {:?}", self.RegisterSpace)};
    try!{writeln!(f,"  ShaderVisibility: {:?}", self.ShaderVisibility)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_STREAM_OUTPUT_BUFFER_VIEW {
  pub BufferLocation : D3D12_GPU_VIRTUAL_ADDRESS,
  pub SizeInBytes : UINT64,
  pub BufferFilledSizeLocation : D3D12_GPU_VIRTUAL_ADDRESS,
}


impl fmt::Debug for D3D12_STREAM_OUTPUT_BUFFER_VIEW {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_STREAM_OUTPUT_BUFFER_VIEW ")};
    try!{writeln!(f,"  BufferLocation: {:?}", self.BufferLocation)};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    try!{writeln!(f,"  BufferFilledSizeLocation: {:?}", self.BufferFilledSizeLocation)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_STREAM_OUTPUT_DESC {
  pub pSODeclaration : *const D3D12_SO_DECLARATION_ENTRY,
  pub NumEntries : UINT,
  pub pBufferStrides : *const UINT,
  pub NumStrides : UINT,
  pub RasterizedStream : UINT,
}


impl fmt::Debug for D3D12_STREAM_OUTPUT_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_STREAM_OUTPUT_DESC ")};
    try!{writeln!(f,"  pSODeclaration: {:?}", self.pSODeclaration)};
    try!{writeln!(f,"  NumEntries: {:?}", self.NumEntries)};
    try!{writeln!(f,"  pBufferStrides: {:?}", self.pBufferStrides)};
    try!{writeln!(f,"  NumStrides: {:?}", self.NumStrides)};
    try!{writeln!(f,"  RasterizedStream: {:?}", self.RasterizedStream)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SUBRESOURCE_DATA {
  pub pData : *const c_void,
  pub RowPitch : LONG_PTR,
  pub SlicePitch : LONG_PTR,
}


impl fmt::Debug for D3D12_SUBRESOURCE_DATA {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SUBRESOURCE_DATA ")};
    try!{writeln!(f,"  pData: {:?}", self.pData)};
    try!{writeln!(f,"  RowPitch: {:?}", self.RowPitch)};
    try!{writeln!(f,"  SlicePitch: {:?}", self.SlicePitch)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SUBRESOURCE_FOOTPRINT {
  pub Format : DXGI_FORMAT,
  pub Width : UINT,
  pub Height : UINT,
  pub Depth : UINT,
  pub RowPitch : UINT,
}


impl fmt::Debug for D3D12_SUBRESOURCE_FOOTPRINT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SUBRESOURCE_FOOTPRINT ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  Depth: {:?}", self.Depth)};
    try!{writeln!(f,"  RowPitch: {:?}", self.RowPitch)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SUBRESOURCE_INFO {
  pub Offset : UINT64,
  pub RowPitch : UINT,
  pub DepthPitch : UINT,
}


impl fmt::Debug for D3D12_SUBRESOURCE_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SUBRESOURCE_INFO ")};
    try!{writeln!(f,"  Offset: {:?}", self.Offset)};
    try!{writeln!(f,"  RowPitch: {:?}", self.RowPitch)};
    try!{writeln!(f,"  DepthPitch: {:?}", self.DepthPitch)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_SUBRESOURCE_TILING {
  pub WidthInTiles : UINT,
  pub HeightInTiles : UINT16,
  pub DepthInTiles : UINT16,
  pub StartTileIndexInOverallResource : UINT,
}


impl fmt::Debug for D3D12_SUBRESOURCE_TILING {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_SUBRESOURCE_TILING ")};
    try!{writeln!(f,"  WidthInTiles: {:?}", self.WidthInTiles)};
    try!{writeln!(f,"  HeightInTiles: {:?}", self.HeightInTiles)};
    try!{writeln!(f,"  DepthInTiles: {:?}", self.DepthInTiles)};
    try!{writeln!(f,"  StartTileIndexInOverallResource: {:?}", self.StartTileIndexInOverallResource)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_ARRAY_DSV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX1D_ARRAY_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_ARRAY_DSV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_ARRAY_RTV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX1D_ARRAY_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_ARRAY_RTV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_ARRAY_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEX1D_ARRAY_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_ARRAY_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_ARRAY_UAV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX1D_ARRAY_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_ARRAY_UAV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_DSV {
  pub MipSlice : UINT,
}


impl fmt::Debug for D3D12_TEX1D_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_DSV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_RTV {
  pub MipSlice : UINT,
}


impl fmt::Debug for D3D12_TEX1D_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_RTV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEX1D_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX1D_UAV {
  pub MipSlice : UINT,
}


impl fmt::Debug for D3D12_TEX1D_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX1D_UAV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_ARRAY_DSV {
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_ARRAY_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_ARRAY_DSV ")};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_ARRAY_RTV {
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_ARRAY_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_ARRAY_RTV ")};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_ARRAY_SRV {
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_ARRAY_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_ARRAY_SRV ")};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_DSV {
  pub UnusedField_NothingToDefine : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_DSV ")};
    try!{writeln!(f,"  UnusedField_NothingToDefine: {:?}", self.UnusedField_NothingToDefine)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_RTV {
  pub UnusedField_NothingToDefine : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_RTV ")};
    try!{writeln!(f,"  UnusedField_NothingToDefine: {:?}", self.UnusedField_NothingToDefine)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2DMS_SRV {
  pub UnusedField_NothingToDefine : UINT,
}


impl fmt::Debug for D3D12_TEX2DMS_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2DMS_SRV ")};
    try!{writeln!(f,"  UnusedField_NothingToDefine: {:?}", self.UnusedField_NothingToDefine)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_ARRAY_DSV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
}


impl fmt::Debug for D3D12_TEX2D_ARRAY_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_ARRAY_DSV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_ARRAY_RTV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
  pub PlaneSlice : UINT,
}


impl fmt::Debug for D3D12_TEX2D_ARRAY_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_ARRAY_RTV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_ARRAY_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
  pub PlaneSlice : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEX2D_ARRAY_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_ARRAY_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_ARRAY_UAV {
  pub MipSlice : UINT,
  pub FirstArraySlice : UINT,
  pub ArraySize : UINT,
  pub PlaneSlice : UINT,
}


impl fmt::Debug for D3D12_TEX2D_ARRAY_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_ARRAY_UAV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstArraySlice: {:?}", self.FirstArraySlice)};
    try!{writeln!(f,"  ArraySize: {:?}", self.ArraySize)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_DSV {
  pub MipSlice : UINT,
}


impl fmt::Debug for D3D12_TEX2D_DSV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_DSV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_RTV {
  pub MipSlice : UINT,
  pub PlaneSlice : UINT,
}


impl fmt::Debug for D3D12_TEX2D_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_RTV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub PlaneSlice : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEX2D_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX2D_UAV {
  pub MipSlice : UINT,
  pub PlaneSlice : UINT,
}


impl fmt::Debug for D3D12_TEX2D_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX2D_UAV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  PlaneSlice: {:?}", self.PlaneSlice)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX3D_RTV {
  pub MipSlice : UINT,
  pub FirstWSlice : UINT,
  pub WSize : UINT,
}


impl fmt::Debug for D3D12_TEX3D_RTV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX3D_RTV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstWSlice: {:?}", self.FirstWSlice)};
    try!{writeln!(f,"  WSize: {:?}", self.WSize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX3D_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEX3D_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX3D_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEX3D_UAV {
  pub MipSlice : UINT,
  pub FirstWSlice : UINT,
  pub WSize : UINT,
}


impl fmt::Debug for D3D12_TEX3D_UAV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEX3D_UAV ")};
    try!{writeln!(f,"  MipSlice: {:?}", self.MipSlice)};
    try!{writeln!(f,"  FirstWSlice: {:?}", self.FirstWSlice)};
    try!{writeln!(f,"  WSize: {:?}", self.WSize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEXCUBE_ARRAY_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub First2DArrayFace : UINT,
  pub NumCubes : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEXCUBE_ARRAY_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEXCUBE_ARRAY_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  First2DArrayFace: {:?}", self.First2DArrayFace)};
    try!{writeln!(f,"  NumCubes: {:?}", self.NumCubes)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEXCUBE_SRV {
  pub MostDetailedMip : UINT,
  pub MipLevels : UINT,
  pub ResourceMinLODClamp : FLOAT,
}


impl fmt::Debug for D3D12_TEXCUBE_SRV {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEXCUBE_SRV ")};
    try!{writeln!(f,"  MostDetailedMip: {:?}", self.MostDetailedMip)};
    try!{writeln!(f,"  MipLevels: {:?}", self.MipLevels)};
    try!{writeln!(f,"  ResourceMinLODClamp: {:?}", self.ResourceMinLODClamp)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TEXTURE_COPY_LOCATION {
  pub pResource : *mut ID3D12Resource,
  pub Type : D3D12_TEXTURE_COPY_TYPE,
}


impl fmt::Debug for D3D12_TEXTURE_COPY_LOCATION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TEXTURE_COPY_LOCATION ")};
    try!{writeln!(f,"  pResource: {:?}", self.pResource)};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TILED_RESOURCE_COORDINATE {
  pub X : UINT,
  pub Y : UINT,
  pub Z : UINT,
  pub Subresource : UINT,
}


impl fmt::Debug for D3D12_TILED_RESOURCE_COORDINATE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TILED_RESOURCE_COORDINATE ")};
    try!{writeln!(f,"  X: {:?}", self.X)};
    try!{writeln!(f,"  Y: {:?}", self.Y)};
    try!{writeln!(f,"  Z: {:?}", self.Z)};
    try!{writeln!(f,"  Subresource: {:?}", self.Subresource)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TILE_REGION_SIZE {
  pub NumTiles : UINT,
  pub UseBox : BOOL,
  pub Width : UINT,
  pub Height : UINT16,
  pub Depth : UINT16,
}


impl fmt::Debug for D3D12_TILE_REGION_SIZE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TILE_REGION_SIZE ")};
    try!{writeln!(f,"  NumTiles: {:?}", self.NumTiles)};
    try!{writeln!(f,"  UseBox: {:?}", self.UseBox)};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  Depth: {:?}", self.Depth)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_TILE_SHAPE {
  pub WidthInTexels : UINT,
  pub HeightInTexels : UINT,
  pub DepthInTexels : UINT,
}


impl fmt::Debug for D3D12_TILE_SHAPE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_TILE_SHAPE ")};
    try!{writeln!(f,"  WidthInTexels: {:?}", self.WidthInTexels)};
    try!{writeln!(f,"  HeightInTexels: {:?}", self.HeightInTexels)};
    try!{writeln!(f,"  DepthInTexels: {:?}", self.DepthInTexels)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
  pub Format : DXGI_FORMAT,
  pub ViewDimension : D3D12_UAV_DIMENSION,
}


impl fmt::Debug for D3D12_UNORDERED_ACCESS_VIEW_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_UNORDERED_ACCESS_VIEW_DESC ")};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ViewDimension: {:?}", self.ViewDimension)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_VERTEX_BUFFER_VIEW {
  pub BufferLocation : D3D12_GPU_VIRTUAL_ADDRESS,
  pub SizeInBytes : UINT,
  pub StrideInBytes : UINT,
}


impl fmt::Debug for D3D12_VERTEX_BUFFER_VIEW {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_VERTEX_BUFFER_VIEW ")};
    try!{writeln!(f,"  BufferLocation: {:?}", self.BufferLocation)};
    try!{writeln!(f,"  SizeInBytes: {:?}", self.SizeInBytes)};
    try!{writeln!(f,"  StrideInBytes: {:?}", self.StrideInBytes)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D12_VIEWPORT {
  pub TopLeftX : FLOAT,
  pub TopLeftY : FLOAT,
  pub Width : FLOAT,
  pub Height : FLOAT,
  pub MinDepth : FLOAT,
  pub MaxDepth : FLOAT,
}


impl fmt::Debug for D3D12_VIEWPORT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D12_VIEWPORT ")};
    try!{writeln!(f,"  TopLeftX: {:?}", self.TopLeftX)};
    try!{writeln!(f,"  TopLeftY: {:?}", self.TopLeftY)};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  MinDepth: {:?}", self.MinDepth)};
    try!{writeln!(f,"  MaxDepth: {:?}", self.MaxDepth)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3DCOLORVALUE {
  pub r : f32,
  pub g : f32,
  pub b : f32,
  pub a : f32,
}


impl fmt::Debug for D3DCOLORVALUE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3DCOLORVALUE ")};
    try!{writeln!(f,"  r: {:?}", self.r)};
    try!{writeln!(f,"  g: {:?}", self.g)};
    try!{writeln!(f,"  b: {:?}", self.b)};
    try!{writeln!(f,"  a: {:?}", self.a)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct D3D_SHADER_MACRO {
  pub Name : LPCSTR,
  pub Definition : LPCSTR,
}


impl fmt::Debug for D3D_SHADER_MACRO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct D3D_SHADER_MACRO ")};
    try!{writeln!(f,"  Name: {:?}", self.Name)};
    try!{writeln!(f,"  Definition: {:?}", self.Definition)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_ADAPTER_DESC {
  pub Description : [WCHAR;128],
  pub VendorId : UINT,
  pub DeviceId : UINT,
  pub SubSysId : UINT,
  pub Revision : UINT,
  pub DedicatedVideoMemory : SIZE_T,
  pub DedicatedSystemMemory : SIZE_T,
  pub SharedSystemMemory : SIZE_T,
  pub AdapterLuid : LUID,
}


impl fmt::Debug for DXGI_ADAPTER_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_ADAPTER_DESC ")};
    try!{write!(f,"  Description: '")};
    {try!{writeln!(f,"{:}'", wchar_array_to_string_lossy(&self.Description))};}
    try!{writeln!(f,"  VendorId: {:?}", self.VendorId)};
    try!{writeln!(f,"  DeviceId: {:?}", self.DeviceId)};
    try!{writeln!(f,"  SubSysId: {:?}", self.SubSysId)};
    try!{writeln!(f,"  Revision: {:?}", self.Revision)};
    try!{writeln!(f,"  DedicatedVideoMemory: {:?}", self.DedicatedVideoMemory)};
    try!{writeln!(f,"  DedicatedSystemMemory: {:?}", self.DedicatedSystemMemory)};
    try!{writeln!(f,"  SharedSystemMemory: {:?}", self.SharedSystemMemory)};
    try!{writeln!(f,"  AdapterLuid: {:?}", self.AdapterLuid)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_ADAPTER_DESC1 {
  pub Description : [WCHAR;128],
  pub VendorId : UINT,
  pub DeviceId : UINT,
  pub SubSysId : UINT,
  pub Revision : UINT,
  pub DedicatedVideoMemory : SIZE_T,
  pub DedicatedSystemMemory : SIZE_T,
  pub SharedSystemMemory : SIZE_T,
  pub AdapterLuid : LUID,
  pub Flags : UINT,
}


impl fmt::Debug for DXGI_ADAPTER_DESC1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_ADAPTER_DESC1 ")};
    try!{write!(f,"  Description: '")};
    {try!{writeln!(f,"{:}'", wchar_array_to_string_lossy(&self.Description))};}
    try!{writeln!(f,"  VendorId: {:?}", self.VendorId)};
    try!{writeln!(f,"  DeviceId: {:?}", self.DeviceId)};
    try!{writeln!(f,"  SubSysId: {:?}", self.SubSysId)};
    try!{writeln!(f,"  Revision: {:?}", self.Revision)};
    try!{writeln!(f,"  DedicatedVideoMemory: {:?}", self.DedicatedVideoMemory)};
    try!{writeln!(f,"  DedicatedSystemMemory: {:?}", self.DedicatedSystemMemory)};
    try!{writeln!(f,"  SharedSystemMemory: {:?}", self.SharedSystemMemory)};
    try!{writeln!(f,"  AdapterLuid: {:?}", self.AdapterLuid)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_ADAPTER_DESC2 {
  pub Description : [WCHAR;128],
  pub VendorId : UINT,
  pub DeviceId : UINT,
  pub SubSysId : UINT,
  pub Revision : UINT,
  pub DedicatedVideoMemory : SIZE_T,
  pub DedicatedSystemMemory : SIZE_T,
  pub SharedSystemMemory : SIZE_T,
  pub AdapterLuid : LUID,
  pub Flags : UINT,
  pub GraphicsPreemptionGranularity : DXGI_GRAPHICS_PREEMPTION_GRANULARITY,
  pub ComputePreemptionGranularity : DXGI_COMPUTE_PREEMPTION_GRANULARITY,
}


impl fmt::Debug for DXGI_ADAPTER_DESC2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_ADAPTER_DESC2 ")};
    try!{write!(f,"  Description: '")};
    {try!{writeln!(f,"{:}'", wchar_array_to_string_lossy(&self.Description))};}
    try!{writeln!(f,"  VendorId: {:?}", self.VendorId)};
    try!{writeln!(f,"  DeviceId: {:?}", self.DeviceId)};
    try!{writeln!(f,"  SubSysId: {:?}", self.SubSysId)};
    try!{writeln!(f,"  Revision: {:?}", self.Revision)};
    try!{writeln!(f,"  DedicatedVideoMemory: {:?}", self.DedicatedVideoMemory)};
    try!{writeln!(f,"  DedicatedSystemMemory: {:?}", self.DedicatedSystemMemory)};
    try!{writeln!(f,"  SharedSystemMemory: {:?}", self.SharedSystemMemory)};
    try!{writeln!(f,"  AdapterLuid: {:?}", self.AdapterLuid)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    try!{writeln!(f,"  GraphicsPreemptionGranularity: {:?}", self.GraphicsPreemptionGranularity)};
    try!{writeln!(f,"  ComputePreemptionGranularity: {:?}", self.ComputePreemptionGranularity)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_DECODE_SWAP_CHAIN_DESC {
  pub Flags : UINT,
}


impl fmt::Debug for DXGI_DECODE_SWAP_CHAIN_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_DECODE_SWAP_CHAIN_DESC ")};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_DISPLAY_COLOR_SPACE {
  pub PrimaryCoordinates : [[FLOAT;2];8],
  pub WhitePoints : [[FLOAT;2];16],
}


impl fmt::Debug for DXGI_DISPLAY_COLOR_SPACE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_DISPLAY_COLOR_SPACE ")};
    try!{write!(f,"  PrimaryCoordinates: [")};
    for i in (0..8) {try!{write!(f,"{:?}; ", self.PrimaryCoordinates[i])};}
    try!{writeln!(f,"]")};
    try!{write!(f,"  WhitePoints: [")};
    for i in (0..16) {try!{write!(f,"{:?}; ", self.WhitePoints[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_FRAME_STATISTICS {
  pub PresentCount : UINT,
  pub PresentRefreshCount : UINT,
  pub SyncRefreshCount : UINT,
  pub SyncQPCTime : LARGE_INTEGER,
  pub SyncGPUTime : LARGE_INTEGER,
}


impl fmt::Debug for DXGI_FRAME_STATISTICS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_FRAME_STATISTICS ")};
    try!{writeln!(f,"  PresentCount: {:?}", self.PresentCount)};
    try!{writeln!(f,"  PresentRefreshCount: {:?}", self.PresentRefreshCount)};
    try!{writeln!(f,"  SyncRefreshCount: {:?}", self.SyncRefreshCount)};
    try!{writeln!(f,"  SyncQPCTime: {:?}", self.SyncQPCTime)};
    try!{writeln!(f,"  SyncGPUTime: {:?}", self.SyncGPUTime)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_FRAME_STATISTICS_MEDIA {
  pub PresentCount : UINT,
  pub PresentRefreshCount : UINT,
  pub SyncRefreshCount : UINT,
  pub SyncQPCTime : LARGE_INTEGER,
  pub SyncGPUTime : LARGE_INTEGER,
  pub CompositionMode : DXGI_FRAME_PRESENTATION_MODE,
  pub ApprovedPresentDuration : UINT,
}


impl fmt::Debug for DXGI_FRAME_STATISTICS_MEDIA {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_FRAME_STATISTICS_MEDIA ")};
    try!{writeln!(f,"  PresentCount: {:?}", self.PresentCount)};
    try!{writeln!(f,"  PresentRefreshCount: {:?}", self.PresentRefreshCount)};
    try!{writeln!(f,"  SyncRefreshCount: {:?}", self.SyncRefreshCount)};
    try!{writeln!(f,"  SyncQPCTime: {:?}", self.SyncQPCTime)};
    try!{writeln!(f,"  SyncGPUTime: {:?}", self.SyncGPUTime)};
    try!{writeln!(f,"  CompositionMode: {:?}", self.CompositionMode)};
    try!{writeln!(f,"  ApprovedPresentDuration: {:?}", self.ApprovedPresentDuration)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_GAMMA_CONTROL {
  pub Scale : DXGI_RGB,
  pub Offset : DXGI_RGB,
  pub GammaCurve : [DXGI_RGB;1025],
}


impl fmt::Debug for DXGI_GAMMA_CONTROL {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_GAMMA_CONTROL ")};
    try!{writeln!(f,"  Scale: {:?}", self.Scale)};
    try!{writeln!(f,"  Offset: {:?}", self.Offset)};
    try!{write!(f,"  GammaCurve: [")};
    for i in (0..1025) {try!{write!(f,"{:?}; ", self.GammaCurve[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_GAMMA_CONTROL_CAPABILITIES {
  pub ScaleAndOffsetSupported : BOOL,
  pub MaxConvertedValue : f32,
  pub MinConvertedValue : f32,
  pub NumGammaControlPoints : UINT,
  pub ControlPointPositions : [f32;1025],
}


impl fmt::Debug for DXGI_GAMMA_CONTROL_CAPABILITIES {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_GAMMA_CONTROL_CAPABILITIES ")};
    try!{writeln!(f,"  ScaleAndOffsetSupported: {:?}", self.ScaleAndOffsetSupported)};
    try!{writeln!(f,"  MaxConvertedValue: {:?}", self.MaxConvertedValue)};
    try!{writeln!(f,"  MinConvertedValue: {:?}", self.MinConvertedValue)};
    try!{writeln!(f,"  NumGammaControlPoints: {:?}", self.NumGammaControlPoints)};
    try!{write!(f,"  ControlPointPositions: [")};
    for i in (0..1025) {try!{write!(f,"{:?}; ", self.ControlPointPositions[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_JPEG_AC_HUFFMAN_TABLE {
  pub CodeCounts : [BYTE;16],
  pub CodeValues : [BYTE;162],
}


impl fmt::Debug for DXGI_JPEG_AC_HUFFMAN_TABLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_JPEG_AC_HUFFMAN_TABLE ")};
    try!{write!(f,"  CodeCounts: [")};
    for i in (0..16) {try!{write!(f,"{:?}; ", self.CodeCounts[i])};}
    try!{writeln!(f,"]")};
    try!{write!(f,"  CodeValues: [")};
    for i in (0..162) {try!{write!(f,"{:?}; ", self.CodeValues[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_JPEG_DC_HUFFMAN_TABLE {
  pub CodeCounts : [BYTE;12],
  pub CodeValues : [BYTE;12],
}


impl fmt::Debug for DXGI_JPEG_DC_HUFFMAN_TABLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_JPEG_DC_HUFFMAN_TABLE ")};
    try!{write!(f,"  CodeCounts: [")};
    for i in (0..12) {try!{write!(f,"{:?}; ", self.CodeCounts[i])};}
    try!{writeln!(f,"]")};
    try!{write!(f,"  CodeValues: [")};
    for i in (0..12) {try!{write!(f,"{:?}; ", self.CodeValues[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_JPEG_QUANTIZATION_TABLE {
  pub Elements : [BYTE;64],
}


impl fmt::Debug for DXGI_JPEG_QUANTIZATION_TABLE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_JPEG_QUANTIZATION_TABLE ")};
    try!{write!(f,"  Elements: [")};
    for i in (0..64) {try!{write!(f,"{:?}; ", self.Elements[i])};}
    try!{writeln!(f,"]")};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_MAPPED_RECT {
  pub Pitch : INT,
  pub pBits : *mut BYTE,
}


impl fmt::Debug for DXGI_MAPPED_RECT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_MAPPED_RECT ")};
    try!{writeln!(f,"  Pitch: {:?}", self.Pitch)};
    try!{writeln!(f,"  pBits: {:?}", self.pBits)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_MATRIX_3X2_F {
  pub _11 : FLOAT,
  pub _12 : FLOAT,
  pub _21 : FLOAT,
  pub _22 : FLOAT,
  pub _31 : FLOAT,
  pub _32 : FLOAT,
}


impl fmt::Debug for DXGI_MATRIX_3X2_F {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_MATRIX_3X2_F ")};
    try!{writeln!(f,"  _11: {:?}", self._11)};
    try!{writeln!(f,"  _12: {:?}", self._12)};
    try!{writeln!(f,"  _21: {:?}", self._21)};
    try!{writeln!(f,"  _22: {:?}", self._22)};
    try!{writeln!(f,"  _31: {:?}", self._31)};
    try!{writeln!(f,"  _32: {:?}", self._32)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
#[derive(Clone,Copy)]
pub struct DXGI_MODE_DESC {
  pub Width : UINT,
  pub Height : UINT,
  pub RefreshRate : DXGI_RATIONAL,
  pub Format : DXGI_FORMAT,
  pub ScanlineOrdering : DXGI_MODE_SCANLINE_ORDER,
  pub Scaling : DXGI_MODE_SCALING,
}


impl fmt::Debug for DXGI_MODE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_MODE_DESC ")};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  RefreshRate: {:?}", self.RefreshRate)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ScanlineOrdering: {:?}", self.ScanlineOrdering)};
    try!{writeln!(f,"  Scaling: {:?}", self.Scaling)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_MODE_DESC1 {
  pub Width : UINT,
  pub Height : UINT,
  pub RefreshRate : DXGI_RATIONAL,
  pub Format : DXGI_FORMAT,
  pub ScanlineOrdering : DXGI_MODE_SCANLINE_ORDER,
  pub Scaling : DXGI_MODE_SCALING,
  pub Stereo : BOOL,
}


impl fmt::Debug for DXGI_MODE_DESC1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_MODE_DESC1 ")};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  RefreshRate: {:?}", self.RefreshRate)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  ScanlineOrdering: {:?}", self.ScanlineOrdering)};
    try!{writeln!(f,"  Scaling: {:?}", self.Scaling)};
    try!{writeln!(f,"  Stereo: {:?}", self.Stereo)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTDUPL_DESC {
  pub ModeDesc : DXGI_MODE_DESC,
  pub Rotation : DXGI_MODE_ROTATION,
  pub DesktopImageInSystemMemory : BOOL,
}


impl fmt::Debug for DXGI_OUTDUPL_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTDUPL_DESC ")};
    try!{writeln!(f,"  ModeDesc: {:?}", self.ModeDesc)};
    try!{writeln!(f,"  Rotation: {:?}", self.Rotation)};
    try!{writeln!(f,"  DesktopImageInSystemMemory: {:?}", self.DesktopImageInSystemMemory)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTDUPL_FRAME_INFO {
  pub LastPresentTime : LARGE_INTEGER,
  pub LastMouseUpdateTime : LARGE_INTEGER,
  pub AccumulatedFrames : UINT,
  pub RectsCoalesced : BOOL,
  pub ProtectedContentMaskedOut : BOOL,
  pub PointerPosition : DXGI_OUTDUPL_POINTER_POSITION,
  pub TotalMetadataBufferSize : UINT,
  pub PointerShapeBufferSize : UINT,
}


impl fmt::Debug for DXGI_OUTDUPL_FRAME_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTDUPL_FRAME_INFO ")};
    try!{writeln!(f,"  LastPresentTime: {:?}", self.LastPresentTime)};
    try!{writeln!(f,"  LastMouseUpdateTime: {:?}", self.LastMouseUpdateTime)};
    try!{writeln!(f,"  AccumulatedFrames: {:?}", self.AccumulatedFrames)};
    try!{writeln!(f,"  RectsCoalesced: {:?}", self.RectsCoalesced)};
    try!{writeln!(f,"  ProtectedContentMaskedOut: {:?}", self.ProtectedContentMaskedOut)};
    try!{writeln!(f,"  PointerPosition: {:?}", self.PointerPosition)};
    try!{writeln!(f,"  TotalMetadataBufferSize: {:?}", self.TotalMetadataBufferSize)};
    try!{writeln!(f,"  PointerShapeBufferSize: {:?}", self.PointerShapeBufferSize)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTDUPL_MOVE_RECT {
  pub SourcePoint : i32,
  pub DestinationRect : RECT,
}


impl fmt::Debug for DXGI_OUTDUPL_MOVE_RECT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTDUPL_MOVE_RECT ")};
    try!{writeln!(f,"  SourcePoint: {:?}", self.SourcePoint)};
    try!{writeln!(f,"  DestinationRect: {:?}", self.DestinationRect)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTDUPL_POINTER_POSITION {
  pub Position : i32,
  pub Visible : BOOL,
}


impl fmt::Debug for DXGI_OUTDUPL_POINTER_POSITION {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTDUPL_POINTER_POSITION ")};
    try!{writeln!(f,"  Position: {:?}", self.Position)};
    try!{writeln!(f,"  Visible: {:?}", self.Visible)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTDUPL_POINTER_SHAPE_INFO {
  pub Type : UINT,
  pub Width : UINT,
  pub Height : UINT,
  pub Pitch : UINT,
  pub HotSpot : i32,
}


impl fmt::Debug for DXGI_OUTDUPL_POINTER_SHAPE_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTDUPL_POINTER_SHAPE_INFO ")};
    try!{writeln!(f,"  Type: {:?}", self.Type)};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  Pitch: {:?}", self.Pitch)};
    try!{writeln!(f,"  HotSpot: {:?}", self.HotSpot)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_OUTPUT_DESC {
  pub DeviceName : [WCHAR;32],
  pub DesktopCoordinates : RECT,
  pub AttachedToDesktop : BOOL,
  pub Rotation : DXGI_MODE_ROTATION,
  pub Monitor : HMONITOR,
}


impl fmt::Debug for DXGI_OUTPUT_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_OUTPUT_DESC ")};
    try!{write!(f,"  DeviceName: '")};
    {try!{writeln!(f,"{:}'", wchar_array_to_string_lossy(&self.DeviceName))};}
    try!{writeln!(f,"  DesktopCoordinates: {:?}", self.DesktopCoordinates)};
    try!{writeln!(f,"  AttachedToDesktop: {:?}", self.AttachedToDesktop)};
    try!{writeln!(f,"  Rotation: {:?}", self.Rotation)};
    try!{writeln!(f,"  Monitor: {:?}", self.Monitor)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_PRESENT_PARAMETERS {
  pub DirtyRectsCount : UINT,
  pub pDirtyRects : *mut RECT,
  pub pScrollRect : *mut RECT,
  pub pScrollOffset : *mut i32,
}


impl fmt::Debug for DXGI_PRESENT_PARAMETERS {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_PRESENT_PARAMETERS ")};
    try!{writeln!(f,"  DirtyRectsCount: {:?}", self.DirtyRectsCount)};
    try!{writeln!(f,"  pDirtyRects: {:?}", self.pDirtyRects)};
    try!{writeln!(f,"  pScrollRect: {:?}", self.pScrollRect)};
    try!{writeln!(f,"  pScrollOffset: {:?}", self.pScrollOffset)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_QUERY_VIDEO_MEMORY_INFO {
  pub Budget : UINT64,
  pub CurrentUsage : UINT64,
  pub AvailableForReservation : UINT64,
  pub CurrentReservation : UINT64,
}


impl fmt::Debug for DXGI_QUERY_VIDEO_MEMORY_INFO {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_QUERY_VIDEO_MEMORY_INFO ")};
    try!{writeln!(f,"  Budget: {:?}", self.Budget)};
    try!{writeln!(f,"  CurrentUsage: {:?}", self.CurrentUsage)};
    try!{writeln!(f,"  AvailableForReservation: {:?}", self.AvailableForReservation)};
    try!{writeln!(f,"  CurrentReservation: {:?}", self.CurrentReservation)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Default)]
#[derive(Clone,Copy)]
pub struct DXGI_RATIONAL {
  pub Numerator : UINT,
  pub Denominator : UINT,
}


impl fmt::Debug for DXGI_RATIONAL {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_RATIONAL ")};
    try!{writeln!(f,"  Numerator: {:?}", self.Numerator)};
    try!{writeln!(f,"  Denominator: {:?}", self.Denominator)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_RGB {
  pub Red : f32,
  pub Green : f32,
  pub Blue : f32,
}


impl fmt::Debug for DXGI_RGB {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_RGB ")};
    try!{writeln!(f,"  Red: {:?}", self.Red)};
    try!{writeln!(f,"  Green: {:?}", self.Green)};
    try!{writeln!(f,"  Blue: {:?}", self.Blue)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SAMPLE_DESC {
  pub Count : UINT,
  pub Quality : UINT,
}


impl fmt::Debug for DXGI_SAMPLE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SAMPLE_DESC ")};
    try!{writeln!(f,"  Count: {:?}", self.Count)};
    try!{writeln!(f,"  Quality: {:?}", self.Quality)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SHARED_RESOURCE {
  pub Handle : HANDLE,
}


impl fmt::Debug for DXGI_SHARED_RESOURCE {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SHARED_RESOURCE ")};
    try!{writeln!(f,"  Handle: {:?}", self.Handle)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SURFACE_DESC {
  pub Width : UINT,
  pub Height : UINT,
  pub Format : DXGI_FORMAT,
  pub SampleDesc : DXGI_SAMPLE_DESC,
}


impl fmt::Debug for DXGI_SURFACE_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SURFACE_DESC ")};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  SampleDesc: {:?}", self.SampleDesc)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SWAP_CHAIN_DESC {
  pub BufferDesc : DXGI_MODE_DESC,
  pub SampleDesc : DXGI_SAMPLE_DESC,
  pub BufferUsage : DXGI_USAGE,
  pub BufferCount : UINT,
  pub OutputWindow : HWND,
  pub Windowed : BOOL,
  pub SwapEffect : DXGI_SWAP_EFFECT,
  pub Flags : UINT,
}


impl fmt::Debug for DXGI_SWAP_CHAIN_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SWAP_CHAIN_DESC ")};
    try!{writeln!(f,"  BufferDesc: {:?}", self.BufferDesc)};
    try!{writeln!(f,"  SampleDesc: {:?}", self.SampleDesc)};
    try!{writeln!(f,"  BufferUsage: {:?}", self.BufferUsage)};
    try!{writeln!(f,"  BufferCount: {:?}", self.BufferCount)};
    try!{writeln!(f,"  OutputWindow: {:?}", self.OutputWindow)};
    try!{writeln!(f,"  Windowed: {:?}", self.Windowed)};
    try!{writeln!(f,"  SwapEffect: {:?}", self.SwapEffect)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SWAP_CHAIN_DESC1 {
  pub Width : UINT,
  pub Height : UINT,
  pub Format : DXGI_FORMAT,
  pub Stereo : BOOL,
  pub SampleDesc : DXGI_SAMPLE_DESC,
  pub BufferUsage : DXGI_USAGE,
  pub BufferCount : UINT,
  pub Scaling : DXGI_SCALING,
  pub SwapEffect : DXGI_SWAP_EFFECT,
  pub AlphaMode : DXGI_ALPHA_MODE,
  pub Flags : UINT,
}


impl fmt::Debug for DXGI_SWAP_CHAIN_DESC1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SWAP_CHAIN_DESC1 ")};
    try!{writeln!(f,"  Width: {:?}", self.Width)};
    try!{writeln!(f,"  Height: {:?}", self.Height)};
    try!{writeln!(f,"  Format: {:?}", self.Format)};
    try!{writeln!(f,"  Stereo: {:?}", self.Stereo)};
    try!{writeln!(f,"  SampleDesc: {:?}", self.SampleDesc)};
    try!{writeln!(f,"  BufferUsage: {:?}", self.BufferUsage)};
    try!{writeln!(f,"  BufferCount: {:?}", self.BufferCount)};
    try!{writeln!(f,"  Scaling: {:?}", self.Scaling)};
    try!{writeln!(f,"  SwapEffect: {:?}", self.SwapEffect)};
    try!{writeln!(f,"  AlphaMode: {:?}", self.AlphaMode)};
    try!{writeln!(f,"  Flags: {:?}", self.Flags)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC {
  pub RefreshRate : DXGI_RATIONAL,
  pub ScanlineOrdering : DXGI_MODE_SCANLINE_ORDER,
  pub Scaling : DXGI_MODE_SCALING,
  pub Windowed : BOOL,
}


impl fmt::Debug for DXGI_SWAP_CHAIN_FULLSCREEN_DESC {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC ")};
    try!{writeln!(f,"  RefreshRate: {:?}", self.RefreshRate)};
    try!{writeln!(f,"  ScanlineOrdering: {:?}", self.ScanlineOrdering)};
    try!{writeln!(f,"  Scaling: {:?}", self.Scaling)};
    try!{writeln!(f,"  Windowed: {:?}", self.Windowed)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D10Blob {
  pub lpVtbl : *mut ID3D10BlobVtbl,
}


impl fmt::Debug for ID3D10Blob {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D10Blob ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D10BlobVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D10Blob, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D10Blob) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D10Blob) -> ULONG,
  pub GetBufferPointer : extern "system" fn (This: *mut ID3D10Blob) -> LPVOID,
  pub GetBufferSize : extern "system" fn (This: *mut ID3D10Blob) -> SIZE_T,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandAllocator {
  pub lpVtbl : *mut ID3D12CommandAllocatorVtbl,
}


impl fmt::Debug for ID3D12CommandAllocator {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12CommandAllocator ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandAllocatorVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12CommandAllocator, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12CommandAllocator) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12CommandAllocator) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12CommandAllocator, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12CommandAllocator, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12CommandAllocator, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12CommandAllocator, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12CommandAllocator, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub Reset : extern "system" fn (This: *mut ID3D12CommandAllocator) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandList {
  pub lpVtbl : *mut ID3D12CommandListVtbl,
}


impl fmt::Debug for ID3D12CommandList {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12CommandList ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandListVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12CommandList, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12CommandList) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12CommandList) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12CommandList, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12CommandList, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12CommandList, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12CommandList, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12CommandList, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetType : extern "system" fn (This: *mut ID3D12CommandList) -> D3D12_COMMAND_LIST_TYPE,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandQueue {
  pub lpVtbl : *mut ID3D12CommandQueueVtbl,
}


impl fmt::Debug for ID3D12CommandQueue {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12CommandQueue ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandQueueVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12CommandQueue, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12CommandQueue) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12CommandQueue) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12CommandQueue, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12CommandQueue, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12CommandQueue, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12CommandQueue, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12CommandQueue, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub UpdateTileMappings : extern "system" fn (This: *mut ID3D12CommandQueue, pResource: *mut ID3D12Resource, NumResourceRegions: UINT, pResourceRegionStartCoordinates: *const D3D12_TILED_RESOURCE_COORDINATE, pResourceRegionSizes: *const D3D12_TILE_REGION_SIZE, pHeap: *mut ID3D12Heap, NumRanges: UINT, pRangeFlags: *const D3D12_TILE_RANGE_FLAGS, pHeapRangeStartOffsets: *const UINT, pRangeTileCounts: *const UINT, Flags: D3D12_TILE_MAPPING_FLAGS) -> (),
  pub CopyTileMappings : extern "system" fn (This: *mut ID3D12CommandQueue, pDstResource: *mut ID3D12Resource, pDstRegionStartCoordinate: *const D3D12_TILED_RESOURCE_COORDINATE, pSrcResource: *mut ID3D12Resource, pSrcRegionStartCoordinate: *const D3D12_TILED_RESOURCE_COORDINATE, pRegionSize: *const D3D12_TILE_REGION_SIZE, Flags: D3D12_TILE_MAPPING_FLAGS) -> (),
  pub ExecuteCommandLists : extern "system" fn (This: *mut ID3D12CommandQueue, NumCommandLists: UINT, ppCommandLists: *mut *mut ID3D12CommandList) -> (),
  pub SetMarker : extern "system" fn (This: *mut ID3D12CommandQueue, Metadata: UINT, pData: *const c_void, Size: UINT) -> (),
  pub BeginEvent : extern "system" fn (This: *mut ID3D12CommandQueue, Metadata: UINT, pData: *const c_void, Size: UINT) -> (),
  pub EndEvent : extern "system" fn (This: *mut ID3D12CommandQueue) -> (),
  pub Signal : extern "system" fn (This: *mut ID3D12CommandQueue, pFence: *mut ID3D12Fence, Value: UINT64) -> HRESULT,
  pub Wait : extern "system" fn (This: *mut ID3D12CommandQueue, pFence: *mut ID3D12Fence, Value: UINT64) -> HRESULT,
  pub GetTimestampFrequency : extern "system" fn (This: *mut ID3D12CommandQueue, pFrequency: *mut UINT64) -> HRESULT,
  pub GetClockCalibration : extern "system" fn (This: *mut ID3D12CommandQueue, pGpuTimestamp: *mut UINT64, pCpuTimestamp: *mut UINT64) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut ID3D12CommandQueue) -> D3D12_COMMAND_QUEUE_DESC,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandSignature {
  pub lpVtbl : *mut ID3D12CommandSignatureVtbl,
}


impl fmt::Debug for ID3D12CommandSignature {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12CommandSignature ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12CommandSignatureVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12CommandSignature, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12CommandSignature) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12CommandSignature) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12CommandSignature, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12CommandSignature, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12CommandSignature, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12CommandSignature, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12CommandSignature, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Debug {
  pub lpVtbl : *mut ID3D12DebugVtbl,
}


impl fmt::Debug for ID3D12Debug {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Debug ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugCommandList {
  pub lpVtbl : *mut ID3D12DebugCommandListVtbl,
}


impl fmt::Debug for ID3D12DebugCommandList {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12DebugCommandList ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugCommandListVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12DebugCommandList, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12DebugCommandList) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12DebugCommandList) -> ULONG,
  pub AssertResourceState : extern "system" fn (This: *mut ID3D12DebugCommandList, pResource: *mut ID3D12Resource, Subresource: UINT, State: UINT) -> BOOL,
  pub SetFeatureMask : extern "system" fn (This: *mut ID3D12DebugCommandList, Mask: D3D12_DEBUG_FEATURE) -> HRESULT,
  pub GetFeatureMask : extern "system" fn (This: *mut ID3D12DebugCommandList) -> D3D12_DEBUG_FEATURE,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugCommandQueue {
  pub lpVtbl : *mut ID3D12DebugCommandQueueVtbl,
}


impl fmt::Debug for ID3D12DebugCommandQueue {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12DebugCommandQueue ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugCommandQueueVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12DebugCommandQueue, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12DebugCommandQueue) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12DebugCommandQueue) -> ULONG,
  pub AssertResourceState : extern "system" fn (This: *mut ID3D12DebugCommandQueue, pResource: *mut ID3D12Resource, Subresource: UINT, State: UINT) -> BOOL,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugDevice {
  pub lpVtbl : *mut ID3D12DebugDeviceVtbl,
}


impl fmt::Debug for ID3D12DebugDevice {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12DebugDevice ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugDeviceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12DebugDevice, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12DebugDevice) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12DebugDevice) -> ULONG,
  pub SetFeatureMask : extern "system" fn (This: *mut ID3D12DebugDevice, Mask: D3D12_DEBUG_FEATURE) -> HRESULT,
  pub GetFeatureMask : extern "system" fn (This: *mut ID3D12DebugDevice) -> D3D12_DEBUG_FEATURE,
  pub ReportLiveDeviceObjects : extern "system" fn (This: *mut ID3D12DebugDevice, Flags: D3D12_RLDO_FLAGS) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DebugVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Debug, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Debug) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Debug) -> ULONG,
  pub EnableDebugLayer : extern "system" fn (This: *mut ID3D12Debug) -> (),
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DescriptorHeap {
  pub lpVtbl : *mut ID3D12DescriptorHeapVtbl,
}


impl fmt::Debug for ID3D12DescriptorHeap {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12DescriptorHeap ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DescriptorHeapVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12DescriptorHeap, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12DescriptorHeap) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12DescriptorHeap) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12DescriptorHeap, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12DescriptorHeap, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12DescriptorHeap, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12DescriptorHeap, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12DescriptorHeap, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut ID3D12DescriptorHeap) -> D3D12_DESCRIPTOR_HEAP_DESC,
  pub GetCPUDescriptorHandleForHeapStart : extern "system" fn (This: *mut ID3D12DescriptorHeap, __ret_val: *mut D3D12_CPU_DESCRIPTOR_HANDLE) -> *mut D3D12_CPU_DESCRIPTOR_HANDLE,
  pub GetGPUDescriptorHandleForHeapStart : extern "system" fn (This: *mut ID3D12DescriptorHeap, __ret_val: *mut D3D12_GPU_DESCRIPTOR_HANDLE) -> *mut D3D12_GPU_DESCRIPTOR_HANDLE,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Device {
  pub lpVtbl : *mut ID3D12DeviceVtbl,
}


impl fmt::Debug for ID3D12Device {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Device ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DeviceChild {
  pub lpVtbl : *mut ID3D12DeviceChildVtbl,
}


impl fmt::Debug for ID3D12DeviceChild {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12DeviceChild ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DeviceChildVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12DeviceChild, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12DeviceChild) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12DeviceChild) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12DeviceChild, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12DeviceChild, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12DeviceChild, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12DeviceChild, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12DeviceChild, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12DeviceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Device, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Device) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Device) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Device, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Device, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Device, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Device, Name: LPCWSTR) -> HRESULT,
  pub GetNodeCount : extern "system" fn (This: *mut ID3D12Device) -> UINT,
  pub CreateCommandQueue : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_COMMAND_QUEUE_DESC, riid: REFGUID, ppCommandQueue: *mut *mut c_void) -> HRESULT,
  pub CreateCommandAllocator : extern "system" fn (This: *mut ID3D12Device, ty: D3D12_COMMAND_LIST_TYPE, riid: REFGUID, ppCommandAllocator: *mut *mut c_void) -> HRESULT,
  pub CreateGraphicsPipelineState : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid: REFGUID, ppPipelineState: *mut *mut c_void) -> HRESULT,
  pub CreateComputePipelineState : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_COMPUTE_PIPELINE_STATE_DESC, riid: REFGUID, ppPipelineState: *mut *mut c_void) -> HRESULT,
  pub CreateCommandList : extern "system" fn (This: *mut ID3D12Device, nodeMask: UINT, ty: D3D12_COMMAND_LIST_TYPE, pCommandAllocator: *mut ID3D12CommandAllocator, pInitialState: *mut ID3D12PipelineState, riid: REFGUID, ppCommandList: *mut *mut c_void) -> HRESULT,
  pub CheckFeatureSupport : extern "system" fn (This: *mut ID3D12Device, Feature: D3D12_FEATURE, pFeatureSupportData: *mut c_void, FeatureSupportDataSize: UINT) -> HRESULT,
  pub CreateDescriptorHeap : extern "system" fn (This: *mut ID3D12Device, pDescriptorHeapDesc: *const D3D12_DESCRIPTOR_HEAP_DESC, riid: REFGUID, ppvHeap: *mut *mut c_void) -> HRESULT,
  pub GetDescriptorHandleIncrementSize : extern "system" fn (This: *mut ID3D12Device, DescriptorHeapType: D3D12_DESCRIPTOR_HEAP_TYPE) -> UINT,
  pub CreateRootSignature : extern "system" fn (This: *mut ID3D12Device, nodeMask: UINT, pBlobWithRootSignature: *const c_void, blobLengthInBytes: SIZE_T, riid: REFGUID, ppvRootSignature: *mut *mut c_void) -> HRESULT,
  pub CreateConstantBufferView : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_CONSTANT_BUFFER_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CreateShaderResourceView : extern "system" fn (This: *mut ID3D12Device, pResource: *mut ID3D12Resource, pDesc: *const D3D12_SHADER_RESOURCE_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CreateUnorderedAccessView : extern "system" fn (This: *mut ID3D12Device, pResource: *mut ID3D12Resource, pCounterResource: *mut ID3D12Resource, pDesc: *const D3D12_UNORDERED_ACCESS_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CreateRenderTargetView : extern "system" fn (This: *mut ID3D12Device, pResource: *mut ID3D12Resource, pDesc: *const D3D12_RENDER_TARGET_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CreateDepthStencilView : extern "system" fn (This: *mut ID3D12Device, pResource: *mut ID3D12Resource, pDesc: *const D3D12_DEPTH_STENCIL_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CreateSampler : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_SAMPLER_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub CopyDescriptors : extern "system" fn (This: *mut ID3D12Device, NumDestDescriptorRanges: UINT, pDestDescriptorRangeStarts: *const D3D12_CPU_DESCRIPTOR_HANDLE, pDestDescriptorRangeSizes: *const UINT, NumSrcDescriptorRanges: UINT, pSrcDescriptorRangeStarts: *const D3D12_CPU_DESCRIPTOR_HANDLE, pSrcDescriptorRangeSizes: *const UINT, DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) -> (),
  pub CopyDescriptorsSimple : extern "system" fn (This: *mut ID3D12Device, NumDescriptors: UINT, DestDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE, SrcDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE, DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) -> (),
  pub GetResourceAllocationInfo : extern "system" fn (This: *mut ID3D12Device, visibleMask: UINT, numResourceDescs: UINT, pResourceDescs: *const D3D12_RESOURCE_DESC) -> D3D12_RESOURCE_ALLOCATION_INFO,
  pub GetCustomHeapProperties : extern "system" fn (This: *mut ID3D12Device, nodeMask: UINT, heapType: D3D12_HEAP_TYPE) -> D3D12_HEAP_PROPERTIES,
  pub CreateCommittedResource : extern "system" fn (This: *mut ID3D12Device, pHeapProperties: *const D3D12_HEAP_PROPERTIES, HeapFlags: D3D12_HEAP_FLAGS, pResourceDesc: *const D3D12_RESOURCE_DESC, InitialResourceState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *const D3D12_CLEAR_VALUE, riidResource: REFGUID, ppvResource: *mut *mut c_void) -> HRESULT,
  pub CreateHeap : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_HEAP_DESC, riid: REFGUID, ppvHeap: *mut *mut c_void) -> HRESULT,
  pub CreatePlacedResource : extern "system" fn (This: *mut ID3D12Device, pHeap: *mut ID3D12Heap, HeapOffset: UINT64, pDesc: *const D3D12_RESOURCE_DESC, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *const D3D12_CLEAR_VALUE, riid: REFGUID, ppvResource: *mut *mut c_void) -> HRESULT,
  pub CreateReservedResource : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_RESOURCE_DESC, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *const D3D12_CLEAR_VALUE, riid: REFGUID, ppvResource: *mut *mut c_void) -> HRESULT,
  pub CreateSharedHandle : extern "system" fn (This: *mut ID3D12Device, pObject: *mut ID3D12DeviceChild, pAttributes: *const SECURITY_ATTRIBUTES, Access: DWORD, Name: LPCWSTR, pHandle: *mut HANDLE) -> HRESULT,
  pub OpenSharedHandle : extern "system" fn (This: *mut ID3D12Device, NTHandle: HANDLE, riid: REFGUID, ppvObj: *mut *mut c_void) -> HRESULT,
  pub OpenSharedHandleByName : extern "system" fn (This: *mut ID3D12Device, Name: LPCWSTR, Access: DWORD, pNTHandle: *mut HANDLE) -> HRESULT,
  pub MakeResident : extern "system" fn (This: *mut ID3D12Device, NumObjects: UINT, ppObjects: *mut *mut ID3D12Pageable) -> HRESULT,
  pub Evict : extern "system" fn (This: *mut ID3D12Device, NumObjects: UINT, ppObjects: *mut *mut ID3D12Pageable) -> HRESULT,
  pub CreateFence : extern "system" fn (This: *mut ID3D12Device, InitialValue: UINT64, Flags: D3D12_FENCE_FLAGS, riid: REFGUID, ppFence: *mut *mut c_void) -> HRESULT,
  pub GetDeviceRemovedReason : extern "system" fn (This: *mut ID3D12Device) -> HRESULT,
  pub GetCopyableFootprints : extern "system" fn (This: *mut ID3D12Device, pResourceDesc: *const D3D12_RESOURCE_DESC, FirstSubresource: UINT, NumSubresources: UINT, BaseOffset: UINT64, pLayouts: *mut D3D12_PLACED_SUBRESOURCE_FOOTPRINT, pNumRows: *mut UINT, pRowSizeInBytes: *mut UINT64, pTotalBytes: *mut UINT64) -> (),
  pub CreateQueryHeap : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_QUERY_HEAP_DESC, riid: REFGUID, ppvHeap: *mut *mut c_void) -> HRESULT,
  pub SetStablePowerState : extern "system" fn (This: *mut ID3D12Device, Enable: BOOL) -> HRESULT,
  pub CreateCommandSignature : extern "system" fn (This: *mut ID3D12Device, pDesc: *const D3D12_COMMAND_SIGNATURE_DESC, pRootSignature: *mut ID3D12RootSignature, riid: REFGUID, ppvCommandSignature: *mut *mut c_void) -> HRESULT,
  pub GetResourceTiling : extern "system" fn (This: *mut ID3D12Device, pTiledResource: *mut ID3D12Resource, pNumTilesForEntireResource: *mut UINT, pPackedMipDesc: *mut D3D12_PACKED_MIP_INFO, pStandardTileShapeForNonPackedMips: *mut D3D12_TILE_SHAPE, pNumSubresourceTilings: *mut UINT, FirstSubresourceTilingToGet: UINT, pSubresourceTilingsForNonPackedMips: *mut D3D12_SUBRESOURCE_TILING) -> (),
  pub GetAdapterLuid : extern "system" fn (This: *mut ID3D12Device, __ret_val: *mut LUID) -> *mut LUID,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Fence {
  pub lpVtbl : *mut ID3D12FenceVtbl,
}


impl fmt::Debug for ID3D12Fence {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Fence ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12FenceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Fence, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Fence) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Fence) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Fence, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Fence, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Fence, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Fence, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12Fence, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetCompletedValue : extern "system" fn (This: *mut ID3D12Fence) -> UINT64,
  pub SetEventOnCompletion : extern "system" fn (This: *mut ID3D12Fence, Value: UINT64, hEvent: HANDLE) -> HRESULT,
  pub Signal : extern "system" fn (This: *mut ID3D12Fence, Value: UINT64) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12GraphicsCommandList {
  pub lpVtbl : *mut ID3D12GraphicsCommandListVtbl,
}


impl fmt::Debug for ID3D12GraphicsCommandList {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12GraphicsCommandList ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12GraphicsCommandListVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12GraphicsCommandList, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12GraphicsCommandList) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12GraphicsCommandList) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12GraphicsCommandList, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12GraphicsCommandList, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12GraphicsCommandList, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12GraphicsCommandList, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12GraphicsCommandList, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetType : extern "system" fn (This: *mut ID3D12GraphicsCommandList) -> D3D12_COMMAND_LIST_TYPE,
  pub Close : extern "system" fn (This: *mut ID3D12GraphicsCommandList) -> HRESULT,
  pub Reset : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pAllocator: *mut ID3D12CommandAllocator, pInitialState: *mut ID3D12PipelineState) -> HRESULT,
  pub ClearState : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pPipelineState: *mut ID3D12PipelineState) -> (),
  pub DrawInstanced : extern "system" fn (This: *mut ID3D12GraphicsCommandList, VertexCountPerInstance: UINT, InstanceCount: UINT, StartVertexLocation: UINT, StartInstanceLocation: UINT) -> (),
  pub DrawIndexedInstanced : extern "system" fn (This: *mut ID3D12GraphicsCommandList, IndexCountPerInstance: UINT, InstanceCount: UINT, StartIndexLocation: UINT, BaseVertexLocation: INT, StartInstanceLocation: UINT) -> (),
  pub Dispatch : extern "system" fn (This: *mut ID3D12GraphicsCommandList, ThreadGroupCountX: UINT, ThreadGroupCountY: UINT, ThreadGroupCountZ: UINT) -> (),
  pub CopyBufferRegion : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pDstBuffer: *mut ID3D12Resource, DstOffset: UINT64, pSrcBuffer: *mut ID3D12Resource, SrcOffset: UINT64, NumBytes: UINT64) -> (),
  pub CopyTextureRegion : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pDst: *const D3D12_TEXTURE_COPY_LOCATION, DstX: UINT, DstY: UINT, DstZ: UINT, pSrc: *const D3D12_TEXTURE_COPY_LOCATION, pSrcBox: *const D3D12_BOX) -> (),
  pub CopyResource : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pDstResource: *mut ID3D12Resource, pSrcResource: *mut ID3D12Resource) -> (),
  pub CopyTiles : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pTiledResource: *mut ID3D12Resource, pTileRegionStartCoordinate: *const D3D12_TILED_RESOURCE_COORDINATE, pTileRegionSize: *const D3D12_TILE_REGION_SIZE, pBuffer: *mut ID3D12Resource, BufferStartOffsetInBytes: UINT64, Flags: D3D12_TILE_COPY_FLAGS) -> (),
  pub ResolveSubresource : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pDstResource: *mut ID3D12Resource, DstSubresource: UINT, pSrcResource: *mut ID3D12Resource, SrcSubresource: UINT, Format: DXGI_FORMAT) -> (),
  pub IASetPrimitiveTopology : extern "system" fn (This: *mut ID3D12GraphicsCommandList, PrimitiveTopology: D3D12_PRIMITIVE_TOPOLOGY) -> (),
  pub RSSetViewports : extern "system" fn (This: *mut ID3D12GraphicsCommandList, NumViewports: UINT, pViewports: *const D3D12_VIEWPORT) -> (),
  pub RSSetScissorRects : extern "system" fn (This: *mut ID3D12GraphicsCommandList, NumRects: UINT, pRects: *const D3D12_RECT) -> (),
  pub OMSetBlendFactor : extern "system" fn (This: *mut ID3D12GraphicsCommandList, BlendFactor: *mut [FLOAT;4]) -> (),
  pub OMSetStencilRef : extern "system" fn (This: *mut ID3D12GraphicsCommandList, StencilRef: UINT) -> (),
  pub SetPipelineState : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pPipelineState: *mut ID3D12PipelineState) -> (),
  pub ResourceBarrier : extern "system" fn (This: *mut ID3D12GraphicsCommandList, NumBarriers: UINT, pBarriers: *const D3D12_RESOURCE_BARRIER) -> (),
  pub ExecuteBundle : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pCommandList: *mut ID3D12GraphicsCommandList) -> (),
  pub SetDescriptorHeaps : extern "system" fn (This: *mut ID3D12GraphicsCommandList, NumDescriptorHeaps: UINT, ppDescriptorHeaps: *mut *mut ID3D12DescriptorHeap) -> (),
  pub SetComputeRootSignature : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pRootSignature: *mut ID3D12RootSignature) -> (),
  pub SetGraphicsRootSignature : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pRootSignature: *mut ID3D12RootSignature) -> (),
  pub SetComputeRootDescriptorTable : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) -> (),
  pub SetGraphicsRootDescriptorTable : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) -> (),
  pub SetComputeRoot32BitConstant : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, SrcData: UINT, DestOffsetIn32BitValues: UINT) -> (),
  pub SetGraphicsRoot32BitConstant : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, SrcData: UINT, DestOffsetIn32BitValues: UINT) -> (),
  pub SetComputeRoot32BitConstants : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, Num32BitValuesToSet: UINT, pSrcData: *const c_void, DestOffsetIn32BitValues: UINT) -> (),
  pub SetGraphicsRoot32BitConstants : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, Num32BitValuesToSet: UINT, pSrcData: *const c_void, DestOffsetIn32BitValues: UINT) -> (),
  pub SetComputeRootConstantBufferView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub SetGraphicsRootConstantBufferView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub SetComputeRootShaderResourceView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub SetGraphicsRootShaderResourceView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub SetComputeRootUnorderedAccessView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub SetGraphicsRootUnorderedAccessView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RootParameterIndex: UINT, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> (),
  pub IASetIndexBuffer : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pView: *const D3D12_INDEX_BUFFER_VIEW) -> (),
  pub IASetVertexBuffers : extern "system" fn (This: *mut ID3D12GraphicsCommandList, StartSlot: UINT, NumViews: UINT, pViews: *const D3D12_VERTEX_BUFFER_VIEW) -> (),
  pub SOSetTargets : extern "system" fn (This: *mut ID3D12GraphicsCommandList, StartSlot: UINT, NumViews: UINT, pViews: *const D3D12_STREAM_OUTPUT_BUFFER_VIEW) -> (),
  pub OMSetRenderTargets : extern "system" fn (This: *mut ID3D12GraphicsCommandList, NumRenderTargetDescriptors: UINT, pRenderTargetDescriptors: *const D3D12_CPU_DESCRIPTOR_HANDLE, RTsSingleHandleToDescriptorRange: BOOL, pDepthStencilDescriptor: *const D3D12_CPU_DESCRIPTOR_HANDLE) -> (),
  pub ClearDepthStencilView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, DepthStencilView: D3D12_CPU_DESCRIPTOR_HANDLE, ClearFlags: D3D12_CLEAR_FLAGS, Depth: FLOAT, Stencil: UINT8, NumRects: UINT, pRects: *const D3D12_RECT) -> (),
  pub ClearRenderTargetView : extern "system" fn (This: *mut ID3D12GraphicsCommandList, RenderTargetView: D3D12_CPU_DESCRIPTOR_HANDLE, ColorRGBA: *mut [FLOAT;4], NumRects: UINT, pRects: *const D3D12_RECT) -> (),
  pub ClearUnorderedAccessViewUint : extern "system" fn (This: *mut ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE, pResource: *mut ID3D12Resource, Values: *mut [UINT;4], NumRects: UINT, pRects: *const D3D12_RECT) -> (),
  pub ClearUnorderedAccessViewFloat : extern "system" fn (This: *mut ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE, pResource: *mut ID3D12Resource, Values: *mut [FLOAT;4], NumRects: UINT, pRects: *const D3D12_RECT) -> (),
  pub DiscardResource : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pResource: *mut ID3D12Resource, pRegion: *const D3D12_DISCARD_REGION) -> (),
  pub BeginQuery : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pQueryHeap: *mut ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: UINT) -> (),
  pub EndQuery : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pQueryHeap: *mut ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: UINT) -> (),
  pub ResolveQueryData : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pQueryHeap: *mut ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, StartIndex: UINT, NumQueries: UINT, pDestinationBuffer: *mut ID3D12Resource, AlignedDestinationBufferOffset: UINT64) -> (),
  pub SetPredication : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pBuffer: *mut ID3D12Resource, AlignedBufferOffset: UINT64, Operation: D3D12_PREDICATION_OP) -> (),
  pub SetMarker : extern "system" fn (This: *mut ID3D12GraphicsCommandList, Metadata: UINT, pData: *const c_void, Size: UINT) -> (),
  pub BeginEvent : extern "system" fn (This: *mut ID3D12GraphicsCommandList, Metadata: UINT, pData: *const c_void, Size: UINT) -> (),
  pub EndEvent : extern "system" fn (This: *mut ID3D12GraphicsCommandList) -> (),
  pub ExecuteIndirect : extern "system" fn (This: *mut ID3D12GraphicsCommandList, pCommandSignature: *mut ID3D12CommandSignature, MaxCommandCount: UINT, pArgumentBuffer: *mut ID3D12Resource, ArgumentBufferOffset: UINT64, pCountBuffer: *mut ID3D12Resource, CountBufferOffset: UINT64) -> (),
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Heap {
  pub lpVtbl : *mut ID3D12HeapVtbl,
}


impl fmt::Debug for ID3D12Heap {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Heap ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12HeapVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Heap, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Heap) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Heap) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Heap, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Heap, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Heap, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Heap, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12Heap, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut ID3D12Heap) -> D3D12_HEAP_DESC,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12InfoQueue {
  pub lpVtbl : *mut ID3D12InfoQueueVtbl,
}


impl fmt::Debug for ID3D12InfoQueue {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12InfoQueue ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12InfoQueueVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12InfoQueue, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12InfoQueue) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12InfoQueue) -> ULONG,
  pub SetMessageCountLimit : extern "system" fn (This: *mut ID3D12InfoQueue, MessageCountLimit: UINT64) -> HRESULT,
  pub ClearStoredMessages : extern "system" fn (This: *mut ID3D12InfoQueue) -> (),
  pub GetMessage : extern "system" fn (This: *mut ID3D12InfoQueue, MessageIndex: UINT64, pMessage: *mut D3D12_MESSAGE, pMessageByteLength: *mut SIZE_T) -> HRESULT,
  pub GetNumMessagesAllowedByStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub GetNumMessagesDeniedByStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub GetNumStoredMessages : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub GetNumStoredMessagesAllowedByRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub GetNumMessagesDiscardedByMessageCountLimit : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub GetMessageCountLimit : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT64,
  pub AddStorageFilterEntries : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER) -> HRESULT,
  pub GetStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER, pFilterByteLength: *mut SIZE_T) -> HRESULT,
  pub ClearStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> (),
  pub PushEmptyStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> HRESULT,
  pub PushCopyOfStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> HRESULT,
  pub PushStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER) -> HRESULT,
  pub PopStorageFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> (),
  pub GetStorageFilterStackSize : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT,
  pub AddRetrievalFilterEntries : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER) -> HRESULT,
  pub GetRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER, pFilterByteLength: *mut SIZE_T) -> HRESULT,
  pub ClearRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> (),
  pub PushEmptyRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> HRESULT,
  pub PushCopyOfRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> HRESULT,
  pub PushRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue, pFilter: *mut D3D12_INFO_QUEUE_FILTER) -> HRESULT,
  pub PopRetrievalFilter : extern "system" fn (This: *mut ID3D12InfoQueue) -> (),
  pub GetRetrievalFilterStackSize : extern "system" fn (This: *mut ID3D12InfoQueue) -> UINT,
  pub AddMessage : extern "system" fn (This: *mut ID3D12InfoQueue, Category: D3D12_MESSAGE_CATEGORY, Severity: D3D12_MESSAGE_SEVERITY, ID: D3D12_MESSAGE_ID, pDescription: LPCSTR) -> HRESULT,
  pub AddApplicationMessage : extern "system" fn (This: *mut ID3D12InfoQueue, Severity: D3D12_MESSAGE_SEVERITY, pDescription: LPCSTR) -> HRESULT,
  pub SetBreakOnCategory : extern "system" fn (This: *mut ID3D12InfoQueue, Category: D3D12_MESSAGE_CATEGORY, bEnable: BOOL) -> HRESULT,
  pub SetBreakOnSeverity : extern "system" fn (This: *mut ID3D12InfoQueue, Severity: D3D12_MESSAGE_SEVERITY, bEnable: BOOL) -> HRESULT,
  pub SetBreakOnID : extern "system" fn (This: *mut ID3D12InfoQueue, ID: D3D12_MESSAGE_ID, bEnable: BOOL) -> HRESULT,
  pub GetBreakOnCategory : extern "system" fn (This: *mut ID3D12InfoQueue, Category: D3D12_MESSAGE_CATEGORY) -> BOOL,
  pub GetBreakOnSeverity : extern "system" fn (This: *mut ID3D12InfoQueue, Severity: D3D12_MESSAGE_SEVERITY) -> BOOL,
  pub GetBreakOnID : extern "system" fn (This: *mut ID3D12InfoQueue, ID: D3D12_MESSAGE_ID) -> BOOL,
  pub SetMuteDebugOutput : extern "system" fn (This: *mut ID3D12InfoQueue, bMute: BOOL) -> (),
  pub GetMuteDebugOutput : extern "system" fn (This: *mut ID3D12InfoQueue) -> BOOL,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Object {
  pub lpVtbl : *mut ID3D12ObjectVtbl,
}


impl fmt::Debug for ID3D12Object {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Object ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12ObjectVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Object, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Object) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Object) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Object, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Object, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Object, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Object, Name: LPCWSTR) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Pageable {
  pub lpVtbl : *mut ID3D12PageableVtbl,
}


impl fmt::Debug for ID3D12Pageable {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Pageable ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12PageableVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Pageable, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Pageable) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Pageable) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Pageable, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Pageable, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Pageable, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Pageable, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12Pageable, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12PipelineState {
  pub lpVtbl : *mut ID3D12PipelineStateVtbl,
}


impl fmt::Debug for ID3D12PipelineState {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12PipelineState ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12PipelineStateVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12PipelineState, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12PipelineState) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12PipelineState) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12PipelineState, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12PipelineState, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12PipelineState, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12PipelineState, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12PipelineState, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub GetCachedBlob : extern "system" fn (This: *mut ID3D12PipelineState, ppBlob: *mut *mut ID3DBlob) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12QueryHeap {
  pub lpVtbl : *mut ID3D12QueryHeapVtbl,
}


impl fmt::Debug for ID3D12QueryHeap {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12QueryHeap ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12QueryHeapVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12QueryHeap, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12QueryHeap) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12QueryHeap) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12QueryHeap, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12QueryHeap, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12QueryHeap, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12QueryHeap, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12QueryHeap, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12Resource {
  pub lpVtbl : *mut ID3D12ResourceVtbl,
}


impl fmt::Debug for ID3D12Resource {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12Resource ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12ResourceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12Resource, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12Resource) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12Resource) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12Resource, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12Resource, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12Resource, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12Resource, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12Resource, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
  pub Map : extern "system" fn (This: *mut ID3D12Resource, Subresource: UINT, pReadRange: *const D3D12_RANGE, ppData: *mut *mut c_void) -> HRESULT,
  pub Unmap : extern "system" fn (This: *mut ID3D12Resource, Subresource: UINT, pWrittenRange: *const D3D12_RANGE) -> (),
  pub GetDesc : extern "system" fn (This: *mut ID3D12Resource) -> D3D12_RESOURCE_DESC,
  pub GetGPUVirtualAddress : extern "system" fn (This: *mut ID3D12Resource) -> D3D12_GPU_VIRTUAL_ADDRESS,
  pub WriteToSubresource : extern "system" fn (This: *mut ID3D12Resource, DstSubresource: UINT, pDstBox: *const D3D12_BOX, pSrcData: *const c_void, SrcRowPitch: UINT, SrcDepthPitch: UINT) -> HRESULT,
  pub ReadFromSubresource : extern "system" fn (This: *mut ID3D12Resource, pDstData: *mut c_void, DstRowPitch: UINT, DstDepthPitch: UINT, SrcSubresource: UINT, pSrcBox: *const D3D12_BOX) -> HRESULT,
  pub GetHeapProperties : extern "system" fn (This: *mut ID3D12Resource, pHeapProperties: *mut D3D12_HEAP_PROPERTIES, pHeapFlags: *mut D3D12_HEAP_FLAGS) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12RootSignature {
  pub lpVtbl : *mut ID3D12RootSignatureVtbl,
}


impl fmt::Debug for ID3D12RootSignature {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12RootSignature ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12RootSignatureDeserializer {
  pub lpVtbl : *mut ID3D12RootSignatureDeserializerVtbl,
}


impl fmt::Debug for ID3D12RootSignatureDeserializer {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3D12RootSignatureDeserializer ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12RootSignatureDeserializerVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12RootSignatureDeserializer, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12RootSignatureDeserializer) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12RootSignatureDeserializer) -> ULONG,
  pub GetRootSignatureDesc : extern "system" fn (This: *mut ID3D12RootSignatureDeserializer) -> *const D3D12_ROOT_SIGNATURE_DESC,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3D12RootSignatureVtbl {
  pub QueryInterface : extern "system" fn (This: *mut ID3D12RootSignature, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut ID3D12RootSignature) -> ULONG,
  pub Release : extern "system" fn (This: *mut ID3D12RootSignature) -> ULONG,
  pub GetPrivateData : extern "system" fn (This: *mut ID3D12RootSignature, guid: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub SetPrivateData : extern "system" fn (This: *mut ID3D12RootSignature, guid: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut ID3D12RootSignature, guid: REFGUID, pData: *const IUnknown) -> HRESULT,
  pub SetName : extern "system" fn (This: *mut ID3D12RootSignature, Name: LPCWSTR) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut ID3D12RootSignature, riid: REFGUID, ppvDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3DInclude {
  pub lpVtbl : *mut ID3DIncludeVtbl,
}


impl fmt::Debug for ID3DInclude {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct ID3DInclude ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct ID3DIncludeVtbl {
  pub Open : extern "system" fn (This: *mut ID3DInclude, IncludeType: D3D_INCLUDE_TYPE, pFileName: LPCSTR, pParentData: LPCVOID, ppData: *mut LPCVOID, pBytes: *mut UINT) -> HRESULT,
  pub Close : extern "system" fn (This: *mut ID3DInclude, pData: LPCVOID) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter {
  pub lpVtbl : *mut IDXGIAdapterVtbl,
}


impl fmt::Debug for IDXGIAdapter {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIAdapter ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter1 {
  pub lpVtbl : *mut IDXGIAdapter1Vtbl,
}


impl fmt::Debug for IDXGIAdapter1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIAdapter1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIAdapter1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIAdapter1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIAdapter1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIAdapter1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIAdapter1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIAdapter1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIAdapter1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumOutputs : extern "system" fn (This: *mut IDXGIAdapter1, Output: UINT, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIAdapter1, pDesc: *mut DXGI_ADAPTER_DESC) -> HRESULT,
  pub CheckInterfaceSupport : extern "system" fn (This: *mut IDXGIAdapter1, InterfaceName: REFGUID, pUMDVersion: *mut LARGE_INTEGER) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGIAdapter1, pDesc: *mut DXGI_ADAPTER_DESC1) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter2 {
  pub lpVtbl : *mut IDXGIAdapter2Vtbl,
}


impl fmt::Debug for IDXGIAdapter2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIAdapter2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIAdapter2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIAdapter2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIAdapter2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIAdapter2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIAdapter2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIAdapter2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIAdapter2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumOutputs : extern "system" fn (This: *mut IDXGIAdapter2, Output: UINT, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIAdapter2, pDesc: *mut DXGI_ADAPTER_DESC) -> HRESULT,
  pub CheckInterfaceSupport : extern "system" fn (This: *mut IDXGIAdapter2, InterfaceName: REFGUID, pUMDVersion: *mut LARGE_INTEGER) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGIAdapter2, pDesc: *mut DXGI_ADAPTER_DESC1) -> HRESULT,
  pub GetDesc2 : extern "system" fn (This: *mut IDXGIAdapter2, pDesc: *mut DXGI_ADAPTER_DESC2) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter3 {
  pub lpVtbl : *mut IDXGIAdapter3Vtbl,
}


impl fmt::Debug for IDXGIAdapter3 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIAdapter3 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapter3Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIAdapter3, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIAdapter3) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIAdapter3) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIAdapter3, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIAdapter3, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIAdapter3, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIAdapter3, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumOutputs : extern "system" fn (This: *mut IDXGIAdapter3, Output: UINT, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIAdapter3, pDesc: *mut DXGI_ADAPTER_DESC) -> HRESULT,
  pub CheckInterfaceSupport : extern "system" fn (This: *mut IDXGIAdapter3, InterfaceName: REFGUID, pUMDVersion: *mut LARGE_INTEGER) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGIAdapter3, pDesc: *mut DXGI_ADAPTER_DESC1) -> HRESULT,
  pub GetDesc2 : extern "system" fn (This: *mut IDXGIAdapter3, pDesc: *mut DXGI_ADAPTER_DESC2) -> HRESULT,
  pub RegisterHardwareContentProtectionTeardownStatusEvent : extern "system" fn (This: *mut IDXGIAdapter3, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterHardwareContentProtectionTeardownStatus : extern "system" fn (This: *mut IDXGIAdapter3, dwCookie: DWORD) -> (),
  pub QueryVideoMemoryInfo : extern "system" fn (This: *mut IDXGIAdapter3, NodeIndex: UINT, MemorySegmentGroup: DXGI_MEMORY_SEGMENT_GROUP, pVideoMemoryInfo: *mut DXGI_QUERY_VIDEO_MEMORY_INFO) -> HRESULT,
  pub SetVideoMemoryReservation : extern "system" fn (This: *mut IDXGIAdapter3, NodeIndex: UINT, MemorySegmentGroup: DXGI_MEMORY_SEGMENT_GROUP, Reservation: UINT64) -> HRESULT,
  pub RegisterVideoMemoryBudgetChangeNotificationEvent : extern "system" fn (This: *mut IDXGIAdapter3, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterVideoMemoryBudgetChangeNotification : extern "system" fn (This: *mut IDXGIAdapter3, dwCookie: DWORD) -> (),
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIAdapterVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIAdapter, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIAdapter) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIAdapter) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIAdapter, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIAdapter, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIAdapter, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIAdapter, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumOutputs : extern "system" fn (This: *mut IDXGIAdapter, Output: UINT, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIAdapter, pDesc: *mut DXGI_ADAPTER_DESC) -> HRESULT,
  pub CheckInterfaceSupport : extern "system" fn (This: *mut IDXGIAdapter, InterfaceName: REFGUID, pUMDVersion: *mut LARGE_INTEGER) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDecodeSwapChain {
  pub lpVtbl : *mut IDXGIDecodeSwapChainVtbl,
}


impl fmt::Debug for IDXGIDecodeSwapChain {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDecodeSwapChain ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDecodeSwapChainVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDecodeSwapChain, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDecodeSwapChain) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDecodeSwapChain) -> ULONG,
  pub PresentBuffer : extern "system" fn (This: *mut IDXGIDecodeSwapChain, BufferToPresent: UINT, SyncInterval: UINT, Flags: UINT) -> HRESULT,
  pub SetSourceRect : extern "system" fn (This: *mut IDXGIDecodeSwapChain, pRect: *const RECT) -> HRESULT,
  pub SetTargetRect : extern "system" fn (This: *mut IDXGIDecodeSwapChain, pRect: *const RECT) -> HRESULT,
  pub SetDestSize : extern "system" fn (This: *mut IDXGIDecodeSwapChain, Width: UINT, Height: UINT) -> HRESULT,
  pub GetSourceRect : extern "system" fn (This: *mut IDXGIDecodeSwapChain, pRect: *mut RECT) -> HRESULT,
  pub GetTargetRect : extern "system" fn (This: *mut IDXGIDecodeSwapChain, pRect: *mut RECT) -> HRESULT,
  pub GetDestSize : extern "system" fn (This: *mut IDXGIDecodeSwapChain, pWidth: *mut UINT, pHeight: *mut UINT) -> HRESULT,
  pub SetColorSpace : extern "system" fn (This: *mut IDXGIDecodeSwapChain, ColorSpace: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS) -> HRESULT,
  pub GetColorSpace : extern "system" fn (This: *mut IDXGIDecodeSwapChain) -> DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice {
  pub lpVtbl : *mut IDXGIDeviceVtbl,
}


impl fmt::Debug for IDXGIDevice {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDevice ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice1 {
  pub lpVtbl : *mut IDXGIDevice1Vtbl,
}


impl fmt::Debug for IDXGIDevice1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDevice1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDevice1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDevice1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDevice1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIDevice1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIDevice1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIDevice1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIDevice1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetAdapter : extern "system" fn (This: *mut IDXGIDevice1, pAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub CreateSurface : extern "system" fn (This: *mut IDXGIDevice1, pDesc: *const DXGI_SURFACE_DESC, NumSurfaces: UINT, Usage: DXGI_USAGE, pSharedResource: *const DXGI_SHARED_RESOURCE, ppSurface: *mut *mut IDXGISurface) -> HRESULT,
  pub QueryResourceResidency : extern "system" fn (This: *mut IDXGIDevice1, ppResources: *mut *mut IUnknown, pResidencyStatus: *mut DXGI_RESIDENCY, NumResources: UINT) -> HRESULT,
  pub SetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice1, Priority: INT) -> HRESULT,
  pub GetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice1, pPriority: *mut INT) -> HRESULT,
  pub SetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice1, MaxLatency: UINT) -> HRESULT,
  pub GetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice1, pMaxLatency: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice2 {
  pub lpVtbl : *mut IDXGIDevice2Vtbl,
}


impl fmt::Debug for IDXGIDevice2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDevice2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDevice2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDevice2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDevice2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIDevice2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIDevice2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIDevice2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIDevice2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetAdapter : extern "system" fn (This: *mut IDXGIDevice2, pAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub CreateSurface : extern "system" fn (This: *mut IDXGIDevice2, pDesc: *const DXGI_SURFACE_DESC, NumSurfaces: UINT, Usage: DXGI_USAGE, pSharedResource: *const DXGI_SHARED_RESOURCE, ppSurface: *mut *mut IDXGISurface) -> HRESULT,
  pub QueryResourceResidency : extern "system" fn (This: *mut IDXGIDevice2, ppResources: *mut *mut IUnknown, pResidencyStatus: *mut DXGI_RESIDENCY, NumResources: UINT) -> HRESULT,
  pub SetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice2, Priority: INT) -> HRESULT,
  pub GetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice2, pPriority: *mut INT) -> HRESULT,
  pub SetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice2, MaxLatency: UINT) -> HRESULT,
  pub GetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice2, pMaxLatency: *mut UINT) -> HRESULT,
  pub OfferResources : extern "system" fn (This: *mut IDXGIDevice2, NumResources: UINT, ppResources: *mut *mut IDXGIResource, Priority: DXGI_OFFER_RESOURCE_PRIORITY) -> HRESULT,
  pub ReclaimResources : extern "system" fn (This: *mut IDXGIDevice2, NumResources: UINT, ppResources: *mut *mut IDXGIResource, pDiscarded: *mut BOOL) -> HRESULT,
  pub EnqueueSetEvent : extern "system" fn (This: *mut IDXGIDevice2, hEvent: HANDLE) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice3 {
  pub lpVtbl : *mut IDXGIDevice3Vtbl,
}


impl fmt::Debug for IDXGIDevice3 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDevice3 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDevice3Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDevice3, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDevice3) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDevice3) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIDevice3, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIDevice3, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIDevice3, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIDevice3, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetAdapter : extern "system" fn (This: *mut IDXGIDevice3, pAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub CreateSurface : extern "system" fn (This: *mut IDXGIDevice3, pDesc: *const DXGI_SURFACE_DESC, NumSurfaces: UINT, Usage: DXGI_USAGE, pSharedResource: *const DXGI_SHARED_RESOURCE, ppSurface: *mut *mut IDXGISurface) -> HRESULT,
  pub QueryResourceResidency : extern "system" fn (This: *mut IDXGIDevice3, ppResources: *mut *mut IUnknown, pResidencyStatus: *mut DXGI_RESIDENCY, NumResources: UINT) -> HRESULT,
  pub SetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice3, Priority: INT) -> HRESULT,
  pub GetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice3, pPriority: *mut INT) -> HRESULT,
  pub SetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice3, MaxLatency: UINT) -> HRESULT,
  pub GetMaximumFrameLatency : extern "system" fn (This: *mut IDXGIDevice3, pMaxLatency: *mut UINT) -> HRESULT,
  pub OfferResources : extern "system" fn (This: *mut IDXGIDevice3, NumResources: UINT, ppResources: *mut *mut IDXGIResource, Priority: DXGI_OFFER_RESOURCE_PRIORITY) -> HRESULT,
  pub ReclaimResources : extern "system" fn (This: *mut IDXGIDevice3, NumResources: UINT, ppResources: *mut *mut IDXGIResource, pDiscarded: *mut BOOL) -> HRESULT,
  pub EnqueueSetEvent : extern "system" fn (This: *mut IDXGIDevice3, hEvent: HANDLE) -> HRESULT,
  pub Trim : extern "system" fn (This: *mut IDXGIDevice3) -> (),
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDeviceSubObject {
  pub lpVtbl : *mut IDXGIDeviceSubObjectVtbl,
}


impl fmt::Debug for IDXGIDeviceSubObject {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDeviceSubObject ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDeviceSubObjectVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDeviceSubObject, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDeviceSubObject) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDeviceSubObject) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIDeviceSubObject, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIDeviceSubObject, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIDeviceSubObject, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIDeviceSubObject, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGIDeviceSubObject, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDeviceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDevice, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDevice) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDevice) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIDevice, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIDevice, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIDevice, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIDevice, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetAdapter : extern "system" fn (This: *mut IDXGIDevice, pAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub CreateSurface : extern "system" fn (This: *mut IDXGIDevice, pDesc: *const DXGI_SURFACE_DESC, NumSurfaces: UINT, Usage: DXGI_USAGE, pSharedResource: *const DXGI_SHARED_RESOURCE, ppSurface: *mut *mut IDXGISurface) -> HRESULT,
  pub QueryResourceResidency : extern "system" fn (This: *mut IDXGIDevice, ppResources: *mut *mut IUnknown, pResidencyStatus: *mut DXGI_RESIDENCY, NumResources: UINT) -> HRESULT,
  pub SetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice, Priority: INT) -> HRESULT,
  pub GetGPUThreadPriority : extern "system" fn (This: *mut IDXGIDevice, pPriority: *mut INT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDisplayControl {
  pub lpVtbl : *mut IDXGIDisplayControlVtbl,
}


impl fmt::Debug for IDXGIDisplayControl {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIDisplayControl ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIDisplayControlVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIDisplayControl, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIDisplayControl) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIDisplayControl) -> ULONG,
  pub IsStereoEnabled : extern "system" fn (This: *mut IDXGIDisplayControl) -> BOOL,
  pub SetStereoEnabled : extern "system" fn (This: *mut IDXGIDisplayControl, enabled: BOOL) -> (),
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory {
  pub lpVtbl : *mut IDXGIFactoryVtbl,
}


impl fmt::Debug for IDXGIFactory {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactory ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory1 {
  pub lpVtbl : *mut IDXGIFactory1Vtbl,
}


impl fmt::Debug for IDXGIFactory1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactory1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactory1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactory1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactory1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIFactory1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIFactory1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIFactory1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIFactory1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumAdapters : extern "system" fn (This: *mut IDXGIFactory1, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub MakeWindowAssociation : extern "system" fn (This: *mut IDXGIFactory1, WindowHandle: HWND, Flags: UINT) -> HRESULT,
  pub GetWindowAssociation : extern "system" fn (This: *mut IDXGIFactory1, pWindowHandle: *mut HWND) -> HRESULT,
  pub CreateSwapChain : extern "system" fn (This: *mut IDXGIFactory1, pDevice: *mut IUnknown, pDesc: *mut DXGI_SWAP_CHAIN_DESC, ppSwapChain: *mut *mut IDXGISwapChain) -> HRESULT,
  pub CreateSoftwareAdapter : extern "system" fn (This: *mut IDXGIFactory1, Module: HMODULE, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub EnumAdapters1 : extern "system" fn (This: *mut IDXGIFactory1, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter1) -> HRESULT,
  pub IsCurrent : extern "system" fn (This: *mut IDXGIFactory1) -> BOOL,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory2 {
  pub lpVtbl : *mut IDXGIFactory2Vtbl,
}


impl fmt::Debug for IDXGIFactory2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactory2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactory2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactory2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactory2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIFactory2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIFactory2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIFactory2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIFactory2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumAdapters : extern "system" fn (This: *mut IDXGIFactory2, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub MakeWindowAssociation : extern "system" fn (This: *mut IDXGIFactory2, WindowHandle: HWND, Flags: UINT) -> HRESULT,
  pub GetWindowAssociation : extern "system" fn (This: *mut IDXGIFactory2, pWindowHandle: *mut HWND) -> HRESULT,
  pub CreateSwapChain : extern "system" fn (This: *mut IDXGIFactory2, pDevice: *mut IUnknown, pDesc: *mut DXGI_SWAP_CHAIN_DESC, ppSwapChain: *mut *mut IDXGISwapChain) -> HRESULT,
  pub CreateSoftwareAdapter : extern "system" fn (This: *mut IDXGIFactory2, Module: HMODULE, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub EnumAdapters1 : extern "system" fn (This: *mut IDXGIFactory2, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter1) -> HRESULT,
  pub IsCurrent : extern "system" fn (This: *mut IDXGIFactory2) -> BOOL,
  pub IsWindowedStereoEnabled : extern "system" fn (This: *mut IDXGIFactory2) -> BOOL,
  pub CreateSwapChainForHwnd : extern "system" fn (This: *mut IDXGIFactory2, pDevice: *mut IUnknown, hWnd: HWND, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pFullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub CreateSwapChainForCoreWindow : extern "system" fn (This: *mut IDXGIFactory2, pDevice: *mut IUnknown, pWindow: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub GetSharedResourceAdapterLuid : extern "system" fn (This: *mut IDXGIFactory2, hResource: HANDLE, pLuid: *mut LUID) -> HRESULT,
  pub RegisterStereoStatusWindow : extern "system" fn (This: *mut IDXGIFactory2, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterStereoStatusEvent : extern "system" fn (This: *mut IDXGIFactory2, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterStereoStatus : extern "system" fn (This: *mut IDXGIFactory2, dwCookie: DWORD) -> (),
  pub RegisterOcclusionStatusWindow : extern "system" fn (This: *mut IDXGIFactory2, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterOcclusionStatusEvent : extern "system" fn (This: *mut IDXGIFactory2, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterOcclusionStatus : extern "system" fn (This: *mut IDXGIFactory2, dwCookie: DWORD) -> (),
  pub CreateSwapChainForComposition : extern "system" fn (This: *mut IDXGIFactory2, pDevice: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory3 {
  pub lpVtbl : *mut IDXGIFactory3Vtbl,
}


impl fmt::Debug for IDXGIFactory3 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactory3 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory3Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactory3, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactory3) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactory3) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIFactory3, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIFactory3, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIFactory3, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIFactory3, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumAdapters : extern "system" fn (This: *mut IDXGIFactory3, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub MakeWindowAssociation : extern "system" fn (This: *mut IDXGIFactory3, WindowHandle: HWND, Flags: UINT) -> HRESULT,
  pub GetWindowAssociation : extern "system" fn (This: *mut IDXGIFactory3, pWindowHandle: *mut HWND) -> HRESULT,
  pub CreateSwapChain : extern "system" fn (This: *mut IDXGIFactory3, pDevice: *mut IUnknown, pDesc: *mut DXGI_SWAP_CHAIN_DESC, ppSwapChain: *mut *mut IDXGISwapChain) -> HRESULT,
  pub CreateSoftwareAdapter : extern "system" fn (This: *mut IDXGIFactory3, Module: HMODULE, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub EnumAdapters1 : extern "system" fn (This: *mut IDXGIFactory3, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter1) -> HRESULT,
  pub IsCurrent : extern "system" fn (This: *mut IDXGIFactory3) -> BOOL,
  pub IsWindowedStereoEnabled : extern "system" fn (This: *mut IDXGIFactory3) -> BOOL,
  pub CreateSwapChainForHwnd : extern "system" fn (This: *mut IDXGIFactory3, pDevice: *mut IUnknown, hWnd: HWND, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pFullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub CreateSwapChainForCoreWindow : extern "system" fn (This: *mut IDXGIFactory3, pDevice: *mut IUnknown, pWindow: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub GetSharedResourceAdapterLuid : extern "system" fn (This: *mut IDXGIFactory3, hResource: HANDLE, pLuid: *mut LUID) -> HRESULT,
  pub RegisterStereoStatusWindow : extern "system" fn (This: *mut IDXGIFactory3, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterStereoStatusEvent : extern "system" fn (This: *mut IDXGIFactory3, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterStereoStatus : extern "system" fn (This: *mut IDXGIFactory3, dwCookie: DWORD) -> (),
  pub RegisterOcclusionStatusWindow : extern "system" fn (This: *mut IDXGIFactory3, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterOcclusionStatusEvent : extern "system" fn (This: *mut IDXGIFactory3, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterOcclusionStatus : extern "system" fn (This: *mut IDXGIFactory3, dwCookie: DWORD) -> (),
  pub CreateSwapChainForComposition : extern "system" fn (This: *mut IDXGIFactory3, pDevice: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub GetCreationFlags : extern "system" fn (This: *mut IDXGIFactory3) -> UINT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory4 {
  pub lpVtbl : *mut IDXGIFactory4Vtbl,
}


impl fmt::Debug for IDXGIFactory4 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactory4 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactory4Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactory4, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactory4) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactory4) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIFactory4, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIFactory4, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIFactory4, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIFactory4, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumAdapters : extern "system" fn (This: *mut IDXGIFactory4, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub MakeWindowAssociation : extern "system" fn (This: *mut IDXGIFactory4, WindowHandle: HWND, Flags: UINT) -> HRESULT,
  pub GetWindowAssociation : extern "system" fn (This: *mut IDXGIFactory4, pWindowHandle: *mut HWND) -> HRESULT,
  pub CreateSwapChain : extern "system" fn (This: *mut IDXGIFactory4, pDevice: *mut IUnknown, pDesc: *mut DXGI_SWAP_CHAIN_DESC, ppSwapChain: *mut *mut IDXGISwapChain) -> HRESULT,
  pub CreateSoftwareAdapter : extern "system" fn (This: *mut IDXGIFactory4, Module: HMODULE, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub EnumAdapters1 : extern "system" fn (This: *mut IDXGIFactory4, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter1) -> HRESULT,
  pub IsCurrent : extern "system" fn (This: *mut IDXGIFactory4) -> BOOL,
  pub IsWindowedStereoEnabled : extern "system" fn (This: *mut IDXGIFactory4) -> BOOL,
  pub CreateSwapChainForHwnd : extern "system" fn (This: *mut IDXGIFactory4, pDevice: *mut IUnknown, hWnd: HWND, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pFullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub CreateSwapChainForCoreWindow : extern "system" fn (This: *mut IDXGIFactory4, pDevice: *mut IUnknown, pWindow: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub GetSharedResourceAdapterLuid : extern "system" fn (This: *mut IDXGIFactory4, hResource: HANDLE, pLuid: *mut LUID) -> HRESULT,
  pub RegisterStereoStatusWindow : extern "system" fn (This: *mut IDXGIFactory4, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterStereoStatusEvent : extern "system" fn (This: *mut IDXGIFactory4, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterStereoStatus : extern "system" fn (This: *mut IDXGIFactory4, dwCookie: DWORD) -> (),
  pub RegisterOcclusionStatusWindow : extern "system" fn (This: *mut IDXGIFactory4, WindowHandle: HWND, wMsg: UINT, pdwCookie: *mut DWORD) -> HRESULT,
  pub RegisterOcclusionStatusEvent : extern "system" fn (This: *mut IDXGIFactory4, hEvent: HANDLE, pdwCookie: *mut DWORD) -> HRESULT,
  pub UnregisterOcclusionStatus : extern "system" fn (This: *mut IDXGIFactory4, dwCookie: DWORD) -> (),
  pub CreateSwapChainForComposition : extern "system" fn (This: *mut IDXGIFactory4, pDevice: *mut IUnknown, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub GetCreationFlags : extern "system" fn (This: *mut IDXGIFactory4) -> UINT,
  pub EnumAdapterByLuid : extern "system" fn (This: *mut IDXGIFactory4, AdapterLuid: LUID, riid: REFGUID, ppvAdapter: *mut *mut c_void) -> HRESULT,
  pub EnumWarpAdapter : extern "system" fn (This: *mut IDXGIFactory4, riid: REFGUID, ppvAdapter: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactoryMedia {
  pub lpVtbl : *mut IDXGIFactoryMediaVtbl,
}


impl fmt::Debug for IDXGIFactoryMedia {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIFactoryMedia ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactoryMediaVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactoryMedia, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactoryMedia) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactoryMedia) -> ULONG,
  pub CreateSwapChainForCompositionSurfaceHandle : extern "system" fn (This: *mut IDXGIFactoryMedia, pDevice: *mut IUnknown, hSurface: HANDLE, pDesc: *const DXGI_SWAP_CHAIN_DESC1, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGISwapChain1) -> HRESULT,
  pub CreateDecodeSwapChainForCompositionSurfaceHandle : extern "system" fn (This: *mut IDXGIFactoryMedia, pDevice: *mut IUnknown, hSurface: HANDLE, pDesc: *mut DXGI_DECODE_SWAP_CHAIN_DESC, pYuvDecodeBuffers: *mut IDXGIResource, pRestrictToOutput: *mut IDXGIOutput, ppSwapChain: *mut *mut IDXGIDecodeSwapChain) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIFactoryVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIFactory, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIFactory) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIFactory) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIFactory, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIFactory, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIFactory, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIFactory, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub EnumAdapters : extern "system" fn (This: *mut IDXGIFactory, Adapter: UINT, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
  pub MakeWindowAssociation : extern "system" fn (This: *mut IDXGIFactory, WindowHandle: HWND, Flags: UINT) -> HRESULT,
  pub GetWindowAssociation : extern "system" fn (This: *mut IDXGIFactory, pWindowHandle: *mut HWND) -> HRESULT,
  pub CreateSwapChain : extern "system" fn (This: *mut IDXGIFactory, pDevice: *mut IUnknown, pDesc: *mut DXGI_SWAP_CHAIN_DESC, ppSwapChain: *mut *mut IDXGISwapChain) -> HRESULT,
  pub CreateSoftwareAdapter : extern "system" fn (This: *mut IDXGIFactory, Module: HMODULE, ppAdapter: *mut *mut IDXGIAdapter) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIKeyedMutex {
  pub lpVtbl : *mut IDXGIKeyedMutexVtbl,
}


impl fmt::Debug for IDXGIKeyedMutex {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIKeyedMutex ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIKeyedMutexVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIKeyedMutex, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIKeyedMutex) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIKeyedMutex) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIKeyedMutex, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIKeyedMutex, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIKeyedMutex, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIKeyedMutex, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGIKeyedMutex, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub AcquireSync : extern "system" fn (This: *mut IDXGIKeyedMutex, Key: UINT64, dwMilliseconds: DWORD) -> HRESULT,
  pub ReleaseSync : extern "system" fn (This: *mut IDXGIKeyedMutex, Key: UINT64) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIObject {
  pub lpVtbl : *mut IDXGIObjectVtbl,
}


impl fmt::Debug for IDXGIObject {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIObject ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIObjectVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIObject, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIObject) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIObject) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIObject, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIObject, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIObject, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIObject, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput {
  pub lpVtbl : *mut IDXGIOutputVtbl,
}


impl fmt::Debug for IDXGIOutput {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutput ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput1 {
  pub lpVtbl : *mut IDXGIOutput1Vtbl,
}


impl fmt::Debug for IDXGIOutput1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutput1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutput1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutput1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutput1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutput1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutput1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutput1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutput1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutput1, pDesc: *mut DXGI_OUTPUT_DESC) -> HRESULT,
  pub GetDisplayModeList : extern "system" fn (This: *mut IDXGIOutput1, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC) -> HRESULT,
  pub FindClosestMatchingMode : extern "system" fn (This: *mut IDXGIOutput1, pModeToMatch: *const DXGI_MODE_DESC, pClosestMatch: *mut DXGI_MODE_DESC, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub WaitForVBlank : extern "system" fn (This: *mut IDXGIOutput1) -> HRESULT,
  pub TakeOwnership : extern "system" fn (This: *mut IDXGIOutput1, pDevice: *mut IUnknown, Exclusive: BOOL) -> HRESULT,
  pub ReleaseOwnership : extern "system" fn (This: *mut IDXGIOutput1) -> (),
  pub GetGammaControlCapabilities : extern "system" fn (This: *mut IDXGIOutput1, pGammaCaps: *mut DXGI_GAMMA_CONTROL_CAPABILITIES) -> HRESULT,
  pub SetGammaControl : extern "system" fn (This: *mut IDXGIOutput1, pArray: *const DXGI_GAMMA_CONTROL) -> HRESULT,
  pub GetGammaControl : extern "system" fn (This: *mut IDXGIOutput1, pArray: *mut DXGI_GAMMA_CONTROL) -> HRESULT,
  pub SetDisplaySurface : extern "system" fn (This: *mut IDXGIOutput1, pScanoutSurface: *mut IDXGISurface) -> HRESULT,
  pub GetDisplaySurfaceData : extern "system" fn (This: *mut IDXGIOutput1, pDestination: *mut IDXGISurface) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGIOutput1, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetDisplayModeList1 : extern "system" fn (This: *mut IDXGIOutput1, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC1) -> HRESULT,
  pub FindClosestMatchingMode1 : extern "system" fn (This: *mut IDXGIOutput1, pModeToMatch: *const DXGI_MODE_DESC1, pClosestMatch: *mut DXGI_MODE_DESC1, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub GetDisplaySurfaceData1 : extern "system" fn (This: *mut IDXGIOutput1, pDestination: *mut IDXGIResource) -> HRESULT,
  pub DuplicateOutput : extern "system" fn (This: *mut IDXGIOutput1, pDevice: *mut IUnknown, ppOutputDuplication: *mut *mut IDXGIOutputDuplication) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput2 {
  pub lpVtbl : *mut IDXGIOutput2Vtbl,
}


impl fmt::Debug for IDXGIOutput2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutput2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutput2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutput2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutput2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutput2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutput2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutput2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutput2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutput2, pDesc: *mut DXGI_OUTPUT_DESC) -> HRESULT,
  pub GetDisplayModeList : extern "system" fn (This: *mut IDXGIOutput2, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC) -> HRESULT,
  pub FindClosestMatchingMode : extern "system" fn (This: *mut IDXGIOutput2, pModeToMatch: *const DXGI_MODE_DESC, pClosestMatch: *mut DXGI_MODE_DESC, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub WaitForVBlank : extern "system" fn (This: *mut IDXGIOutput2) -> HRESULT,
  pub TakeOwnership : extern "system" fn (This: *mut IDXGIOutput2, pDevice: *mut IUnknown, Exclusive: BOOL) -> HRESULT,
  pub ReleaseOwnership : extern "system" fn (This: *mut IDXGIOutput2) -> (),
  pub GetGammaControlCapabilities : extern "system" fn (This: *mut IDXGIOutput2, pGammaCaps: *mut DXGI_GAMMA_CONTROL_CAPABILITIES) -> HRESULT,
  pub SetGammaControl : extern "system" fn (This: *mut IDXGIOutput2, pArray: *const DXGI_GAMMA_CONTROL) -> HRESULT,
  pub GetGammaControl : extern "system" fn (This: *mut IDXGIOutput2, pArray: *mut DXGI_GAMMA_CONTROL) -> HRESULT,
  pub SetDisplaySurface : extern "system" fn (This: *mut IDXGIOutput2, pScanoutSurface: *mut IDXGISurface) -> HRESULT,
  pub GetDisplaySurfaceData : extern "system" fn (This: *mut IDXGIOutput2, pDestination: *mut IDXGISurface) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGIOutput2, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetDisplayModeList1 : extern "system" fn (This: *mut IDXGIOutput2, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC1) -> HRESULT,
  pub FindClosestMatchingMode1 : extern "system" fn (This: *mut IDXGIOutput2, pModeToMatch: *const DXGI_MODE_DESC1, pClosestMatch: *mut DXGI_MODE_DESC1, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub GetDisplaySurfaceData1 : extern "system" fn (This: *mut IDXGIOutput2, pDestination: *mut IDXGIResource) -> HRESULT,
  pub DuplicateOutput : extern "system" fn (This: *mut IDXGIOutput2, pDevice: *mut IUnknown, ppOutputDuplication: *mut *mut IDXGIOutputDuplication) -> HRESULT,
  pub SupportsOverlays : extern "system" fn (This: *mut IDXGIOutput2) -> BOOL,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput3 {
  pub lpVtbl : *mut IDXGIOutput3Vtbl,
}


impl fmt::Debug for IDXGIOutput3 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutput3 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput3Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutput3, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutput3) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutput3) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutput3, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutput3, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutput3, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutput3, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutput3, pDesc: *mut DXGI_OUTPUT_DESC) -> HRESULT,
  pub GetDisplayModeList : extern "system" fn (This: *mut IDXGIOutput3, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC) -> HRESULT,
  pub FindClosestMatchingMode : extern "system" fn (This: *mut IDXGIOutput3, pModeToMatch: *const DXGI_MODE_DESC, pClosestMatch: *mut DXGI_MODE_DESC, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub WaitForVBlank : extern "system" fn (This: *mut IDXGIOutput3) -> HRESULT,
  pub TakeOwnership : extern "system" fn (This: *mut IDXGIOutput3, pDevice: *mut IUnknown, Exclusive: BOOL) -> HRESULT,
  pub ReleaseOwnership : extern "system" fn (This: *mut IDXGIOutput3) -> (),
  pub GetGammaControlCapabilities : extern "system" fn (This: *mut IDXGIOutput3, pGammaCaps: *mut DXGI_GAMMA_CONTROL_CAPABILITIES) -> HRESULT,
  pub SetGammaControl : extern "system" fn (This: *mut IDXGIOutput3, pArray: *const DXGI_GAMMA_CONTROL) -> HRESULT,
  pub GetGammaControl : extern "system" fn (This: *mut IDXGIOutput3, pArray: *mut DXGI_GAMMA_CONTROL) -> HRESULT,
  pub SetDisplaySurface : extern "system" fn (This: *mut IDXGIOutput3, pScanoutSurface: *mut IDXGISurface) -> HRESULT,
  pub GetDisplaySurfaceData : extern "system" fn (This: *mut IDXGIOutput3, pDestination: *mut IDXGISurface) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGIOutput3, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetDisplayModeList1 : extern "system" fn (This: *mut IDXGIOutput3, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC1) -> HRESULT,
  pub FindClosestMatchingMode1 : extern "system" fn (This: *mut IDXGIOutput3, pModeToMatch: *const DXGI_MODE_DESC1, pClosestMatch: *mut DXGI_MODE_DESC1, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub GetDisplaySurfaceData1 : extern "system" fn (This: *mut IDXGIOutput3, pDestination: *mut IDXGIResource) -> HRESULT,
  pub DuplicateOutput : extern "system" fn (This: *mut IDXGIOutput3, pDevice: *mut IUnknown, ppOutputDuplication: *mut *mut IDXGIOutputDuplication) -> HRESULT,
  pub SupportsOverlays : extern "system" fn (This: *mut IDXGIOutput3) -> BOOL,
  pub CheckOverlaySupport : extern "system" fn (This: *mut IDXGIOutput3, EnumFormat: DXGI_FORMAT, pConcernedDevice: *mut IUnknown, pFlags: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput4 {
  pub lpVtbl : *mut IDXGIOutput4Vtbl,
}


impl fmt::Debug for IDXGIOutput4 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutput4 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutput4Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutput4, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutput4) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutput4) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutput4, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutput4, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutput4, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutput4, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutput4, pDesc: *mut DXGI_OUTPUT_DESC) -> HRESULT,
  pub GetDisplayModeList : extern "system" fn (This: *mut IDXGIOutput4, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC) -> HRESULT,
  pub FindClosestMatchingMode : extern "system" fn (This: *mut IDXGIOutput4, pModeToMatch: *const DXGI_MODE_DESC, pClosestMatch: *mut DXGI_MODE_DESC, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub WaitForVBlank : extern "system" fn (This: *mut IDXGIOutput4) -> HRESULT,
  pub TakeOwnership : extern "system" fn (This: *mut IDXGIOutput4, pDevice: *mut IUnknown, Exclusive: BOOL) -> HRESULT,
  pub ReleaseOwnership : extern "system" fn (This: *mut IDXGIOutput4) -> (),
  pub GetGammaControlCapabilities : extern "system" fn (This: *mut IDXGIOutput4, pGammaCaps: *mut DXGI_GAMMA_CONTROL_CAPABILITIES) -> HRESULT,
  pub SetGammaControl : extern "system" fn (This: *mut IDXGIOutput4, pArray: *const DXGI_GAMMA_CONTROL) -> HRESULT,
  pub GetGammaControl : extern "system" fn (This: *mut IDXGIOutput4, pArray: *mut DXGI_GAMMA_CONTROL) -> HRESULT,
  pub SetDisplaySurface : extern "system" fn (This: *mut IDXGIOutput4, pScanoutSurface: *mut IDXGISurface) -> HRESULT,
  pub GetDisplaySurfaceData : extern "system" fn (This: *mut IDXGIOutput4, pDestination: *mut IDXGISurface) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGIOutput4, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetDisplayModeList1 : extern "system" fn (This: *mut IDXGIOutput4, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC1) -> HRESULT,
  pub FindClosestMatchingMode1 : extern "system" fn (This: *mut IDXGIOutput4, pModeToMatch: *const DXGI_MODE_DESC1, pClosestMatch: *mut DXGI_MODE_DESC1, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub GetDisplaySurfaceData1 : extern "system" fn (This: *mut IDXGIOutput4, pDestination: *mut IDXGIResource) -> HRESULT,
  pub DuplicateOutput : extern "system" fn (This: *mut IDXGIOutput4, pDevice: *mut IUnknown, ppOutputDuplication: *mut *mut IDXGIOutputDuplication) -> HRESULT,
  pub SupportsOverlays : extern "system" fn (This: *mut IDXGIOutput4) -> BOOL,
  pub CheckOverlaySupport : extern "system" fn (This: *mut IDXGIOutput4, EnumFormat: DXGI_FORMAT, pConcernedDevice: *mut IUnknown, pFlags: *mut UINT) -> HRESULT,
  pub CheckOverlayColorSpaceSupport : extern "system" fn (This: *mut IDXGIOutput4, Format: DXGI_FORMAT, ColorSpace: DXGI_COLOR_SPACE_TYPE, pConcernedDevice: *mut IUnknown, pFlags: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutputDuplication {
  pub lpVtbl : *mut IDXGIOutputDuplicationVtbl,
}


impl fmt::Debug for IDXGIOutputDuplication {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIOutputDuplication ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutputDuplicationVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutputDuplication, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutputDuplication) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutputDuplication) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutputDuplication, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutputDuplication, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutputDuplication, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutputDuplication, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutputDuplication, pDesc: *mut DXGI_OUTDUPL_DESC) -> (),
  pub AcquireNextFrame : extern "system" fn (This: *mut IDXGIOutputDuplication, TimeoutInMilliseconds: UINT, pFrameInfo: *mut DXGI_OUTDUPL_FRAME_INFO, ppDesktopResource: *mut *mut IDXGIResource) -> HRESULT,
  pub GetFrameDirtyRects : extern "system" fn (This: *mut IDXGIOutputDuplication, DirtyRectsBufferSize: UINT, pDirtyRectsBuffer: *mut RECT, pDirtyRectsBufferSizeRequired: *mut UINT) -> HRESULT,
  pub GetFrameMoveRects : extern "system" fn (This: *mut IDXGIOutputDuplication, MoveRectsBufferSize: UINT, pMoveRectBuffer: *mut DXGI_OUTDUPL_MOVE_RECT, pMoveRectsBufferSizeRequired: *mut UINT) -> HRESULT,
  pub GetFramePointerShape : extern "system" fn (This: *mut IDXGIOutputDuplication, PointerShapeBufferSize: UINT, pPointerShapeBuffer: *mut c_void, pPointerShapeBufferSizeRequired: *mut UINT, pPointerShapeInfo: *mut DXGI_OUTDUPL_POINTER_SHAPE_INFO) -> HRESULT,
  pub MapDesktopSurface : extern "system" fn (This: *mut IDXGIOutputDuplication, pLockedRect: *mut DXGI_MAPPED_RECT) -> HRESULT,
  pub UnMapDesktopSurface : extern "system" fn (This: *mut IDXGIOutputDuplication) -> HRESULT,
  pub ReleaseFrame : extern "system" fn (This: *mut IDXGIOutputDuplication) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIOutputVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIOutput, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIOutput) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIOutput) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIOutput, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIOutput, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIOutput, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIOutput, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGIOutput, pDesc: *mut DXGI_OUTPUT_DESC) -> HRESULT,
  pub GetDisplayModeList : extern "system" fn (This: *mut IDXGIOutput, EnumFormat: DXGI_FORMAT, Flags: UINT, pNumModes: *mut UINT, pDesc: *mut DXGI_MODE_DESC) -> HRESULT,
  pub FindClosestMatchingMode : extern "system" fn (This: *mut IDXGIOutput, pModeToMatch: *const DXGI_MODE_DESC, pClosestMatch: *mut DXGI_MODE_DESC, pConcernedDevice: *mut IUnknown) -> HRESULT,
  pub WaitForVBlank : extern "system" fn (This: *mut IDXGIOutput) -> HRESULT,
  pub TakeOwnership : extern "system" fn (This: *mut IDXGIOutput, pDevice: *mut IUnknown, Exclusive: BOOL) -> HRESULT,
  pub ReleaseOwnership : extern "system" fn (This: *mut IDXGIOutput) -> (),
  pub GetGammaControlCapabilities : extern "system" fn (This: *mut IDXGIOutput, pGammaCaps: *mut DXGI_GAMMA_CONTROL_CAPABILITIES) -> HRESULT,
  pub SetGammaControl : extern "system" fn (This: *mut IDXGIOutput, pArray: *const DXGI_GAMMA_CONTROL) -> HRESULT,
  pub GetGammaControl : extern "system" fn (This: *mut IDXGIOutput, pArray: *mut DXGI_GAMMA_CONTROL) -> HRESULT,
  pub SetDisplaySurface : extern "system" fn (This: *mut IDXGIOutput, pScanoutSurface: *mut IDXGISurface) -> HRESULT,
  pub GetDisplaySurfaceData : extern "system" fn (This: *mut IDXGIOutput, pDestination: *mut IDXGISurface) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGIOutput, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIResource {
  pub lpVtbl : *mut IDXGIResourceVtbl,
}


impl fmt::Debug for IDXGIResource {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIResource ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIResource1 {
  pub lpVtbl : *mut IDXGIResource1Vtbl,
}


impl fmt::Debug for IDXGIResource1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGIResource1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIResource1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIResource1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIResource1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIResource1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIResource1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIResource1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIResource1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIResource1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGIResource1, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub GetSharedHandle : extern "system" fn (This: *mut IDXGIResource1, pSharedHandle: *mut HANDLE) -> HRESULT,
  pub GetUsage : extern "system" fn (This: *mut IDXGIResource1, pUsage: *mut DXGI_USAGE) -> HRESULT,
  pub SetEvictionPriority : extern "system" fn (This: *mut IDXGIResource1, EvictionPriority: UINT) -> HRESULT,
  pub GetEvictionPriority : extern "system" fn (This: *mut IDXGIResource1, pEvictionPriority: *mut UINT) -> HRESULT,
  pub CreateSubresourceSurface : extern "system" fn (This: *mut IDXGIResource1, index: UINT, ppSurface: *mut *mut IDXGISurface2) -> HRESULT,
  pub CreateSharedHandle : extern "system" fn (This: *mut IDXGIResource1, pAttributes: *const SECURITY_ATTRIBUTES, dwAccess: DWORD, lpName: LPCWSTR, pHandle: *mut HANDLE) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGIResourceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGIResource, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGIResource) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGIResource) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGIResource, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGIResource, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGIResource, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGIResource, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGIResource, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub GetSharedHandle : extern "system" fn (This: *mut IDXGIResource, pSharedHandle: *mut HANDLE) -> HRESULT,
  pub GetUsage : extern "system" fn (This: *mut IDXGIResource, pUsage: *mut DXGI_USAGE) -> HRESULT,
  pub SetEvictionPriority : extern "system" fn (This: *mut IDXGIResource, EvictionPriority: UINT) -> HRESULT,
  pub GetEvictionPriority : extern "system" fn (This: *mut IDXGIResource, pEvictionPriority: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurface {
  pub lpVtbl : *mut IDXGISurfaceVtbl,
}


impl fmt::Debug for IDXGISurface {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISurface ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurface1 {
  pub lpVtbl : *mut IDXGISurface1Vtbl,
}


impl fmt::Debug for IDXGISurface1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISurface1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurface1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISurface1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISurface1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISurface1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISurface1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISurface1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISurface1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISurface1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISurface1, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISurface1, pDesc: *mut DXGI_SURFACE_DESC) -> HRESULT,
  pub Map : extern "system" fn (This: *mut IDXGISurface1, pLockedRect: *mut DXGI_MAPPED_RECT, MapFlags: UINT) -> HRESULT,
  pub Unmap : extern "system" fn (This: *mut IDXGISurface1) -> HRESULT,
  pub GetDC : extern "system" fn (This: *mut IDXGISurface1, Discard: BOOL, phdc: *mut HDC) -> HRESULT,
  pub ReleaseDC : extern "system" fn (This: *mut IDXGISurface1, pDirtyRect: *mut RECT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurface2 {
  pub lpVtbl : *mut IDXGISurface2Vtbl,
}


impl fmt::Debug for IDXGISurface2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISurface2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurface2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISurface2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISurface2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISurface2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISurface2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISurface2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISurface2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISurface2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISurface2, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISurface2, pDesc: *mut DXGI_SURFACE_DESC) -> HRESULT,
  pub Map : extern "system" fn (This: *mut IDXGISurface2, pLockedRect: *mut DXGI_MAPPED_RECT, MapFlags: UINT) -> HRESULT,
  pub Unmap : extern "system" fn (This: *mut IDXGISurface2) -> HRESULT,
  pub GetDC : extern "system" fn (This: *mut IDXGISurface2, Discard: BOOL, phdc: *mut HDC) -> HRESULT,
  pub ReleaseDC : extern "system" fn (This: *mut IDXGISurface2, pDirtyRect: *mut RECT) -> HRESULT,
  pub GetResource : extern "system" fn (This: *mut IDXGISurface2, riid: REFGUID, ppParentResource: *mut *mut c_void, pSubresourceIndex: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISurfaceVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISurface, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISurface) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISurface) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISurface, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISurface, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISurface, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISurface, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISurface, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISurface, pDesc: *mut DXGI_SURFACE_DESC) -> HRESULT,
  pub Map : extern "system" fn (This: *mut IDXGISurface, pLockedRect: *mut DXGI_MAPPED_RECT, MapFlags: UINT) -> HRESULT,
  pub Unmap : extern "system" fn (This: *mut IDXGISurface) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain {
  pub lpVtbl : *mut IDXGISwapChainVtbl,
}


impl fmt::Debug for IDXGISwapChain {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISwapChain ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain1 {
  pub lpVtbl : *mut IDXGISwapChain1Vtbl,
}


impl fmt::Debug for IDXGISwapChain1 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISwapChain1 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain1Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISwapChain1, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISwapChain1) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISwapChain1) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISwapChain1, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISwapChain1, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISwapChain1, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISwapChain1, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISwapChain1, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub Present : extern "system" fn (This: *mut IDXGISwapChain1, SyncInterval: UINT, Flags: UINT) -> HRESULT,
  pub GetBuffer : extern "system" fn (This: *mut IDXGISwapChain1, Buffer: UINT, riid: REFGUID, ppSurface: *mut *mut c_void) -> HRESULT,
  pub SetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain1, Fullscreen: BOOL, pTarget: *mut IDXGIOutput) -> HRESULT,
  pub GetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain1, pFullscreen: *mut BOOL, ppTarget: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISwapChain1, pDesc: *mut DXGI_SWAP_CHAIN_DESC) -> HRESULT,
  pub ResizeBuffers : extern "system" fn (This: *mut IDXGISwapChain1, BufferCount: UINT, Width: UINT, Height: UINT, NewFormat: DXGI_FORMAT, SwapChainFlags: UINT) -> HRESULT,
  pub ResizeTarget : extern "system" fn (This: *mut IDXGISwapChain1, pNewTargetParameters: *const DXGI_MODE_DESC) -> HRESULT,
  pub GetContainingOutput : extern "system" fn (This: *mut IDXGISwapChain1, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGISwapChain1, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetLastPresentCount : extern "system" fn (This: *mut IDXGISwapChain1, pLastPresentCount: *mut UINT) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGISwapChain1, pDesc: *mut DXGI_SWAP_CHAIN_DESC1) -> HRESULT,
  pub GetFullscreenDesc : extern "system" fn (This: *mut IDXGISwapChain1, pDesc: *mut DXGI_SWAP_CHAIN_FULLSCREEN_DESC) -> HRESULT,
  pub GetHwnd : extern "system" fn (This: *mut IDXGISwapChain1, pHwnd: *mut HWND) -> HRESULT,
  pub GetCoreWindow : extern "system" fn (This: *mut IDXGISwapChain1, refiid: REFGUID, ppUnk: *mut *mut c_void) -> HRESULT,
  pub Present1 : extern "system" fn (This: *mut IDXGISwapChain1, SyncInterval: UINT, PresentFlags: UINT, pPresentParameters: *const DXGI_PRESENT_PARAMETERS) -> HRESULT,
  pub IsTemporaryMonoSupported : extern "system" fn (This: *mut IDXGISwapChain1) -> BOOL,
  pub GetRestrictToOutput : extern "system" fn (This: *mut IDXGISwapChain1, ppRestrictToOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub SetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain1, pColor: *const DXGI_RGBA) -> HRESULT,
  pub GetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain1, pColor: *mut DXGI_RGBA) -> HRESULT,
  pub SetRotation : extern "system" fn (This: *mut IDXGISwapChain1, Rotation: DXGI_MODE_ROTATION) -> HRESULT,
  pub GetRotation : extern "system" fn (This: *mut IDXGISwapChain1, pRotation: *mut DXGI_MODE_ROTATION) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain2 {
  pub lpVtbl : *mut IDXGISwapChain2Vtbl,
}


impl fmt::Debug for IDXGISwapChain2 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISwapChain2 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain2Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISwapChain2, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISwapChain2) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISwapChain2) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISwapChain2, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISwapChain2, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISwapChain2, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISwapChain2, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISwapChain2, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub Present : extern "system" fn (This: *mut IDXGISwapChain2, SyncInterval: UINT, Flags: UINT) -> HRESULT,
  pub GetBuffer : extern "system" fn (This: *mut IDXGISwapChain2, Buffer: UINT, riid: REFGUID, ppSurface: *mut *mut c_void) -> HRESULT,
  pub SetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain2, Fullscreen: BOOL, pTarget: *mut IDXGIOutput) -> HRESULT,
  pub GetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain2, pFullscreen: *mut BOOL, ppTarget: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISwapChain2, pDesc: *mut DXGI_SWAP_CHAIN_DESC) -> HRESULT,
  pub ResizeBuffers : extern "system" fn (This: *mut IDXGISwapChain2, BufferCount: UINT, Width: UINT, Height: UINT, NewFormat: DXGI_FORMAT, SwapChainFlags: UINT) -> HRESULT,
  pub ResizeTarget : extern "system" fn (This: *mut IDXGISwapChain2, pNewTargetParameters: *const DXGI_MODE_DESC) -> HRESULT,
  pub GetContainingOutput : extern "system" fn (This: *mut IDXGISwapChain2, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGISwapChain2, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetLastPresentCount : extern "system" fn (This: *mut IDXGISwapChain2, pLastPresentCount: *mut UINT) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGISwapChain2, pDesc: *mut DXGI_SWAP_CHAIN_DESC1) -> HRESULT,
  pub GetFullscreenDesc : extern "system" fn (This: *mut IDXGISwapChain2, pDesc: *mut DXGI_SWAP_CHAIN_FULLSCREEN_DESC) -> HRESULT,
  pub GetHwnd : extern "system" fn (This: *mut IDXGISwapChain2, pHwnd: *mut HWND) -> HRESULT,
  pub GetCoreWindow : extern "system" fn (This: *mut IDXGISwapChain2, refiid: REFGUID, ppUnk: *mut *mut c_void) -> HRESULT,
  pub Present1 : extern "system" fn (This: *mut IDXGISwapChain2, SyncInterval: UINT, PresentFlags: UINT, pPresentParameters: *const DXGI_PRESENT_PARAMETERS) -> HRESULT,
  pub IsTemporaryMonoSupported : extern "system" fn (This: *mut IDXGISwapChain2) -> BOOL,
  pub GetRestrictToOutput : extern "system" fn (This: *mut IDXGISwapChain2, ppRestrictToOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub SetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain2, pColor: *const DXGI_RGBA) -> HRESULT,
  pub GetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain2, pColor: *mut DXGI_RGBA) -> HRESULT,
  pub SetRotation : extern "system" fn (This: *mut IDXGISwapChain2, Rotation: DXGI_MODE_ROTATION) -> HRESULT,
  pub GetRotation : extern "system" fn (This: *mut IDXGISwapChain2, pRotation: *mut DXGI_MODE_ROTATION) -> HRESULT,
  pub SetSourceSize : extern "system" fn (This: *mut IDXGISwapChain2, Width: UINT, Height: UINT) -> HRESULT,
  pub GetSourceSize : extern "system" fn (This: *mut IDXGISwapChain2, pWidth: *mut UINT, pHeight: *mut UINT) -> HRESULT,
  pub SetMaximumFrameLatency : extern "system" fn (This: *mut IDXGISwapChain2, MaxLatency: UINT) -> HRESULT,
  pub GetMaximumFrameLatency : extern "system" fn (This: *mut IDXGISwapChain2, pMaxLatency: *mut UINT) -> HRESULT,
  pub GetFrameLatencyWaitableObject : extern "system" fn (This: *mut IDXGISwapChain2) -> HANDLE,
  pub SetMatrixTransform : extern "system" fn (This: *mut IDXGISwapChain2, pMatrix: *const DXGI_MATRIX_3X2_F) -> HRESULT,
  pub GetMatrixTransform : extern "system" fn (This: *mut IDXGISwapChain2, pMatrix: *mut DXGI_MATRIX_3X2_F) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain3 {
  pub lpVtbl : *mut IDXGISwapChain3Vtbl,
}


impl fmt::Debug for IDXGISwapChain3 {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISwapChain3 ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChain3Vtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISwapChain3, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISwapChain3) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISwapChain3) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISwapChain3, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISwapChain3, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISwapChain3, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISwapChain3, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISwapChain3, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub Present : extern "system" fn (This: *mut IDXGISwapChain3, SyncInterval: UINT, Flags: UINT) -> HRESULT,
  pub GetBuffer : extern "system" fn (This: *mut IDXGISwapChain3, Buffer: UINT, riid: REFGUID, ppSurface: *mut *mut c_void) -> HRESULT,
  pub SetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain3, Fullscreen: BOOL, pTarget: *mut IDXGIOutput) -> HRESULT,
  pub GetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain3, pFullscreen: *mut BOOL, ppTarget: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISwapChain3, pDesc: *mut DXGI_SWAP_CHAIN_DESC) -> HRESULT,
  pub ResizeBuffers : extern "system" fn (This: *mut IDXGISwapChain3, BufferCount: UINT, Width: UINT, Height: UINT, NewFormat: DXGI_FORMAT, SwapChainFlags: UINT) -> HRESULT,
  pub ResizeTarget : extern "system" fn (This: *mut IDXGISwapChain3, pNewTargetParameters: *const DXGI_MODE_DESC) -> HRESULT,
  pub GetContainingOutput : extern "system" fn (This: *mut IDXGISwapChain3, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGISwapChain3, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetLastPresentCount : extern "system" fn (This: *mut IDXGISwapChain3, pLastPresentCount: *mut UINT) -> HRESULT,
  pub GetDesc1 : extern "system" fn (This: *mut IDXGISwapChain3, pDesc: *mut DXGI_SWAP_CHAIN_DESC1) -> HRESULT,
  pub GetFullscreenDesc : extern "system" fn (This: *mut IDXGISwapChain3, pDesc: *mut DXGI_SWAP_CHAIN_FULLSCREEN_DESC) -> HRESULT,
  pub GetHwnd : extern "system" fn (This: *mut IDXGISwapChain3, pHwnd: *mut HWND) -> HRESULT,
  pub GetCoreWindow : extern "system" fn (This: *mut IDXGISwapChain3, refiid: REFGUID, ppUnk: *mut *mut c_void) -> HRESULT,
  pub Present1 : extern "system" fn (This: *mut IDXGISwapChain3, SyncInterval: UINT, PresentFlags: UINT, pPresentParameters: *const DXGI_PRESENT_PARAMETERS) -> HRESULT,
  pub IsTemporaryMonoSupported : extern "system" fn (This: *mut IDXGISwapChain3) -> BOOL,
  pub GetRestrictToOutput : extern "system" fn (This: *mut IDXGISwapChain3, ppRestrictToOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub SetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain3, pColor: *const DXGI_RGBA) -> HRESULT,
  pub GetBackgroundColor : extern "system" fn (This: *mut IDXGISwapChain3, pColor: *mut DXGI_RGBA) -> HRESULT,
  pub SetRotation : extern "system" fn (This: *mut IDXGISwapChain3, Rotation: DXGI_MODE_ROTATION) -> HRESULT,
  pub GetRotation : extern "system" fn (This: *mut IDXGISwapChain3, pRotation: *mut DXGI_MODE_ROTATION) -> HRESULT,
  pub SetSourceSize : extern "system" fn (This: *mut IDXGISwapChain3, Width: UINT, Height: UINT) -> HRESULT,
  pub GetSourceSize : extern "system" fn (This: *mut IDXGISwapChain3, pWidth: *mut UINT, pHeight: *mut UINT) -> HRESULT,
  pub SetMaximumFrameLatency : extern "system" fn (This: *mut IDXGISwapChain3, MaxLatency: UINT) -> HRESULT,
  pub GetMaximumFrameLatency : extern "system" fn (This: *mut IDXGISwapChain3, pMaxLatency: *mut UINT) -> HRESULT,
  pub GetFrameLatencyWaitableObject : extern "system" fn (This: *mut IDXGISwapChain3) -> HANDLE,
  pub SetMatrixTransform : extern "system" fn (This: *mut IDXGISwapChain3, pMatrix: *const DXGI_MATRIX_3X2_F) -> HRESULT,
  pub GetMatrixTransform : extern "system" fn (This: *mut IDXGISwapChain3, pMatrix: *mut DXGI_MATRIX_3X2_F) -> HRESULT,
  pub GetCurrentBackBufferIndex : extern "system" fn (This: *mut IDXGISwapChain3) -> UINT,
  pub CheckColorSpaceSupport : extern "system" fn (This: *mut IDXGISwapChain3, ColorSpace: DXGI_COLOR_SPACE_TYPE, pColorSpaceSupport: *mut UINT) -> HRESULT,
  pub SetColorSpace1 : extern "system" fn (This: *mut IDXGISwapChain3, ColorSpace: DXGI_COLOR_SPACE_TYPE) -> HRESULT,
  pub ResizeBuffers1 : extern "system" fn (This: *mut IDXGISwapChain3, BufferCount: UINT, Width: UINT, Height: UINT, Format: DXGI_FORMAT, SwapChainFlags: UINT, pCreationNodeMask: *const UINT, ppPresentQueue: *mut *mut IUnknown) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChainMedia {
  pub lpVtbl : *mut IDXGISwapChainMediaVtbl,
}


impl fmt::Debug for IDXGISwapChainMedia {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct IDXGISwapChainMedia ")};
    try!{writeln!(f,"  lpVtbl: {:?}", self.lpVtbl)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChainMediaVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISwapChainMedia, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISwapChainMedia) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISwapChainMedia) -> ULONG,
  pub GetFrameStatisticsMedia : extern "system" fn (This: *mut IDXGISwapChainMedia, pStats: *mut DXGI_FRAME_STATISTICS_MEDIA) -> HRESULT,
  pub SetPresentDuration : extern "system" fn (This: *mut IDXGISwapChainMedia, Duration: UINT) -> HRESULT,
  pub CheckPresentDurationSupport : extern "system" fn (This: *mut IDXGISwapChainMedia, DesiredPresentDuration: UINT, pClosestSmallerPresentDuration: *mut UINT, pClosestLargerPresentDuration: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct IDXGISwapChainVtbl {
  pub QueryInterface : extern "system" fn (This: *mut IDXGISwapChain, riid: REFGUID, ppvObject: *mut *mut c_void) -> HRESULT,
  pub AddRef : extern "system" fn (This: *mut IDXGISwapChain) -> ULONG,
  pub Release : extern "system" fn (This: *mut IDXGISwapChain) -> ULONG,
  pub SetPrivateData : extern "system" fn (This: *mut IDXGISwapChain, Name: REFGUID, DataSize: UINT, pData: *const c_void) -> HRESULT,
  pub SetPrivateDataInterface : extern "system" fn (This: *mut IDXGISwapChain, Name: REFGUID, pUnknown: *const IUnknown) -> HRESULT,
  pub GetPrivateData : extern "system" fn (This: *mut IDXGISwapChain, Name: REFGUID, pDataSize: *mut UINT, pData: *mut c_void) -> HRESULT,
  pub GetParent : extern "system" fn (This: *mut IDXGISwapChain, riid: REFGUID, ppParent: *mut *mut c_void) -> HRESULT,
  pub GetDevice : extern "system" fn (This: *mut IDXGISwapChain, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT,
  pub Present : extern "system" fn (This: *mut IDXGISwapChain, SyncInterval: UINT, Flags: UINT) -> HRESULT,
  pub GetBuffer : extern "system" fn (This: *mut IDXGISwapChain, Buffer: UINT, riid: REFGUID, ppSurface: *mut *mut c_void) -> HRESULT,
  pub SetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain, Fullscreen: BOOL, pTarget: *mut IDXGIOutput) -> HRESULT,
  pub GetFullscreenState : extern "system" fn (This: *mut IDXGISwapChain, pFullscreen: *mut BOOL, ppTarget: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetDesc : extern "system" fn (This: *mut IDXGISwapChain, pDesc: *mut DXGI_SWAP_CHAIN_DESC) -> HRESULT,
  pub ResizeBuffers : extern "system" fn (This: *mut IDXGISwapChain, BufferCount: UINT, Width: UINT, Height: UINT, NewFormat: DXGI_FORMAT, SwapChainFlags: UINT) -> HRESULT,
  pub ResizeTarget : extern "system" fn (This: *mut IDXGISwapChain, pNewTargetParameters: *const DXGI_MODE_DESC) -> HRESULT,
  pub GetContainingOutput : extern "system" fn (This: *mut IDXGISwapChain, ppOutput: *mut *mut IDXGIOutput) -> HRESULT,
  pub GetFrameStatistics : extern "system" fn (This: *mut IDXGISwapChain, pStats: *mut DXGI_FRAME_STATISTICS) -> HRESULT,
  pub GetLastPresentCount : extern "system" fn (This: *mut IDXGISwapChain, pLastPresentCount: *mut UINT) -> HRESULT,
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct LUID {
  pub LowPart : DWORD,
  pub HighPart : LONG,
}


impl fmt::Debug for LUID {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct LUID ")};
    try!{writeln!(f,"  LowPart: {:?}", self.LowPart)};
    try!{writeln!(f,"  HighPart: {:?}", self.HighPart)};
    writeln!(f,"")
  }
}

#[allow(non_snake_case)]
#[repr(C)]
pub struct RECT {
  pub left : LONG,
  pub top : LONG,
  pub right : LONG,
  pub bottom : LONG,
}


impl fmt::Debug for RECT {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    try!{writeln!(f,"struct RECT ")};
    try!{writeln!(f,"  left: {:?}", self.left)};
    try!{writeln!(f,"  top: {:?}", self.top)};
    try!{writeln!(f,"  right: {:?}", self.right)};
    try!{writeln!(f,"  bottom: {:?}", self.bottom)};
    writeln!(f,"")
  }
}

extern {
  pub static IID_ID3D10Blob: IID;
  pub static IID_ID3D12CommandAllocator: IID;
  pub static IID_ID3D12CommandList: IID;
  pub static IID_ID3D12CommandQueue: IID;
  pub static IID_ID3D12CommandSignature: IID;
  pub static IID_ID3D12Debug: IID;
  pub static IID_ID3D12DebugCommandList: IID;
  pub static IID_ID3D12DebugCommandQueue: IID;
  pub static IID_ID3D12DebugDevice: IID;
  pub static IID_ID3D12DescriptorHeap: IID;
  pub static IID_ID3D12Device: IID;
  pub static IID_ID3D12DeviceChild: IID;
  pub static IID_ID3D12Fence: IID;
  pub static IID_ID3D12GraphicsCommandList: IID;
  pub static IID_ID3D12Heap: IID;
  pub static IID_ID3D12InfoQueue: IID;
  pub static IID_ID3D12Object: IID;
  pub static IID_ID3D12Pageable: IID;
  pub static IID_ID3D12PipelineState: IID;
  pub static IID_ID3D12QueryHeap: IID;
  pub static IID_ID3D12Resource: IID;
  pub static IID_ID3D12RootSignature: IID;
  pub static IID_ID3D12RootSignatureDeserializer: IID;
  pub static IID_IDXGIAdapter: IID;
  pub static IID_IDXGIAdapter1: IID;
  pub static IID_IDXGIAdapter2: IID;
  pub static IID_IDXGIAdapter3: IID;
  pub static IID_IDXGIDecodeSwapChain: IID;
  pub static IID_IDXGIDevice: IID;
  pub static IID_IDXGIDevice1: IID;
  pub static IID_IDXGIDevice2: IID;
  pub static IID_IDXGIDevice3: IID;
  pub static IID_IDXGIDeviceSubObject: IID;
  pub static IID_IDXGIDisplayControl: IID;
  pub static IID_IDXGIFactory: IID;
  pub static IID_IDXGIFactory1: IID;
  pub static IID_IDXGIFactory2: IID;
  pub static IID_IDXGIFactory3: IID;
  pub static IID_IDXGIFactory4: IID;
  pub static IID_IDXGIFactoryMedia: IID;
  pub static IID_IDXGIKeyedMutex: IID;
  pub static IID_IDXGIObject: IID;
  pub static IID_IDXGIOutput: IID;
  pub static IID_IDXGIOutput1: IID;
  pub static IID_IDXGIOutput2: IID;
  pub static IID_IDXGIOutput3: IID;
  pub static IID_IDXGIOutput4: IID;
  pub static IID_IDXGIOutputDuplication: IID;
  pub static IID_IDXGIResource: IID;
  pub static IID_IDXGIResource1: IID;
  pub static IID_IDXGISurface: IID;
  pub static IID_IDXGISurface1: IID;
  pub static IID_IDXGISurface2: IID;
  pub static IID_IDXGISwapChain: IID;
  pub static IID_IDXGISwapChain1: IID;
  pub static IID_IDXGISwapChain2: IID;
  pub static IID_IDXGISwapChain3: IID;
  pub static IID_IDXGISwapChainMedia: IID;
}

extern "system" { pub fn CreateDXGIFactory(riid: REFGUID, ppFactory: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn CreateDXGIFactory1(riid: REFGUID, ppFactory: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn CreateDXGIFactory2(Flags: UINT, riid: REFGUID, ppFactory: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn D3D12CreateDevice(pAdapter: *mut IUnknown, MinimumFeatureLevel: D3D_FEATURE_LEVEL, riid: REFGUID, ppDevice: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn D3D12CreateRootSignatureDeserializer(pSrcData: LPCVOID, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: REFGUID, ppRootSignatureDeserializer: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn D3D12GetDebugInterface(riid: REFGUID, ppvDebug: *mut *mut c_void) -> HRESULT; }
extern "system" { pub fn D3D12SerializeRootSignature(pRootSignature: *const D3D12_ROOT_SIGNATURE_DESC, Version: D3D_ROOT_SIGNATURE_VERSION, ppBlob: *mut *mut ID3DBlob, ppErrorBlob: *mut *mut ID3DBlob) -> HRESULT; }
extern "system" { pub fn DXGIGetDebugInterface1(Flags: UINT, riid: REFGUID, pDebug: *mut *mut c_void) -> HRESULT; }


