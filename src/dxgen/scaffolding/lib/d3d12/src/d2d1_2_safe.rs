// This file is autogenerated

use utils::*;

use d2d1_safe::*;
use d2d1_1_safe::*;
use dxgi_safe::*;
use dwrite_safe::*;
pub trait TD2D1Device1: TD2D1Device {
  //  Method GetRenderingPriority
  
  #[allow(non_snake_case)]
  fn get_rendering_priority(&self) -> D2D1_RENDERING_PRIORITY {
  
    let _hr=unsafe { (*(self.iptr() as *mut ID2D1Device1)).GetRenderingPriority() };
    _hr
  }
  
  //  Method SetRenderingPriority
  
  #[allow(non_snake_case)]
  fn set_rendering_priority(&self, renderingPriority: D2D1_RENDERING_PRIORITY) -> () {
  
    let _hr=unsafe { (*(self.iptr() as *mut ID2D1Device1)).SetRenderingPriority(renderingPriority) };
    ()
  }
  
  //  Method CreateDeviceContext
  
  #[allow(non_snake_case)]
  fn create_device_context1(&self, options: D2D1_DEVICE_CONTEXT_OPTIONS) -> HResult<D2D1DeviceContext1> {
    let mut lv1: *mut ID2D1DeviceContext1 = ptr::null_mut();
    let _hr=unsafe { (*(self.iptr() as *mut ID2D1Device1)).CreateDeviceContext(options, &mut lv1 as *mut *mut _) };
    hr2ret(_hr,D2D1DeviceContext1::new(lv1 as *mut _))
  }
  
  
}

impl TUnknown for D2D1Device1 {
  fn new(ptr: *mut IUnknown) -> Self {
    D2D1Device1(ptr as *mut _)
  }
  fn iptr(&self) -> *mut IUnknown {
    self.0 as *mut _
  }
}
impl Drop for D2D1Device1 {
  fn drop(&mut self) { drop_unknown(self) }
}
impl Clone for D2D1Device1 {
  fn clone(&self) -> Self { clone_unknown(self) }
}
impl TD2D1Resource for D2D1Device1 {}
impl TD2D1Device for D2D1Device1 {}
impl TD2D1Device1 for D2D1Device1 {}

pub struct D2D1Device1(*mut ID2D1Device1);

impl HasIID for D2D1Device1 {
  fn iid() -> REFGUID { &IID_ID2D1Device1 }
}

pub trait TD2D1DeviceContext1: TD2D1DeviceContext {
  //  Method CreateFilledGeometryRealization
  //  Error: geometryRealization parameter: ANone annotation cannot be used with double indirection
  //  Method CreateStrokedGeometryRealization
  //  Error: geometryRealization parameter: ANone annotation cannot be used with double indirection
  //  Method DrawGeometryRealization
  
  #[allow(non_snake_case)]
  fn draw_geometry_realization(&self, geometryRealization: &mut ID2D1GeometryRealization, brush: &mut ID2D1Brush) -> () {
  
    let _hr=unsafe { (*(self.iptr() as *mut ID2D1DeviceContext1)).DrawGeometryRealization(geometryRealization, brush) };
    ()
  }
  
  
}

impl TUnknown for D2D1DeviceContext1 {
  fn new(ptr: *mut IUnknown) -> Self {
    D2D1DeviceContext1(ptr as *mut _)
  }
  fn iptr(&self) -> *mut IUnknown {
    self.0 as *mut _
  }
}
impl Drop for D2D1DeviceContext1 {
  fn drop(&mut self) { drop_unknown(self) }
}
impl Clone for D2D1DeviceContext1 {
  fn clone(&self) -> Self { clone_unknown(self) }
}
impl TD2D1Resource for D2D1DeviceContext1 {}
impl TD2D1RenderTarget for D2D1DeviceContext1 {}
impl TD2D1DeviceContext for D2D1DeviceContext1 {}
impl TD2D1DeviceContext1 for D2D1DeviceContext1 {}

pub struct D2D1DeviceContext1(*mut ID2D1DeviceContext1);

impl HasIID for D2D1DeviceContext1 {
  fn iid() -> REFGUID { &IID_ID2D1DeviceContext1 }
}

pub trait TD2D1Factory2: TD2D1Factory1 {
  //  Method CreateDevice
  
  #[allow(non_snake_case)]
  fn create_device2<T: TDXGIDevice>(&self, dxgiDevice: &T) -> HResult<D2D1Device1> {
    let mut lv1: *mut ID2D1Device1 = ptr::null_mut();
    let _hr=unsafe { (*(self.iptr() as *mut ID2D1Factory2)).CreateDevice(dxgiDevice.iptr() as *mut _ as *mut _ , &mut lv1 as *mut *mut _) };
    hr2ret(_hr,D2D1Device1::new(lv1 as *mut _))
  }
  
  
}

impl TUnknown for D2D1Factory2 {
  fn new(ptr: *mut IUnknown) -> Self {
    D2D1Factory2(ptr as *mut _)
  }
  fn iptr(&self) -> *mut IUnknown {
    self.0 as *mut _
  }
}
impl Drop for D2D1Factory2 {
  fn drop(&mut self) { drop_unknown(self) }
}
impl Clone for D2D1Factory2 {
  fn clone(&self) -> Self { clone_unknown(self) }
}
impl TD2D1Factory for D2D1Factory2 {}
impl TD2D1Factory1 for D2D1Factory2 {}
impl TD2D1Factory2 for D2D1Factory2 {}

pub struct D2D1Factory2(*mut ID2D1Factory2);

impl HasIID for D2D1Factory2 {
  fn iid() -> REFGUID { &IID_ID2D1Factory2 }
}

