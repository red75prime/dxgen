// This file is autogenerated

use utils::*;
use d3d11_safe::*;

pub struct D3D11On12Device(*mut ID3D11On12Device);

impl HasIID for D3D11On12Device {
  fn iid() -> REFGUID { &IID_ID3D11On12Device }
  fn new(pp_vtbl : *mut IUnknown) -> Self { D3D11On12Device(pp_vtbl as *mut _ as *mut ID3D11On12Device) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}
impl Drop for D3D11On12Device {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for D3D11On12Device {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}



impl D3D11On12Device {
  //  Method CreateWrappedResource
  
  #[allow(non_snake_case)]
  pub fn create_wrapped_resource<T: HasIID, T1: HasIID>(&self, resource12: &T, flags11: &D3D11_RESOURCE_FLAGS, in_state: D3D12_RESOURCE_STATES, out_state: D3D12_RESOURCE_STATES) -> HResult<T1> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let _hr=unsafe { (*(self.0 as *mut ID3D11On12Device)).CreateWrappedResource(resource12.iptr() as *mut _ as *mut _ , flags11, in_state, out_state, T1::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(_hr,T1::new(lv1))
  }
  
  //  Method ReleaseWrappedResources
  
  #[allow(non_snake_case)]
  pub fn release_wrapped_resources<T: HasIID>(&self, resources: &[&T]) -> () {
    let mut lv1: Vec<*mut IUnknown> = resources.iter().map(|o|o.iptr()).collect();
    let _hr=unsafe { (*(self.0 as *mut ID3D11On12Device)).ReleaseWrappedResources(lv1.as_mut_ptr() as *mut *mut _ as *mut *mut _, resources.len() as UINT) };
    ()
  }
  
  //  Method AcquireWrappedResources
  
  #[allow(non_snake_case)]
  pub fn acquire_wrapped_resources(&self, resources: &[&D3D11Resource]) -> () {
    let mut lv1: Vec<*mut IUnknown> = resources.iter().map(|o|o.iptr()).collect();
    let _hr=unsafe { (*(self.0 as *mut ID3D11On12Device)).AcquireWrappedResources(lv1.as_mut_ptr() as *mut *mut _ as *mut *mut _, resources.len() as UINT) };
    ()
  }
  
  
}
