use dxgi1_2_safe::*;
use dxgi_safe::*;
use d3dcommon_safe::*;
use d3d12sdklayers_safe::*;
use d3d12_safe::*;
// This file is autogenerated

use utils::*;


#[derive(Default, Debug)]
pub struct DSize {
  pub height : UINT,
  pub width : UINT,
}

pub struct DXGIDecodeSwapChain(*mut IDXGIDecodeSwapChain);

impl HasIID for DXGIDecodeSwapChain {
  fn iid() -> REFGUID { &IID_IDXGIDecodeSwapChain }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIDecodeSwapChain(pp_vtbl as *mut _ as *mut IDXGIDecodeSwapChain) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIDecodeSwapChain {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIDecodeSwapChain {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIDecodeSwapChain {
  //  Method PresentBuffer
  
  pub fn present_buffer(&self, buffer_to_present: UINT, sync_interval: UINT, flags: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).PresentBuffer(buffer_to_present, sync_interval, flags) };
    hr2ret(hr,hr)
  }
  
  //  Method SetSourceRect
  
  pub fn set_source_rect(&self, rect: &RECT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).SetSourceRect(rect) };
    hr2ret(hr,hr)
  }
  
  //  Method SetTargetRect
  
  pub fn set_target_rect(&self, rect: &RECT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).SetTargetRect(rect) };
    hr2ret(hr,hr)
  }
  
  //  Method SetDestSize
  
  pub fn set_dest_size(&self, width: UINT, height: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).SetDestSize(width, height) };
    hr2ret(hr,hr)
  }
  
  //  Method GetSourceRect
  
  pub fn get_source_rect(&self) -> HResult<RECT> {
    let mut lv1: RECT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).GetSourceRect(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetTargetRect
  
  pub fn get_target_rect(&self) -> HResult<RECT> {
    let mut lv1: RECT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).GetTargetRect(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDestSize
  
  pub fn get_dest_size(&self) -> HResult<DSize> {
    let mut lv1: DSize = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).GetDestSize(&mut (lv1.width) as *mut _ as *mut _, &mut (lv1.height) as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetColorSpace
  
  pub fn set_color_space(&self, color_space: DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).SetColorSpace(color_space) };
    hr2ret(hr,hr)
  }
  
  //  Method GetColorSpace
  
  pub fn get_color_space(&self) -> DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDecodeSwapChain)).GetColorSpace() };
    hr
  }
  
  
}

pub struct DXGIDevice3(*mut IDXGIDevice3);

impl HasIID for DXGIDevice3 {
  fn iid() -> REFGUID { &IID_IDXGIDevice3 }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIDevice3(pp_vtbl as *mut _ as *mut IDXGIDevice3) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIDevice3 {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIDevice3 {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIDevice3 {
  //  Method SetPrivateData
  
  pub fn set_private_data<T>(&self, name: &GUID, data: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).SetPrivateData(name, mem::size_of_val(data) as UINT, data as *const _ as *const _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetPrivateData
  
  pub fn get_private_data<T>(&self, name: &GUID, data: Option<&mut T>) -> HResult<UINT> {
    let mut lv1: UINT = data.as_ref().map(|v|mem::size_of_val(*v)).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).GetPrivateData(name, &mut lv1, data.map(|v|v as *const _ as *mut _).unwrap_or(ptr::null_mut())) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetParent
  
  pub fn get_parent<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).GetParent(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method GetAdapter
  
  pub fn get_adapter(&self) -> HResult<DXGIAdapter> {
    let mut lv1: *mut IDXGIAdapter = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).GetAdapter(&mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIAdapter::new(lv1 as *mut _))
  }
  
  //  Method QueryResourceResidency
  
  pub fn query_resource_residency<T: HasIID>(&self, resources: &[&T], residency_status: &mut [DXGI_RESIDENCY]) -> HResult<HRESULT> {
    let mut lv1: Vec<*mut IUnknown> = resources.iter().map(|o|o.iptr()).collect();
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).QueryResourceResidency(lv1.as_mut_ptr() as *mut *mut _ as *mut *mut _, slice_as_mut_ptr(residency_status),  same_length(&[Some(resources.len()),Some(residency_status.len())]).expect("Arrays must have equal sizes") as UINT) };
    hr2ret(hr,hr)
  }
  
  //  Method SetGPUThreadPriority
  
  pub fn set_gpu_thread_priority(&self, priority: INT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).SetGPUThreadPriority(priority) };
    hr2ret(hr,hr)
  }
  
  //  Method GetGPUThreadPriority
  
  pub fn get_gpu_thread_priority(&self) -> HResult<INT> {
    let mut lv1: INT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).GetGPUThreadPriority(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetMaximumFrameLatency
  
  pub fn set_maximum_frame_latency(&self, max_latency: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).SetMaximumFrameLatency(max_latency) };
    hr2ret(hr,hr)
  }
  
  //  Method GetMaximumFrameLatency
  
  pub fn get_maximum_frame_latency(&self) -> HResult<UINT> {
    let mut lv1: UINT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).GetMaximumFrameLatency(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method OfferResources
  
  pub fn offer_resources<T: HasIID>(&self, resources: &[&T], priority: DXGI_OFFER_RESOURCE_PRIORITY) -> HResult<HRESULT> {
    let mut lv1: Vec<*mut IUnknown> = resources.iter().map(|o|o.iptr()).collect();
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).OfferResources( same_length(&[Some(resources.len())]).expect("Arrays must have equal sizes") as UINT, lv1.as_mut_ptr() as *mut *mut _ as *mut *mut _, priority) };
    hr2ret(hr,hr)
  }
  
  //  Method ReclaimResources
  
  pub fn reclaim_resources<T: HasIID>(&self, resources: &[&T], discarded: Option<&mut [BOOL]>) -> HResult<HRESULT> {
    let mut lv1: Vec<*mut IUnknown> = resources.iter().map(|o|o.iptr()).collect();
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).ReclaimResources( same_length(&[Some(resources.len()),discarded.as_ref().map(|a|a.len())]).expect("Arrays must have equal sizes") as UINT, lv1.as_mut_ptr() as *mut *mut _ as *mut *mut _, opt_arr_as_mut_ptr(&discarded) as *mut _) };
    hr2ret(hr,hr)
  }
  
  //  Method EnqueueSetEvent
  
  pub fn enqueue_set_event(&self, hEvent: HANDLE) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).EnqueueSetEvent(hEvent) };
    hr2ret(hr,hr)
  }
  
  //  Method Trim
  
  pub fn trim(&self) -> () {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIDevice3)).Trim() };
    ()
  }
  
  
}

pub struct DXGIFactory3(*mut IDXGIFactory3);

impl HasIID for DXGIFactory3 {
  fn iid() -> REFGUID { &IID_IDXGIFactory3 }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIFactory3(pp_vtbl as *mut _ as *mut IDXGIFactory3) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIFactory3 {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIFactory3 {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIFactory3 {
  //  Method SetPrivateData
  
  pub fn set_private_data<T>(&self, name: &GUID, data: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).SetPrivateData(name, mem::size_of_val(data) as UINT, data as *const _ as *const _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetPrivateData
  
  pub fn get_private_data<T>(&self, name: &GUID, data: Option<&mut T>) -> HResult<UINT> {
    let mut lv1: UINT = data.as_ref().map(|v|mem::size_of_val(*v)).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).GetPrivateData(name, &mut lv1, data.map(|v|v as *const _ as *mut _).unwrap_or(ptr::null_mut())) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetParent
  
  pub fn get_parent<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).GetParent(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method EnumAdapters
  
  pub fn enum_adapters(&self, adapter: UINT) -> HResult<DXGIAdapter> {
    let mut lv1: *mut IDXGIAdapter = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).EnumAdapters(adapter, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIAdapter::new(lv1 as *mut _))
  }
  
  //  Method MakeWindowAssociation
  
  pub fn make_window_association(&self, window_handle: HWND, flags: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).MakeWindowAssociation(window_handle, flags) };
    hr2ret(hr,hr)
  }
  
  //  Method GetWindowAssociation
  
  pub fn get_window_association(&self) -> HResult<HWND> {
    let mut lv1: HWND = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).GetWindowAssociation(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method CreateSwapChain
  
  pub fn create_swap_chain<T: HasIID>(&self, device: &T, desc: &mut DXGI_SWAP_CHAIN_DESC) -> HResult<DXGISwapChain> {
    let mut lv1: *mut IDXGISwapChain = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).CreateSwapChain(device.iptr() as *mut _ as *mut _ , desc, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGISwapChain::new(lv1 as *mut _))
  }
  
  //  Method CreateSoftwareAdapter
  
  pub fn create_software_adapter(&self, module: HMODULE) -> HResult<DXGIAdapter> {
    let mut lv1: *mut IDXGIAdapter = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).CreateSoftwareAdapter(module, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIAdapter::new(lv1 as *mut _))
  }
  
  //  Method EnumAdapters1
  
  pub fn enum_adapters1(&self, adapter: UINT) -> HResult<DXGIAdapter1> {
    let mut lv1: *mut IDXGIAdapter1 = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).EnumAdapters1(adapter, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIAdapter1::new(lv1 as *mut _))
  }
  
  //  Method IsCurrent
  
  pub fn is_current(&self) -> BOOL {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).IsCurrent() };
    hr
  }
  
  //  Method IsWindowedStereoEnabled
  
  pub fn is_windowed_stereo_enabled(&self) -> BOOL {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).IsWindowedStereoEnabled() };
    hr
  }
  
  //  Method CreateSwapChainForHwnd
  
  pub fn create_swap_chain_for_hwnd<T: HasIID>(&self, device: &T, hWnd: HWND, desc: &DXGI_SWAP_CHAIN_DESC1, fullscreen_desc: Option<&DXGI_SWAP_CHAIN_FULLSCREEN_DESC>, restrict_to_output: Option<&DXGIOutput>) -> HResult<DXGISwapChain1> {
    let mut lv1: *mut IDXGISwapChain1 = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).CreateSwapChainForHwnd(device.iptr() as *mut _ as *mut _ , hWnd, desc, fullscreen_desc.as_ref().map(|p|*p as *const _ as *const _).unwrap_or(ptr::null()), restrict_to_output.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGISwapChain1::new(lv1 as *mut _))
  }
  
  //  Method CreateSwapChainForCoreWindow
  
  pub fn create_swap_chain_for_core_window<T: HasIID, T1: HasIID>(&self, device: &T, window: &T1, desc: &DXGI_SWAP_CHAIN_DESC1, restrict_to_output: Option<&DXGIOutput>) -> HResult<DXGISwapChain1> {
    let mut lv1: *mut IDXGISwapChain1 = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).CreateSwapChainForCoreWindow(device.iptr() as *mut _ as *mut _ , window.iptr() as *mut _ as *mut _ , desc, restrict_to_output.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGISwapChain1::new(lv1 as *mut _))
  }
  
  //  Method GetSharedResourceAdapterLuid
  
  pub fn get_shared_resource_adapter_luid(&self, hResource: HANDLE) -> HResult<LUID> {
    let mut lv1: LUID = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).GetSharedResourceAdapterLuid(hResource, &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method RegisterStereoStatusWindow
  
  pub fn register_stereo_status_window(&self, window_handle: HWND, wMsg: UINT) -> HResult<DWORD> {
    let mut lv1: DWORD = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).RegisterStereoStatusWindow(window_handle, wMsg, &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method RegisterStereoStatusEvent
  
  pub fn register_stereo_status_event(&self, hEvent: HANDLE) -> HResult<DWORD> {
    let mut lv1: DWORD = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).RegisterStereoStatusEvent(hEvent, &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method UnregisterStereoStatus
  
  pub fn unregister_stereo_status(&self, cookie: DWORD) -> () {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).UnregisterStereoStatus(cookie) };
    ()
  }
  
  //  Method RegisterOcclusionStatusWindow
  
  pub fn register_occlusion_status_window(&self, window_handle: HWND, wMsg: UINT) -> HResult<DWORD> {
    let mut lv1: DWORD = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).RegisterOcclusionStatusWindow(window_handle, wMsg, &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method RegisterOcclusionStatusEvent
  
  pub fn register_occlusion_status_event(&self, hEvent: HANDLE) -> HResult<DWORD> {
    let mut lv1: DWORD = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).RegisterOcclusionStatusEvent(hEvent, &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method UnregisterOcclusionStatus
  
  pub fn unregister_occlusion_status(&self, cookie: DWORD) -> () {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).UnregisterOcclusionStatus(cookie) };
    ()
  }
  
  //  Method CreateSwapChainForComposition
  
  pub fn create_swap_chain_for_composition<T: HasIID>(&self, device: &T, desc: &DXGI_SWAP_CHAIN_DESC1, restrict_to_output: Option<&DXGIOutput>) -> HResult<DXGISwapChain1> {
    let mut lv1: *mut IDXGISwapChain1 = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).CreateSwapChainForComposition(device.iptr() as *mut _ as *mut _ , desc, restrict_to_output.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGISwapChain1::new(lv1 as *mut _))
  }
  
  //  Method GetCreationFlags
  
  pub fn get_creation_flags(&self) -> UINT {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIFactory3)).GetCreationFlags() };
    hr
  }
  
  
}

pub struct DXGIFactoryMedia(*mut IDXGIFactoryMedia);

impl HasIID for DXGIFactoryMedia {
  fn iid() -> REFGUID { &IID_IDXGIFactoryMedia }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIFactoryMedia(pp_vtbl as *mut _ as *mut IDXGIFactoryMedia) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIFactoryMedia {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIFactoryMedia {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIFactoryMedia {
  //  Method CreateSwapChainForCompositionSurfaceHandle
  
  pub fn create_swap_chain_for_composition_surface_handle<T: HasIID>(&self, device: &T, hSurface: HANDLE, desc: &DXGI_SWAP_CHAIN_DESC1, restrict_to_output: Option<&DXGIOutput>) -> HResult<DXGISwapChain1> {
    let mut lv1: *mut IDXGISwapChain1 = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactoryMedia)).CreateSwapChainForCompositionSurfaceHandle(device.iptr() as *mut _ as *mut _ , hSurface, desc, restrict_to_output.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGISwapChain1::new(lv1 as *mut _))
  }
  
  //  Method CreateDecodeSwapChainForCompositionSurfaceHandle
  
  pub fn create_decode_swap_chain_for_composition_surface_handle<T: HasIID, T1: HasIID>(&self, device: &T, hSurface: HANDLE, desc: &mut DXGI_DECODE_SWAP_CHAIN_DESC, yuv_decode_buffers: &T1, restrict_to_output: Option<&DXGIOutput>) -> HResult<DXGIDecodeSwapChain> {
    let mut lv1: *mut IDXGIDecodeSwapChain = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIFactoryMedia)).CreateDecodeSwapChainForCompositionSurfaceHandle(device.iptr() as *mut _ as *mut _ , hSurface, desc, yuv_decode_buffers.iptr() as *mut _ as *mut _ , restrict_to_output.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _, &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIDecodeSwapChain::new(lv1 as *mut _))
  }
  
  
}

pub struct DXGIOutput2(*mut IDXGIOutput2);

impl HasIID for DXGIOutput2 {
  fn iid() -> REFGUID { &IID_IDXGIOutput2 }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIOutput2(pp_vtbl as *mut _ as *mut IDXGIOutput2) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIOutput2 {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIOutput2 {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIOutput2 {
  //  Method SetPrivateData
  
  pub fn set_private_data<T>(&self, name: &GUID, data: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).SetPrivateData(name, mem::size_of_val(data) as UINT, data as *const _ as *const _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetPrivateData
  
  pub fn get_private_data<T>(&self, name: &GUID, data: Option<&mut T>) -> HResult<UINT> {
    let mut lv1: UINT = data.as_ref().map(|v|mem::size_of_val(*v)).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetPrivateData(name, &mut lv1, data.map(|v|v as *const _ as *mut _).unwrap_or(ptr::null_mut())) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetParent
  
  pub fn get_parent<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetParent(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method GetDesc
  
  pub fn get_desc(&self) -> HResult<DXGI_OUTPUT_DESC> {
    let mut lv1: DXGI_OUTPUT_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetDesc(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDisplayModeList
  
  pub fn get_display_mode_list(&self, enum_format: DXGI_FORMAT, flags: UINT, desc: Option<&mut [DXGI_MODE_DESC]>) -> HResult<UINT> {
    let mut lv1: UINT = desc.as_ref().map(|v|v.len()).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetDisplayModeList(enum_format, flags, &mut lv1, opt_arr_as_mut_ptr(&desc) as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method FindClosestMatchingMode
  
  pub fn find_closest_matching_mode(&self, mode_to_match: &DXGI_MODE_DESC, concerned_device: Option<&Unknown>) -> HResult<DXGI_MODE_DESC> {
    let mut lv1: DXGI_MODE_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).FindClosestMatchingMode(mode_to_match, &mut lv1 as *mut _ as *mut _, concerned_device.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method WaitForVBlank
  
  pub fn wait_for_v_blank(&self) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).WaitForVBlank() };
    hr2ret(hr,hr)
  }
  
  //  Method TakeOwnership
  
  pub fn take_ownership<T: HasIID>(&self, device: &T, exclusive: BOOL) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).TakeOwnership(device.iptr() as *mut _ as *mut _ , exclusive) };
    hr2ret(hr,hr)
  }
  
  //  Method ReleaseOwnership
  
  pub fn release_ownership(&self) -> () {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).ReleaseOwnership() };
    ()
  }
  
  //  Method GetGammaControlCapabilities
  
  pub fn get_gamma_control_capabilities(&self) -> HResult<DXGI_GAMMA_CONTROL_CAPABILITIES> {
    let mut lv1: DXGI_GAMMA_CONTROL_CAPABILITIES = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetGammaControlCapabilities(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetGammaControl
  
  pub fn set_gamma_control(&self, array: &DXGI_GAMMA_CONTROL) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).SetGammaControl(array) };
    hr2ret(hr,hr)
  }
  
  //  Method GetGammaControl
  
  pub fn get_gamma_control(&self) -> HResult<DXGI_GAMMA_CONTROL> {
    let mut lv1: DXGI_GAMMA_CONTROL = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetGammaControl(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetDisplaySurface
  
  pub fn set_display_surface<T: HasIID>(&self, scanout_surface: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).SetDisplaySurface(scanout_surface.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method GetDisplaySurfaceData
  
  pub fn get_display_surface_data<T: HasIID>(&self, destination: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetDisplaySurfaceData(destination.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method GetFrameStatistics
  
  pub fn get_frame_statistics(&self) -> HResult<DXGI_FRAME_STATISTICS> {
    let mut lv1: DXGI_FRAME_STATISTICS = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetFrameStatistics(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDisplayModeList1
  
  pub fn get_display_mode_list1(&self, enum_format: DXGI_FORMAT, flags: UINT, desc: Option<&mut [DXGI_MODE_DESC1]>) -> HResult<UINT> {
    let mut lv1: UINT = desc.as_ref().map(|v|v.len()).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetDisplayModeList1(enum_format, flags, &mut lv1, opt_arr_as_mut_ptr(&desc) as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method FindClosestMatchingMode1
  
  pub fn find_closest_matching_mode1(&self, mode_to_match: &DXGI_MODE_DESC1, closest_match: &mut DXGI_MODE_DESC1, concerned_device: Option<&Unknown>) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).FindClosestMatchingMode1(mode_to_match, closest_match, concerned_device.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetDisplaySurfaceData1
  
  pub fn get_display_surface_data1<T: HasIID>(&self, destination: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).GetDisplaySurfaceData1(destination.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method DuplicateOutput
  
  pub fn duplicate_output<T: HasIID>(&self, device: &T) -> HResult<DXGIOutputDuplication> {
    let mut lv1: *mut IDXGIOutputDuplication = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).DuplicateOutput(device.iptr() as *mut _ as *mut _ , &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIOutputDuplication::new(lv1 as *mut _))
  }
  
  //  Method SupportsOverlays
  
  pub fn supports_overlays(&self) -> BOOL {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput2)).SupportsOverlays() };
    hr
  }
  
  
}

pub struct DXGIOutput3(*mut IDXGIOutput3);

impl HasIID for DXGIOutput3 {
  fn iid() -> REFGUID { &IID_IDXGIOutput3 }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGIOutput3(pp_vtbl as *mut _ as *mut IDXGIOutput3) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGIOutput3 {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGIOutput3 {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGIOutput3 {
  //  Method SetPrivateData
  
  pub fn set_private_data<T>(&self, name: &GUID, data: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).SetPrivateData(name, mem::size_of_val(data) as UINT, data as *const _ as *const _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetPrivateData
  
  pub fn get_private_data<T>(&self, name: &GUID, data: Option<&mut T>) -> HResult<UINT> {
    let mut lv1: UINT = data.as_ref().map(|v|mem::size_of_val(*v)).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetPrivateData(name, &mut lv1, data.map(|v|v as *const _ as *mut _).unwrap_or(ptr::null_mut())) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetParent
  
  pub fn get_parent<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetParent(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method GetDesc
  
  pub fn get_desc(&self) -> HResult<DXGI_OUTPUT_DESC> {
    let mut lv1: DXGI_OUTPUT_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetDesc(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDisplayModeList
  
  pub fn get_display_mode_list(&self, enum_format: DXGI_FORMAT, flags: UINT, desc: Option<&mut [DXGI_MODE_DESC]>) -> HResult<UINT> {
    let mut lv1: UINT = desc.as_ref().map(|v|v.len()).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetDisplayModeList(enum_format, flags, &mut lv1, opt_arr_as_mut_ptr(&desc) as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method FindClosestMatchingMode
  
  pub fn find_closest_matching_mode(&self, mode_to_match: &DXGI_MODE_DESC, concerned_device: Option<&Unknown>) -> HResult<DXGI_MODE_DESC> {
    let mut lv1: DXGI_MODE_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).FindClosestMatchingMode(mode_to_match, &mut lv1 as *mut _ as *mut _, concerned_device.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method WaitForVBlank
  
  pub fn wait_for_v_blank(&self) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).WaitForVBlank() };
    hr2ret(hr,hr)
  }
  
  //  Method TakeOwnership
  
  pub fn take_ownership<T: HasIID>(&self, device: &T, exclusive: BOOL) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).TakeOwnership(device.iptr() as *mut _ as *mut _ , exclusive) };
    hr2ret(hr,hr)
  }
  
  //  Method ReleaseOwnership
  
  pub fn release_ownership(&self) -> () {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).ReleaseOwnership() };
    ()
  }
  
  //  Method GetGammaControlCapabilities
  
  pub fn get_gamma_control_capabilities(&self) -> HResult<DXGI_GAMMA_CONTROL_CAPABILITIES> {
    let mut lv1: DXGI_GAMMA_CONTROL_CAPABILITIES = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetGammaControlCapabilities(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetGammaControl
  
  pub fn set_gamma_control(&self, array: &DXGI_GAMMA_CONTROL) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).SetGammaControl(array) };
    hr2ret(hr,hr)
  }
  
  //  Method GetGammaControl
  
  pub fn get_gamma_control(&self) -> HResult<DXGI_GAMMA_CONTROL> {
    let mut lv1: DXGI_GAMMA_CONTROL = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetGammaControl(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetDisplaySurface
  
  pub fn set_display_surface<T: HasIID>(&self, scanout_surface: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).SetDisplaySurface(scanout_surface.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method GetDisplaySurfaceData
  
  pub fn get_display_surface_data<T: HasIID>(&self, destination: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetDisplaySurfaceData(destination.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method GetFrameStatistics
  
  pub fn get_frame_statistics(&self) -> HResult<DXGI_FRAME_STATISTICS> {
    let mut lv1: DXGI_FRAME_STATISTICS = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetFrameStatistics(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDisplayModeList1
  
  pub fn get_display_mode_list1(&self, enum_format: DXGI_FORMAT, flags: UINT, desc: Option<&mut [DXGI_MODE_DESC1]>) -> HResult<UINT> {
    let mut lv1: UINT = desc.as_ref().map(|v|v.len()).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetDisplayModeList1(enum_format, flags, &mut lv1, opt_arr_as_mut_ptr(&desc) as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method FindClosestMatchingMode1
  
  pub fn find_closest_matching_mode1(&self, mode_to_match: &DXGI_MODE_DESC1, closest_match: &mut DXGI_MODE_DESC1, concerned_device: Option<&Unknown>) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).FindClosestMatchingMode1(mode_to_match, closest_match, concerned_device.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetDisplaySurfaceData1
  
  pub fn get_display_surface_data1<T: HasIID>(&self, destination: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).GetDisplaySurfaceData1(destination.iptr() as *mut _ as *mut _ ) };
    hr2ret(hr,hr)
  }
  
  //  Method DuplicateOutput
  
  pub fn duplicate_output<T: HasIID>(&self, device: &T) -> HResult<DXGIOutputDuplication> {
    let mut lv1: *mut IDXGIOutputDuplication = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).DuplicateOutput(device.iptr() as *mut _ as *mut _ , &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIOutputDuplication::new(lv1 as *mut _))
  }
  
  //  Method SupportsOverlays
  
  pub fn supports_overlays(&self) -> BOOL {
  
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).SupportsOverlays() };
    hr
  }
  
  //  Method CheckOverlaySupport
  
  pub fn check_overlay_support<T: HasIID>(&self, enum_format: DXGI_FORMAT, concerned_device: &T) -> HResult<UINT> {
    let mut lv1: UINT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGIOutput3)).CheckOverlaySupport(enum_format, concerned_device.iptr() as *mut _ as *mut _ , &mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  
}

pub struct DXGISwapChain2(*mut IDXGISwapChain2);

impl HasIID for DXGISwapChain2 {
  fn iid() -> REFGUID { &IID_IDXGISwapChain2 }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGISwapChain2(pp_vtbl as *mut _ as *mut IDXGISwapChain2) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGISwapChain2 {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGISwapChain2 {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGISwapChain2 {
  //  Method SetPrivateData
  
  pub fn set_private_data<T>(&self, name: &GUID, data: &T) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetPrivateData(name, mem::size_of_val(data) as UINT, data as *const _ as *const _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetPrivateData
  
  pub fn get_private_data<T>(&self, name: &GUID, data: Option<&mut T>) -> HResult<UINT> {
    let mut lv1: UINT = data.as_ref().map(|v|mem::size_of_val(*v)).unwrap_or(0) as UINT;
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetPrivateData(name, &mut lv1, data.map(|v|v as *const _ as *mut _).unwrap_or(ptr::null_mut())) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetParent
  
  pub fn get_parent<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetParent(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method Present
  
  pub fn present(&self, sync_interval: UINT, flags: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).Present(sync_interval, flags) };
    hr2ret(hr,hr)
  }
  
  //  Method GetBuffer
  
  pub fn get_buffer<T: HasIID>(&self, buffer: UINT) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetBuffer(buffer, T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method SetFullscreenState
  
  pub fn set_fullscreen_state(&self, fullscreen: BOOL, target: Option<&DXGIOutput>) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetFullscreenState(fullscreen, target.map(|i|i.iptr()).unwrap_or(ptr::null_mut()) as *mut _ as *mut _) };
    hr2ret(hr,hr)
  }
  
  //  Method GetFullscreenState
  
  pub fn get_fullscreen_state(&self, fullscreen: Option<&mut BOOL>) -> HResult<DXGIOutput> {
    let mut lv1: *mut IDXGIOutput = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetFullscreenState(opt_as_mut_ptr(&fullscreen), &mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIOutput::new(lv1 as *mut _))
  }
  
  //  Method GetDesc
  
  pub fn get_desc(&self) -> HResult<DXGI_SWAP_CHAIN_DESC> {
    let mut lv1: DXGI_SWAP_CHAIN_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetDesc(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method ResizeBuffers
  
  pub fn resize_buffers(&self, buffer_count: UINT, width: UINT, height: UINT, new_format: DXGI_FORMAT, swap_chain_flags: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).ResizeBuffers(buffer_count, width, height, new_format, swap_chain_flags) };
    hr2ret(hr,hr)
  }
  
  //  Method ResizeTarget
  
  pub fn resize_target(&self, new_target_parameters: &DXGI_MODE_DESC) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).ResizeTarget(new_target_parameters) };
    hr2ret(hr,hr)
  }
  
  //  Method GetContainingOutput
  
  pub fn get_containing_output(&self) -> HResult<DXGIOutput> {
    let mut lv1: *mut IDXGIOutput = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetContainingOutput(&mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIOutput::new(lv1 as *mut _))
  }
  
  //  Method GetFrameStatistics
  
  pub fn get_frame_statistics(&self) -> HResult<DXGI_FRAME_STATISTICS> {
    let mut lv1: DXGI_FRAME_STATISTICS = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetFrameStatistics(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetLastPresentCount
  
  pub fn get_last_present_count(&self) -> HResult<UINT> {
    let mut lv1: UINT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetLastPresentCount(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetDesc1
  
  pub fn get_desc1(&self) -> HResult<DXGI_SWAP_CHAIN_DESC1> {
    let mut lv1: DXGI_SWAP_CHAIN_DESC1 = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetDesc1(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetFullscreenDesc
  
  pub fn get_fullscreen_desc(&self) -> HResult<DXGI_SWAP_CHAIN_FULLSCREEN_DESC> {
    let mut lv1: DXGI_SWAP_CHAIN_FULLSCREEN_DESC = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetFullscreenDesc(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetHwnd
  
  pub fn get_hwnd(&self) -> HResult<HWND> {
    let mut lv1: HWND = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetHwnd(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetCoreWindow
  
  pub fn get_core_window<T: HasIID>(&self) -> HResult<T> {
    let mut lv1: *mut IUnknown = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetCoreWindow(T::iid(), &mut lv1 as *mut *mut _ as *mut *mut c_void) };
    hr2ret(hr,T::new(lv1))
  }
  
  //  Method Present1
  
  pub fn present1(&self, sync_interval: UINT, present_flags: UINT, present_parameters: &DXGI_PRESENT_PARAMETERS) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).Present1(sync_interval, present_flags, present_parameters) };
    hr2ret(hr,hr)
  }
  
  //  Method IsTemporaryMonoSupported
  
  pub fn is_temporary_mono_supported(&self) -> BOOL {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).IsTemporaryMonoSupported() };
    hr
  }
  
  //  Method GetRestrictToOutput
  
  pub fn get_restrict_to_output(&self) -> HResult<DXGIOutput> {
    let mut lv1: *mut IDXGIOutput = ptr::null_mut();
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetRestrictToOutput(&mut lv1 as *mut *mut _) };
    hr2ret(hr,DXGIOutput::new(lv1 as *mut _))
  }
  
  //  Method SetBackgroundColor
  
  pub fn set_background_color(&self, color: &DXGI_RGBA) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetBackgroundColor(color) };
    hr2ret(hr,hr)
  }
  
  //  Method GetBackgroundColor
  
  pub fn get_background_color(&self) -> HResult<DXGI_RGBA> {
    let mut lv1: DXGI_RGBA = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetBackgroundColor(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetRotation
  
  pub fn set_rotation(&self, rotation: DXGI_MODE_ROTATION) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetRotation(rotation) };
    hr2ret(hr,hr)
  }
  
  //  Method GetRotation
  
  pub fn get_rotation(&self) -> HResult<DXGI_MODE_ROTATION> {
    let mut lv1: DXGI_MODE_ROTATION = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetRotation(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetSourceSize
  
  pub fn set_source_size(&self, width: UINT, height: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetSourceSize(width, height) };
    hr2ret(hr,hr)
  }
  
  //  Method GetSourceSize
  
  pub fn get_source_size(&self) -> HResult<DSize> {
    let mut lv1: DSize = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetSourceSize(&mut (lv1.width) as *mut _ as *mut _, &mut (lv1.height) as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetMaximumFrameLatency
  
  pub fn set_maximum_frame_latency(&self, max_latency: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetMaximumFrameLatency(max_latency) };
    hr2ret(hr,hr)
  }
  
  //  Method GetMaximumFrameLatency
  
  pub fn get_maximum_frame_latency(&self) -> HResult<UINT> {
    let mut lv1: UINT = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetMaximumFrameLatency(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method GetFrameLatencyWaitableObject
  
  pub fn get_frame_latency_waitable_object(&self) -> HANDLE {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetFrameLatencyWaitableObject() };
    hr
  }
  
  //  Method SetMatrixTransform
  
  pub fn set_matrix_transform(&self, matrix: &DXGI_MATRIX_3X2_F) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).SetMatrixTransform(matrix) };
    hr2ret(hr,hr)
  }
  
  //  Method GetMatrixTransform
  
  pub fn get_matrix_transform(&self) -> HResult<DXGI_MATRIX_3X2_F> {
    let mut lv1: DXGI_MATRIX_3X2_F = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChain2)).GetMatrixTransform(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  
}

pub struct DXGISwapChainMedia(*mut IDXGISwapChainMedia);

impl HasIID for DXGISwapChainMedia {
  fn iid() -> REFGUID { &IID_IDXGISwapChainMedia }
  fn new(pp_vtbl : *mut IUnknown) -> Self { DXGISwapChainMedia(pp_vtbl as *mut _ as *mut IDXGISwapChainMedia) }
  fn iptr(&self) -> *mut IUnknown { self.0 as *mut _ as  *mut IUnknown}
}

impl Drop for DXGISwapChainMedia {
  fn drop(&mut self) {
    release_com_ptr(self)
  }
}

impl Clone for DXGISwapChainMedia {
  fn clone(&self) -> Self {
    clone_com_ptr(self)
  }
}

impl DXGISwapChainMedia {
  //  Method GetFrameStatisticsMedia
  
  pub fn get_frame_statistics_media(&self) -> HResult<DXGI_FRAME_STATISTICS_MEDIA> {
    let mut lv1: DXGI_FRAME_STATISTICS_MEDIA = unsafe {mem::uninitialized::<_>()};
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChainMedia)).GetFrameStatisticsMedia(&mut lv1 as *mut _ as *mut _) };
    hr2ret(hr,lv1)
  }
  
  //  Method SetPresentDuration
  
  pub fn set_present_duration(&self, duration: UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChainMedia)).SetPresentDuration(duration) };
    hr2ret(hr,hr)
  }
  
  //  Method CheckPresentDurationSupport
  
  pub fn check_present_duration_support(&self, desired_present_duration: UINT, closest_smaller_present_duration: &mut UINT, closest_larger_present_duration: &mut UINT) -> HResult<HRESULT> {
  
    let hr=unsafe { (*(self.0 as *mut IDXGISwapChainMedia)).CheckPresentDurationSupport(desired_present_duration, closest_smaller_present_duration, closest_larger_present_duration) };
    hr2ret(hr,hr)
  }
  
  
}

