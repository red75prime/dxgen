module annotations_dwrite

open annotations
open custom_impls

let dwrite = [
  ("IDWriteBitmapRenderTargetVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("DrawGlyphRun",[
      ("This",AThis);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("measuringMode",ANone);
      ("glyphRun",ANone);
      ("renderingParams",InComPtr);
      ("textColor",ANone);
      ("blackBoxRect",OutOptional);
    ],MANone);
    ("GetMemoryDC",[
      ("This",AThis);
    ],MANone);
    ("GetPixelsPerDip",[
      ("This",AThis);
    ],MANone);
    ("SetPixelsPerDip",[
      ("This",AThis);
      ("pixelsPerDip",ANone);
    ],MANone);
    ("GetCurrentTransform",[
      ("This",AThis);
      ("transform",OutReturn);
    ],MANone);
    ("SetCurrentTransform",[
      ("This",AThis);
      ("transform",ANone);
    ],MANone);
    ("GetSize",[
      ("This",AThis);
      ("size",OutReturn);
    ],MANone);
    ("Resize",[
      ("This",AThis);
      ("width",ANone);
      ("height",ANone);
    ],MANone);
  ]);
  ("IDWriteFactoryVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetSystemFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
      ("checkForUpdates",ANone);
    ],MANone);
    ("CreateCustomFontCollection",[
      ("This",AThis);
      ("collectionLoader",InComPtr);
      ("collectionKey",InOfSize "collectionKeySize");
      ("collectionKeySize",ANone);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("RegisterFontCollectionLoader",[
      ("This",AThis);
      ("fontCollectionLoader",InComPtr);
    ],MANone);
    ("UnregisterFontCollectionLoader",[
      ("This",AThis);
      ("fontCollectionLoader",InComPtr);
    ],MANone);
    ("CreateFontFileReference",[
      ("This",AThis);
      ("filePath",ANone);
      ("lastWriteTime",InOptional);
      ("fontFile",OutReturnComPtr);
    ],MANone);
    ("CreateCustomFontFileReference",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("fontFileLoader",InComPtr);
      ("fontFile",OutReturnComPtr);
    ],MANone);
    ("CreateFontFace",[
      ("This",AThis);
      ("fontFaceType",ANone);
      ("numberOfFiles",ANone);
      ("fontFiles",InComPtrArrayOfSize "numberOfFiles"); // TODO: check if it is array
      ("faceIndex",ANone);
      ("fontFaceSimulationFlags",ANone);
      ("fontFace",OutReturnComPtr);
    ],MANone);
    ("CreateRenderingParams",[
      ("This",AThis);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("CreateMonitorRenderingParams",[
      ("This",AThis);
      ("monitor",ANone);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("CreateCustomRenderingParams",[
      ("This",AThis);
      ("gamma",ANone);
      ("enhancedContrast",ANone);
      ("clearTypeLevel",ANone);
      ("pixelGeometry",ANone);
      ("renderingMode",ANone);
      ("renderingParams",OutReturnComPtr);
    ],MANone);
    ("RegisterFontFileLoader",[
      ("This",AThis);
      ("fontFileLoader",InComPtr);
    ],MANone);
    ("UnregisterFontFileLoader",[
      ("This",AThis);
      ("fontFileLoader",InComPtr);
    ],MANone);
    ("CreateTextFormat",[
      ("This",AThis);
      ("fontFamilyName",ANone);
      ("fontCollection",InComPtr);
      ("fontWeight",ANone);
      ("fontStyle",ANone);
      ("fontStretch",ANone);
      ("fontSize",ANone);
      ("localeName",ANone);
      ("textFormat",OutReturnComPtr);
    ],MANone);
    ("CreateTypography",[
      ("This",AThis);
      ("typography",OutReturnComPtr);
    ],MANone);
    ("GetGdiInterop",[
      ("This",AThis);
      ("gdiInterop",OutReturnComPtr);
    ],MANone);
    ("CreateTextLayout",[
      ("This",AThis);
      ("string",InArrayOfSize "stringLength"); // TODO: String conversion?
      ("stringLength",ANone);
      ("textFormat",InComPtr);
      ("maxWidth",ANone);
      ("maxHeight",ANone);
      ("textLayout",OutReturnComPtr);
    ],MANone);
    ("CreateGdiCompatibleTextLayout",[
      ("This",AThis);
      ("string",InArrayOfSize "stringLength");
      ("stringLength",ANone);
      ("textFormat",InComPtr);
      ("layoutWidth",ANone);
      ("layoutHeight",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("useGdiNatural",ANone);
      ("textLayout",OutReturnComPtr);
    ],MANone);
    ("CreateEllipsisTrimmingSign",[
      ("This",AThis);
      ("textFormat",InComPtr);
      ("trimmingSign",OutReturnComPtr);
    ],MANone);
    ("CreateTextAnalyzer",[
      ("This",AThis);
      ("textAnalyzer",OutReturnComPtr);
    ],MANone);
    ("CreateNumberSubstitution",[
      ("This",AThis);
      ("substitutionMethod",ANone);
      ("localeName",ANone);
      ("ignoreUserOverride",ANone);
      ("numberSubstitution",OutReturnComPtr);
    ],MANone);
    ("CreateGlyphRunAnalysis",[
      ("This",AThis);
      ("glyphRun",ANone);
      ("pixelsPerDip",ANone);
      ("transform",ANone);
      ("renderingMode",ANone);
      ("measuringMode",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("glyphRunAnalysis",OutReturnComPtr);
    ],MANone);
  ]);
  // This is callback interface.
  // TODO: Do something to simplify implementation.
  ("IDWriteFontCollectionLoaderVtbl",IAManual, "IUnknownVtbl", [
    ("CreateEnumeratorFromKey",[
      ("This",AThis);
      ("factory",InComPtr);
      ("collectionKey",InOfSize "collectionKeySize");
      ("collectionKeySize",ANone);
      ("fontFileEnumerator",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontCollectionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontFamilyCount",[
      ("This",AThis);
    ],MANone);
    ("GetFontFamily",[
      ("This",AThis);
      ("index",ANone);
      ("fontFamily",OutReturnComPtr);
    ],MANone);
    ("FindFamilyName",[
      ("This",AThis);
      ("familyName",ANone);
      ("index",OutReturn);
      ("exists",OutReturn); // Return values are tupled
    ],MANone);
    ("GetFontFromFontFace",[
      ("This",AThis);
      ("fontFace",InComPtr);
      ("font",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontFaceVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetType",[
      ("This",AThis);
    ],MANone);
    ("GetFiles",[
      ("This",AThis);
      ("numberOfFiles",InOutReturn);
      ("fontFiles",OutArrayOfSize "numberOfFiles"); // Incorrect. TODO: do something about functions that require two calls. First to get size of output array, second to get values.
    ],MADontImplement);
    ("GetIndex",[
      ("This",AThis);
    ],MANone);
    ("GetSimulations",[
      ("This",AThis);
    ],MANone);
    ("IsSymbolFont",[
      ("This",AThis);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("fontFaceMetrics",OutReturn);
    ],MANone);
    ("GetGlyphCount",[
      ("This",AThis);
    ],MANone);
    ("GetDesignGlyphMetrics",[
      ("This",AThis);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("glyphMetrics",OutReturn);
      ("isSideways",ANone);
    ],MANone);
    ("GetGlyphIndices",[
      ("This",AThis);
      ("codePoints",InArrayOfSize "codePointCount");
      ("codePointCount",ANone);
      ("glyphIndices",OutArrayOfSize "codePointCount");
    ],MANone);
    ("TryGetFontTable",[
      ("This",AThis);
      ("openTypeTableTag",ANone);
      ("tableData",OutPointer); 
      ("tableSize",ANone);
      ("tableContext",OutPointer); // TODO: add OutHandle, to represent pointer to opaque structure. In this case this handle also needs RAII guard
      ("exists",ANone);
    ],MADontImplement);
    ("ReleaseFontTable",[
      ("This",AThis);
      ("tableContext",ANone); // The handle, returned by previous method, should be freed by calling this method.
    ],MADontImplement);
    ("GetGlyphRunOutline",[
      ("This",AThis);
      ("emSize",ANone);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphAdvances",InOptionalArrayOfSize "glyphCount");
      ("glyphOffsets",InOptionalArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("geometrySink",InComPtr);
    ],MANone);
    ("GetRecommendedRenderingMode",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("measuringMode",ANone);
      ("renderingParams",InComPtr);
      ("renderingMode",OutReturn);
    ],MANone);
    ("GetGdiCompatibleMetrics",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("fontFaceMetrics",OutReturn);
    ],MANone);
    ("GetGdiCompatibleGlyphMetrics",[
      ("This",AThis);
      ("emSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",InOptional);
      ("useGdiNatural",ANone);
      ("glyphIndices",InArrayOfSize "glyphCount");
      ("glyphCount",ANone);
      ("glyphMetrics",OutArrayOfSize "glyphCount");
      ("isSideways",ANone);
    ],MANone);
  ]);
  ("IDWriteFontFamilyVtbl",IAAutogen(Set.ofList []), "IDWriteFontListVtbl", [
    ("GetFamilyNames",[
      ("This",AThis);
      ("names",OutReturnComPtr);
    ],MANone);
    ("GetFirstMatchingFont",[
      ("This",AThis);
      ("weight",ANone);
      ("stretch",ANone);
      ("style",ANone);
      ("matchingFont",OutReturnComPtr);
    ],MANone);
    ("GetMatchingFonts",[
      ("This",AThis);
      ("weight",ANone);
      ("stretch",ANone);
      ("style",ANone);
      ("matchingFonts",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontFileEnumeratorVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("MoveNext",[
      ("This",AThis);
      ("hasCurrentFile",OutReturn);
    ],MANone);
    ("GetCurrentFontFile",[
      ("This",AThis);
      ("fontFile",OutReturnComPtr);
    ],MANone);
  ]);
  // Another callback interface
  ("IDWriteFontFileLoaderVtbl",IAManual, "IUnknownVtbl", [
    ("CreateStreamFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",ANone);
      ("fontFileReferenceKeySize",ANone);
      ("fontFileStream",ANone);
    ],MANone);
  ]);
  // Another void** ridden interface. TODO: wrap it somehow
  ("IDWriteFontFileStreamVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("ReadFileFragment",[
      ("This",AThis);
      ("fragmentStart",ANone);
      ("fileOffset",ANone);
      ("fragmentSize",ANone);
      ("fragmentContext",ANone);
    ],MADontImplement);
    ("ReleaseFileFragment",[
      ("This",AThis);
      ("fragmentContext",ANone);
    ],MADontImplement);
    ("GetFileSize",[
      ("This",AThis);
      ("fileSize",ANone);
    ],MADontImplement);
    ("GetLastWriteTime",[
      ("This",AThis);
      ("lastWriteTime",ANone);
    ],MADontImplement);
  ]);
  // TODO: implement wrapper
  ("IDWriteFontFileVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetReferenceKey",[
      ("This",AThis);
      ("fontFileReferenceKey",ANone);
      ("fontFileReferenceKeySize",ANone);
    ],MADontImplement);
    ("GetLoader",[
      ("This",AThis);
      ("fontFileLoader",ANone);
    ],MADontImplement);
    ("Analyze",[
      ("This",AThis);
      ("isSupportedFontType",ANone);
      ("fontFileType",ANone);
      ("fontFaceType",ANone);
      ("numberOfFaces",ANone);
    ],MADontImplement);
  ]);
  ("IDWriteFontListVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("GetFontCount",[
      ("This",AThis);
    ],MANone);
    ("GetFont",[
      ("This",AThis);
      ("index",ANone);
      ("font",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteFontVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetFontFamily",[
      ("This",AThis);
      ("fontFamily",OutReturnComPtr);
    ],MANone);
    ("GetWeight",[
      ("This",AThis);
    ],MANone);
    ("GetStretch",[
      ("This",AThis);
    ],MANone);
    ("GetStyle",[
      ("This",AThis);
    ],MANone);
    ("IsSymbolFont",[
      ("This",AThis);
    ],MANone);
    ("GetFaceNames",[
      ("This",AThis);
      ("names",OutReturnComPtr);
    ],MANone);
    ("GetInformationalStrings",[
      ("This",AThis);
      ("informationalStringID",ANone);
      ("informationalStrings",OutReturnComPtr); //TODO: add OutReturnComPtrOption "exists"
      ("exists",OutReturn); 
    ],MANone);
    ("GetSimulations",[
      ("This",AThis);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("fontMetrics",OutReturn);
    ],MANone);
    ("HasCharacter",[
      ("This",AThis);
      ("unicodeValue",ANone);
      ("exists",OutReturn);
    ],MANone);
    ("CreateFontFace",[
      ("This",AThis);
      ("fontFace",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteGdiInteropVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("CreateFontFromLOGFONT",[
      ("This",AThis);
      ("logFont",ANone);
      ("font",OutReturnComPtr);
    ],MANone);
    ("ConvertFontToLOGFONT",[
      ("This",AThis);
      ("font",InComPtr);
      ("logFont",OutReturn);
      ("isSystemFont",OutReturn);
    ],MANone);
    ("ConvertFontFaceToLOGFONT",[
      ("This",AThis);
      ("font",InComPtr);
      ("logFont",OutReturn);
    ],MANone);
    ("CreateFontFaceFromHdc",[
      ("This",AThis);
      ("hdc",ANone);
      ("fontFace",OutReturnComPtr);
    ],MANone);
    ("CreateBitmapRenderTarget",[
      ("This",AThis);
      ("hdc",InOptional);
      ("width",ANone);
      ("height",ANone);
      ("renderTarget",OutReturnComPtr);
    ],MANone);
  ]);
  ("IDWriteGlyphRunAnalysisVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetAlphaTextureBounds",[
      ("This",AThis);
      ("textureType",ANone);
      ("textureBounds",OutReturn);
    ],MANone);
    ("CreateAlphaTexture",[
      ("This",AThis);
      ("textureType",ANone);
      ("textureBounds",ANone);
      ("alphaValues",OutArrayOfSize "bufferSize");
      ("bufferSize",ANone);
    ],MANone);
    ("GetAlphaBlendParams",[
      ("This",AThis);
      ("renderingParams",InComPtr);
      ("blendGamma",OutReturn);
      ("blendEnhancedContrast",OutReturn);
      ("blendClearTypeLevel",OutReturn);
    ],MANone);
  ]);
  ("IDWriteInlineObjectVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("Draw",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("renderer",InComPtr);
      ("originX",ANone);
      ("originY",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("metrics",OutReturn);
    ],MANone);
    ("GetOverhangMetrics",[
      ("This",AThis);
      ("overhangs",OutReturn);
    ],MANone);
    ("GetBreakConditions",[
      ("This",AThis);
      ("breakConditionBefore",OutReturn);
      ("breakConditionAfter",OutReturn);
    ],MANone);
  ]);
  ("IDWriteLocalFontFileLoaderVtbl",IAAutogen(Set.ofList []), "IDWriteFontFileLoaderVtbl", [
    ("GetFilePathLengthFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("filePathLength",OutReturn);
    ],MANone);
    ("GetFilePathFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("filePath",OutArrayOfSize "filePathSize");
      ("filePathSize",ANone);
    ],MANone);
    ("GetLastWriteTimeFromKey",[
      ("This",AThis);
      ("fontFileReferenceKey",InOfSize "fontFileReferenceKeySize");
      ("fontFileReferenceKeySize",ANone);
      ("lastWriteTime",OutReturn);
    ],MANone);
  ]);
  ("IDWriteLocalizedStringsVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetCount",[
      ("This",AThis);
    ],MANone);
    ("FindLocaleName",[
      ("This",AThis);
      ("localeName",ANone); // TODO: add annotation for WCHAR zero terminated string
      ("index",OutReturn);
      ("exists",OutReturn);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
      ("index",ANone);
      ("length",OutReturn);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("index",ANone);
      ("localeName",OutArrayOfSize "size");
      ("size",ANone);
    ],MANone);
    ("GetStringLength",[
      ("This",AThis);
      ("index",ANone);
      ("length",OutReturn);
    ],MANone);
    ("GetString",[
      ("This",AThis);
      ("index",ANone);
      ("stringBuffer",OutArrayOfSize "size");
      ("size",ANone);
    ],MANone);
  ]);
  ("IDWriteNumberSubstitutionVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
  ]);
  ("IDWritePixelSnappingVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("IsPixelSnappingDisabled",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("isDisabled",OutReturn);
    ],MAUnsafe);
    ("GetCurrentTransform",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("transform",OutReturn);
    ],MAUnsafe);
    ("GetPixelsPerDip",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("pixelsPerDip",OutReturn);
    ],MAUnsafe);
  ]);
  ("IDWriteRenderingParamsVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("GetGamma",[
      ("This",AThis);
    ],MANone);
    ("GetEnhancedContrast",[
      ("This",AThis);
    ],MANone);
    ("GetClearTypeLevel",[
      ("This",AThis);
    ],MANone);
    ("GetPixelGeometry",[
      ("This",AThis);
    ],MANone);
    ("GetRenderingMode",[
      ("This",AThis);
    ],MANone);
  ]);
  ("IDWriteTextAnalysisSinkVtbl",IAManual, "IUnknownVtbl", [
    ("SetScriptAnalysis",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("scriptAnalysis",ANone);
    ],MANone);
    ("SetLineBreakpoints",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("lineBreakpoints",ANone);
    ],MANone);
    ("SetBidiLevel",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("explicitLevel",ANone);
      ("resolvedLevel",ANone);
    ],MANone);
    ("SetNumberSubstitution",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("numberSubstitution",ANone);
    ],MANone);
  ]);
  ("IDWriteTextAnalysisSourceVtbl",IAManual, "IUnknownVtbl", [
    ("GetTextAtPosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textString",ANone);
      ("textLength",ANone);
    ],MANone);
    ("GetTextBeforePosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textString",ANone);
      ("textLength",ANone);
    ],MANone);
    ("GetParagraphReadingDirection",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("localeName",ANone);
    ],MANone);
    ("GetNumberSubstitution",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("numberSubstitution",ANone);
    ],MANone);
  ]);
  ("IDWriteTextAnalyzerVtbl",IAAutogen(Set.empty), "IUnknownVtbl", [
    ("AnalyzeScript",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeBidi",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeNumberSubstitution",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("AnalyzeLineBreakpoints",[
      ("This",AThis);
      ("analysisSource",ANone);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("analysisSink",ANone);
    ],MANone);
    ("GetGlyphs",[
      ("This",AThis);
      ("textString",ANone);
      ("textLength",ANone);
      ("fontFace",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("numberSubstitution",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("maxGlyphCount",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("actualGlyphCount",ANone);
    ],MANone);
    ("GetGlyphPlacements",[
      ("This",AThis);
      ("textString",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("textLength",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("glyphCount",ANone);
      ("fontFace",ANone);
      ("fontEmSize",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("glyphAdvances",ANone);
      ("glyphOffsets",ANone);
    ],MANone);
    ("GetGdiCompatibleGlyphPlacements",[
      ("This",AThis);
      ("textString",ANone);
      ("clusterMap",ANone);
      ("textProps",ANone);
      ("textLength",ANone);
      ("glyphIndices",ANone);
      ("glyphProps",ANone);
      ("glyphCount",ANone);
      ("fontFace",ANone);
      ("fontEmSize",ANone);
      ("pixelsPerDip",ANone);
      ("transform",ANone);
      ("useGdiNatural",ANone);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("scriptAnalysis",ANone);
      ("localeName",ANone);
      ("features",ANone);
      ("featureRangeLengths",ANone);
      ("featureRanges",ANone);
      ("glyphAdvances",ANone);
      ("glyphOffsets",ANone);
    ],MANone);
  ]);
  ("IDWriteTextFormatVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("SetTextAlignment",[
      ("This",AThis);
      ("textAlignment",ANone);
    ],MANone);
    ("SetParagraphAlignment",[
      ("This",AThis);
      ("paragraphAlignment",ANone);
    ],MANone);
    ("SetWordWrapping",[
      ("This",AThis);
      ("wordWrapping",ANone);
    ],MANone);
    ("SetReadingDirection",[
      ("This",AThis);
      ("readingDirection",ANone);
    ],MANone);
    ("SetFlowDirection",[
      ("This",AThis);
      ("flowDirection",ANone);
    ],MANone);
    ("SetIncrementalTabStop",[
      ("This",AThis);
      ("incrementalTabStop",ANone);
    ],MANone);
    ("SetTrimming",[
      ("This",AThis);
      ("trimmingOptions",ANone);
      ("trimmingSign",InComPtr);
    ],MANone);
    ("SetLineSpacing",[
      ("This",AThis);
      ("lineSpacingMethod",ANone);
      ("lineSpacing",ANone);
      ("baseline",ANone);
    ],MANone);
    ("GetTextAlignment",[
      ("This",AThis);
    ],MANone);
    ("GetParagraphAlignment",[
      ("This",AThis);
    ],MANone);
    ("GetWordWrapping",[
      ("This",AThis);
    ],MANone);
    ("GetReadingDirection",[
      ("This",AThis);
    ],MANone);
    ("GetFlowDirection",[
      ("This",AThis);
    ],MANone);
    ("GetIncrementalTabStop",[
      ("This",AThis);
    ],MANone);
    ("GetTrimming",[
      ("This",AThis);
      ("trimmingOptions",ANone);
      ("trimmingSign",OutReturnComPtr);
    ],MANone);
    ("GetLineSpacing",[
      ("This",AThis);
      ("lineSpacingMethod",OutReturn);
      ("lineSpacing",OutReturn);
      ("baseline",OutReturn);
    ],MANone);
    ("GetFontCollection",[
      ("This",AThis);
      ("fontCollection",OutReturnComPtr);
    ],MANone);
    ("GetFontFamilyNameLength",[
      ("This",AThis);
    ],MANone);
    ("GetFontFamilyName",[
      ("This",AThis);
      ("fontFamilyName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
    ],MANone);
    ("GetFontWeight",[
      ("This",AThis);
    ],MANone);
    ("GetFontStyle",[
      ("This",AThis);
    ],MANone);
    ("GetFontStretch",[
      ("This",AThis);
    ],MANone);
    ("GetFontSize",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
    ],MANone);
    ("GetLocaleName",[
      ("This",AThis);
      ("localeName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
    ],MANone);
  ]);
  ("IDWriteTextLayoutVtbl",IAAutogen(Set.ofList []), "IDWriteTextFormatVtbl", [
    ("SetMaxWidth",[
      ("This",AThis);
      ("maxWidth",ANone);
    ],MANone);
    ("SetMaxHeight",[
      ("This",AThis);
      ("maxHeight",ANone);
    ],MANone);
    ("SetFontCollection",[
      ("This",AThis);
      ("fontCollection",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetFontFamilyName",[
      ("This",AThis);
      ("fontFamilyName",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontWeight",[
      ("This",AThis);
      ("fontWeight",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontStyle",[
      ("This",AThis);
      ("fontStyle",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontStretch",[
      ("This",AThis);
      ("fontStretch",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetFontSize",[
      ("This",AThis);
      ("fontSize",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetUnderline",[
      ("This",AThis);
      ("hasUnderline",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetStrikethrough",[
      ("This",AThis);
      ("hasStrikethrough",ANone);
      ("textRange",ANone);
    ],MANone);
    ("SetDrawingEffect",[
      ("This",AThis);
      ("drawingEffect",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetInlineObject",[
      ("This",AThis);
      ("inlineObject",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetTypography",[
      ("This",AThis);
      ("typography",InComPtr);
      ("textRange",ANone);
    ],MANone);
    ("SetLocaleName",[
      ("This",AThis);
      ("localeName",ANone);
      ("textRange",ANone);
    ],MANone);
    ("GetMaxWidth",[
      ("This",AThis);
    ],MANone);
    ("GetMaxHeight",[
      ("This",AThis);
    ],MANone);
    ("GetFontCollection",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontCollection",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MAMangle "GetFontCollectionTl");
    ("GetFontFamilyNameLength",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("nameLength",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontFamilyNameLengthTl");
    ("GetFontFamilyName",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontFamilyName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
      ("textRange",OutReturn);
    ],MAMangle "GetFontFamilyNameTl");
    ("GetFontWeight",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontWeight",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontWeightTl");
    ("GetFontStyle",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontStyle",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontStyleTl");
    ("GetFontStretch",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontStretch",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontStretchTl");
    ("GetFontSize",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("fontSize",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetFontSizeTl");
    ("GetUnderline",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("hasUnderline",ANone);
      ("textRange",ANone);
    ],MANone);
    ("GetStrikethrough",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("hasStrikethrough",OutReturn);
      ("textRange",OutReturn);
    ],MANone);
    ("GetDrawingEffect",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("drawingEffect",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetInlineObject",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("inlineObject",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetTypography",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("typography",OutReturnComPtr);
      ("textRange",OutReturn);
    ],MANone);
    ("GetLocaleNameLength",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("nameLength",OutReturn);
      ("textRange",OutReturn);
    ],MAMangle "GetLocaleNameLengthTl");
    ("GetLocaleName",[
      ("This",AThis);
      ("currentPosition",ANone);
      ("localeName",OutArrayOfSize "nameSize");
      ("nameSize",ANone);
      ("textRange",OutReturn);
    ],MAMangle "GetLocaleNameTl");
    ("Draw",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("renderer",InComPtr);
      ("originX",ANone);
      ("originY",ANone);
    ],MAUnsafe);
    ("GetLineMetrics",[
      ("This",AThis);
      ("lineMetrics",OutOptionalArrayOfSize "maxLineCount");
      ("maxLineCount",ANone);
      ("actualLineCount",OutReturn);
    ],MANone);
    ("GetMetrics",[
      ("This",AThis);
      ("textMetrics",OutReturn);
    ],MANone);
    ("GetOverhangMetrics",[
      ("This",AThis);
      ("overhangs",OutReturn);
    ],MANone);
    ("GetClusterMetrics",[
      ("This",AThis);
      ("clusterMetrics",OutOptionalArrayOfSize "maxClusterCount");
      ("maxClusterCount",ANone);
      ("actualClusterCount",OutReturn);
    ],MANone);
    ("DetermineMinWidth",[
      ("This",AThis);
      ("minWidth",OutReturn);
    ],MANone);
    ("HitTestPoint",[
      ("This",AThis);
      ("pointX",ANone);
      ("pointY",ANone);
      ("isTrailingHit",OutReturn);
      ("isInside",OutReturn);
      ("hitTestMetrics",OutReturn);
    ],MANone);
    ("HitTestTextPosition",[
      ("This",AThis);
      ("textPosition",ANone);
      ("isTrailingHit",ANone);
      ("pointX",OutReturn);
      ("pointY",OutReturn);
      ("hitTestMetrics",OutReturn);
    ],MANone);
    ("HitTestTextRange",[
      ("This",AThis);
      ("textPosition",ANone);
      ("textLength",ANone);
      ("originX",ANone);
      ("originY",ANone);
      ("hitTestMetrics",OutOptionalArrayOfSize "maxHitTestMetricsCount");
      ("maxHitTestMetricsCount",ANone);
      ("actualHitTestMetricsCount",OutReturn);
    ],MANone);
  ]);
  ("IDWriteTextRendererVtbl",IAAutogen(Set.ofList []), "IDWritePixelSnappingVtbl", [
    ("DrawGlyphRun",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("measuringMode",ANone);
      ("glyphRun",ANone);
      ("glyphRunDescription",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawUnderline",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("underline",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawStrikethrough",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("baselineOriginX",ANone);
      ("baselineOriginY",ANone);
      ("strikethrough",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
    ("DrawInlineObject",[
      ("This",AThis);
      ("clientDrawingContext",ANone);
      ("originX",ANone);
      ("originY",ANone);
      ("inlineObject",InComPtr);
      ("isSideways",ANone);
      ("isRightToLeft",ANone);
      ("clientDrawingEffect",InComPtr);
    ],MAUnsafe);
  ]);
  ("IDWriteTypographyVtbl",IAAutogen(Set.ofList []), "IUnknownVtbl", [
    ("AddFontFeature",[
      ("This",AThis);
      ("fontFeature",ANone);
    ],MANone);
    ("GetFontFeatureCount",[
      ("This",AThis);
    ],MANone);
    ("GetFontFeature",[
      ("This",AThis);
      ("fontFeatureIndex",ANone);
      ("fontFeature",OutReturn);
    ],MANone);
  ]);
  ]
